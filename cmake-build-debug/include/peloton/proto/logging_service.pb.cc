// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "logging_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace peloton {
namespace networking {
class LogRecordReplayRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogRecordReplayRequest>
     _instance;
} _LogRecordReplayRequest_default_instance_;
class LogRecordReplayResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<LogRecordReplayResponse>
     _instance;
} _LogRecordReplayResponse_default_instance_;

namespace protobuf_logging_5fservice_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayRequest, log_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayRequest, sync_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayRequest, sequence_number_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogRecordReplayResponse, sequence_number_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(LogRecordReplayRequest)},
  { 11, 17, sizeof(LogRecordReplayResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogRecordReplayRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LogRecordReplayResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "logging_service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LogRecordReplayRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogRecordReplayRequest_default_instance_);_LogRecordReplayResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_LogRecordReplayResponse_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025logging_service.proto\022\022peloton.network"
      "ing\"s\n\026LogRecordReplayRequest\022\013\n\003log\030\001 \002"
      "(\014\0223\n\tsync_type\030\002 \002(\0162 .peloton.networki"
      "ng.ResponseType\022\027\n\017sequence_number\030\003 \002(\003"
      "\"2\n\027LogRecordReplayResponse\022\027\n\017sequence_"
      "number\030\001 \002(\003*1\n\014ResponseType\022\010\n\004SYNC\020\000\022\t"
      "\n\005ASYNC\020\001\022\014\n\010SEMISYNC\020\002*6\n\rLoggingStatus"
      "\022\023\n\017REPLAY_COMPLETE\020\000\022\020\n\014REPLAY_ERROR\020\0012"
      "\203\001\n\025PelotonLoggingService\022j\n\017LogRecordRe"
      "play\022*.peloton.networking.LogRecordRepla"
      "yRequest\032+.peloton.networking.LogRecordR"
      "eplayResponseB\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 458);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "logging_service.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_logging_5fservice_2eproto

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor() {
  protobuf_logging_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_logging_5fservice_2eproto::file_level_enum_descriptors[0];
}
bool ResponseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LoggingStatus_descriptor() {
  protobuf_logging_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_logging_5fservice_2eproto::file_level_enum_descriptors[1];
}
bool LoggingStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRecordReplayRequest::kLogFieldNumber;
const int LogRecordReplayRequest::kSyncTypeFieldNumber;
const int LogRecordReplayRequest::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRecordReplayRequest::LogRecordReplayRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_logging_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.LogRecordReplayRequest)
}
LogRecordReplayRequest::LogRecordReplayRequest(const LogRecordReplayRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_log()) {
    log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
  }
  ::memcpy(&sequence_number_, &from.sequence_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&sync_type_) -
    reinterpret_cast<char*>(&sequence_number_)) + sizeof(sync_type_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.LogRecordReplayRequest)
}

void LogRecordReplayRequest::SharedCtor() {
  _cached_size_ = 0;
  log_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sequence_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sync_type_) -
      reinterpret_cast<char*>(&sequence_number_)) + sizeof(sync_type_));
}

LogRecordReplayRequest::~LogRecordReplayRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.LogRecordReplayRequest)
  SharedDtor();
}

void LogRecordReplayRequest::SharedDtor() {
  log_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogRecordReplayRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRecordReplayRequest::descriptor() {
  protobuf_logging_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_logging_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogRecordReplayRequest& LogRecordReplayRequest::default_instance() {
  protobuf_logging_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogRecordReplayRequest* LogRecordReplayRequest::New(::google::protobuf::Arena* arena) const {
  LogRecordReplayRequest* n = new LogRecordReplayRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRecordReplayRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.LogRecordReplayRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_log()) {
    GOOGLE_DCHECK(!log_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*log_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&sequence_number_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sync_type_) -
        reinterpret_cast<char*>(&sequence_number_)) + sizeof(sync_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogRecordReplayRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.LogRecordReplayRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes log = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.ResponseType sync_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::ResponseType_IsValid(value)) {
            set_sync_type(static_cast< ::peloton::networking::ResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 sequence_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.LogRecordReplayRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.LogRecordReplayRequest)
  return false;
#undef DO_
}

void LogRecordReplayRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.LogRecordReplayRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes log = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->log(), output);
  }

  // required .peloton.networking.ResponseType sync_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sync_type(), output);
  }

  // required int64 sequence_number = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->sequence_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.LogRecordReplayRequest)
}

::google::protobuf::uint8* LogRecordReplayRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.LogRecordReplayRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes log = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->log(), target);
  }

  // required .peloton.networking.ResponseType sync_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sync_type(), target);
  }

  // required int64 sequence_number = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->sequence_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.LogRecordReplayRequest)
  return target;
}

size_t LogRecordReplayRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.LogRecordReplayRequest)
  size_t total_size = 0;

  if (has_log()) {
    // required bytes log = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->log());
  }

  if (has_sequence_number()) {
    // required int64 sequence_number = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence_number());
  }

  if (has_sync_type()) {
    // required .peloton.networking.ResponseType sync_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync_type());
  }

  return total_size;
}
size_t LogRecordReplayRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.LogRecordReplayRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes log = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->log());

    // required int64 sequence_number = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence_number());

    // required .peloton.networking.ResponseType sync_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sync_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRecordReplayRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.LogRecordReplayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRecordReplayRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRecordReplayRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.LogRecordReplayRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.LogRecordReplayRequest)
    MergeFrom(*source);
  }
}

void LogRecordReplayRequest::MergeFrom(const LogRecordReplayRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.LogRecordReplayRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_log();
      log_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_);
    }
    if (cached_has_bits & 0x00000002u) {
      sequence_number_ = from.sequence_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      sync_type_ = from.sync_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LogRecordReplayRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.LogRecordReplayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecordReplayRequest::CopyFrom(const LogRecordReplayRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.LogRecordReplayRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecordReplayRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void LogRecordReplayRequest::Swap(LogRecordReplayRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRecordReplayRequest::InternalSwap(LogRecordReplayRequest* other) {
  using std::swap;
  log_.Swap(&other->log_);
  swap(sequence_number_, other->sequence_number_);
  swap(sync_type_, other->sync_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRecordReplayRequest::GetMetadata() const {
  protobuf_logging_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_logging_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRecordReplayRequest

// required bytes log = 1;
bool LogRecordReplayRequest::has_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogRecordReplayRequest::set_has_log() {
  _has_bits_[0] |= 0x00000001u;
}
void LogRecordReplayRequest::clear_has_log() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogRecordReplayRequest::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log();
}
const ::std::string& LogRecordReplayRequest::log() const {
  // @@protoc_insertion_point(field_get:peloton.networking.LogRecordReplayRequest.log)
  return log_.GetNoArena();
}
void LogRecordReplayRequest::set_log(const ::std::string& value) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.LogRecordReplayRequest.log)
}
#if LANG_CXX11
void LogRecordReplayRequest::set_log(::std::string&& value) {
  set_has_log();
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.LogRecordReplayRequest.log)
}
#endif
void LogRecordReplayRequest::set_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.LogRecordReplayRequest.log)
}
void LogRecordReplayRequest::set_log(const void* value, size_t size) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.LogRecordReplayRequest.log)
}
::std::string* LogRecordReplayRequest::mutable_log() {
  set_has_log();
  // @@protoc_insertion_point(field_mutable:peloton.networking.LogRecordReplayRequest.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogRecordReplayRequest::release_log() {
  // @@protoc_insertion_point(field_release:peloton.networking.LogRecordReplayRequest.log)
  clear_has_log();
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogRecordReplayRequest::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    set_has_log();
  } else {
    clear_has_log();
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.LogRecordReplayRequest.log)
}

// required .peloton.networking.ResponseType sync_type = 2;
bool LogRecordReplayRequest::has_sync_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LogRecordReplayRequest::set_has_sync_type() {
  _has_bits_[0] |= 0x00000004u;
}
void LogRecordReplayRequest::clear_has_sync_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void LogRecordReplayRequest::clear_sync_type() {
  sync_type_ = 0;
  clear_has_sync_type();
}
::peloton::networking::ResponseType LogRecordReplayRequest::sync_type() const {
  // @@protoc_insertion_point(field_get:peloton.networking.LogRecordReplayRequest.sync_type)
  return static_cast< ::peloton::networking::ResponseType >(sync_type_);
}
void LogRecordReplayRequest::set_sync_type(::peloton::networking::ResponseType value) {
  assert(::peloton::networking::ResponseType_IsValid(value));
  set_has_sync_type();
  sync_type_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.LogRecordReplayRequest.sync_type)
}

// required int64 sequence_number = 3;
bool LogRecordReplayRequest::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LogRecordReplayRequest::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000002u;
}
void LogRecordReplayRequest::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000002u;
}
void LogRecordReplayRequest::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_number();
}
::google::protobuf::int64 LogRecordReplayRequest::sequence_number() const {
  // @@protoc_insertion_point(field_get:peloton.networking.LogRecordReplayRequest.sequence_number)
  return sequence_number_;
}
void LogRecordReplayRequest::set_sequence_number(::google::protobuf::int64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.LogRecordReplayRequest.sequence_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogRecordReplayResponse::kSequenceNumberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogRecordReplayResponse::LogRecordReplayResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_logging_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.LogRecordReplayResponse)
}
LogRecordReplayResponse::LogRecordReplayResponse(const LogRecordReplayResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sequence_number_ = from.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:peloton.networking.LogRecordReplayResponse)
}

void LogRecordReplayResponse::SharedCtor() {
  _cached_size_ = 0;
  sequence_number_ = GOOGLE_LONGLONG(0);
}

LogRecordReplayResponse::~LogRecordReplayResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.LogRecordReplayResponse)
  SharedDtor();
}

void LogRecordReplayResponse::SharedDtor() {
}

void LogRecordReplayResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogRecordReplayResponse::descriptor() {
  protobuf_logging_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_logging_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogRecordReplayResponse& LogRecordReplayResponse::default_instance() {
  protobuf_logging_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogRecordReplayResponse* LogRecordReplayResponse::New(::google::protobuf::Arena* arena) const {
  LogRecordReplayResponse* n = new LogRecordReplayResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogRecordReplayResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.LogRecordReplayResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sequence_number_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LogRecordReplayResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.LogRecordReplayResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sequence_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sequence_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sequence_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.LogRecordReplayResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.LogRecordReplayResponse)
  return false;
#undef DO_
}

void LogRecordReplayResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.LogRecordReplayResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 sequence_number = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sequence_number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.LogRecordReplayResponse)
}

::google::protobuf::uint8* LogRecordReplayResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.LogRecordReplayResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 sequence_number = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sequence_number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.LogRecordReplayResponse)
  return target;
}

size_t LogRecordReplayResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.LogRecordReplayResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 sequence_number = 1;
  if (has_sequence_number()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->sequence_number());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogRecordReplayResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.LogRecordReplayResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogRecordReplayResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogRecordReplayResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.LogRecordReplayResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.LogRecordReplayResponse)
    MergeFrom(*source);
  }
}

void LogRecordReplayResponse::MergeFrom(const LogRecordReplayResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.LogRecordReplayResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sequence_number()) {
    set_sequence_number(from.sequence_number());
  }
}

void LogRecordReplayResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.LogRecordReplayResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogRecordReplayResponse::CopyFrom(const LogRecordReplayResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.LogRecordReplayResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogRecordReplayResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void LogRecordReplayResponse::Swap(LogRecordReplayResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogRecordReplayResponse::InternalSwap(LogRecordReplayResponse* other) {
  using std::swap;
  swap(sequence_number_, other->sequence_number_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LogRecordReplayResponse::GetMetadata() const {
  protobuf_logging_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_logging_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogRecordReplayResponse

// required int64 sequence_number = 1;
bool LogRecordReplayResponse::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LogRecordReplayResponse::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000001u;
}
void LogRecordReplayResponse::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void LogRecordReplayResponse::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_number();
}
::google::protobuf::int64 LogRecordReplayResponse::sequence_number() const {
  // @@protoc_insertion_point(field_get:peloton.networking.LogRecordReplayResponse.sequence_number)
  return sequence_number_;
}
void LogRecordReplayResponse::set_sequence_number(::google::protobuf::int64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.LogRecordReplayResponse.sequence_number)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

PelotonLoggingService::~PelotonLoggingService() {}

const ::google::protobuf::ServiceDescriptor* PelotonLoggingService::descriptor() {
  protobuf_logging_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_logging_5fservice_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* PelotonLoggingService::GetDescriptor() {
  return descriptor();
}

void PelotonLoggingService::LogRecordReplay(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::LogRecordReplayRequest*,
                         ::peloton::networking::LogRecordReplayResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LogRecordReplay() not implemented.");
  done->Run();
}

void PelotonLoggingService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_logging_5fservice_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      LogRecordReplay(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::LogRecordReplayRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::LogRecordReplayResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& PelotonLoggingService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::peloton::networking::LogRecordReplayRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& PelotonLoggingService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::peloton::networking::LogRecordReplayResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

PelotonLoggingService_Stub::PelotonLoggingService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
PelotonLoggingService_Stub::PelotonLoggingService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
PelotonLoggingService_Stub::~PelotonLoggingService_Stub() {
  if (owns_channel_) delete channel_;
}

void PelotonLoggingService_Stub::LogRecordReplay(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::LogRecordReplayRequest* request,
                              ::peloton::networking::LogRecordReplayResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace networking
}  // namespace peloton

// @@protoc_insertion_point(global_scope)
