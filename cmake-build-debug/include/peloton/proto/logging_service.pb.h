// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging_service.proto

#ifndef PROTOBUF_logging_5fservice_2eproto__INCLUDED
#define PROTOBUF_logging_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace peloton {
namespace networking {
class LogRecordReplayRequest;
class LogRecordReplayRequestDefaultTypeInternal;
extern LogRecordReplayRequestDefaultTypeInternal _LogRecordReplayRequest_default_instance_;
class LogRecordReplayResponse;
class LogRecordReplayResponseDefaultTypeInternal;
extern LogRecordReplayResponseDefaultTypeInternal _LogRecordReplayResponse_default_instance_;
}  // namespace networking
}  // namespace peloton

namespace peloton {
namespace networking {

namespace protobuf_logging_5fservice_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_logging_5fservice_2eproto

enum ResponseType {
  SYNC = 0,
  ASYNC = 1,
  SEMISYNC = 2
};
bool ResponseType_IsValid(int value);
const ResponseType ResponseType_MIN = SYNC;
const ResponseType ResponseType_MAX = SEMISYNC;
const int ResponseType_ARRAYSIZE = ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseType_descriptor();
inline const ::std::string& ResponseType_Name(ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseType_descriptor(), value);
}
inline bool ResponseType_Parse(
    const ::std::string& name, ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseType>(
    ResponseType_descriptor(), name, value);
}
enum LoggingStatus {
  REPLAY_COMPLETE = 0,
  REPLAY_ERROR = 1
};
bool LoggingStatus_IsValid(int value);
const LoggingStatus LoggingStatus_MIN = REPLAY_COMPLETE;
const LoggingStatus LoggingStatus_MAX = REPLAY_ERROR;
const int LoggingStatus_ARRAYSIZE = LoggingStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* LoggingStatus_descriptor();
inline const ::std::string& LoggingStatus_Name(LoggingStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    LoggingStatus_descriptor(), value);
}
inline bool LoggingStatus_Parse(
    const ::std::string& name, LoggingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LoggingStatus>(
    LoggingStatus_descriptor(), name, value);
}
// ===================================================================

class LogRecordReplayRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peloton.networking.LogRecordReplayRequest) */ {
 public:
  LogRecordReplayRequest();
  virtual ~LogRecordReplayRequest();

  LogRecordReplayRequest(const LogRecordReplayRequest& from);

  inline LogRecordReplayRequest& operator=(const LogRecordReplayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogRecordReplayRequest(LogRecordReplayRequest&& from) noexcept
    : LogRecordReplayRequest() {
    *this = ::std::move(from);
  }

  inline LogRecordReplayRequest& operator=(LogRecordReplayRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRecordReplayRequest& default_instance();

  static inline const LogRecordReplayRequest* internal_default_instance() {
    return reinterpret_cast<const LogRecordReplayRequest*>(
               &_LogRecordReplayRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LogRecordReplayRequest* other);
  friend void swap(LogRecordReplayRequest& a, LogRecordReplayRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogRecordReplayRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  LogRecordReplayRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogRecordReplayRequest& from);
  void MergeFrom(const LogRecordReplayRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogRecordReplayRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes log = 1;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 1;
  const ::std::string& log() const;
  void set_log(const ::std::string& value);
  #if LANG_CXX11
  void set_log(::std::string&& value);
  #endif
  void set_log(const char* value);
  void set_log(const void* value, size_t size);
  ::std::string* mutable_log();
  ::std::string* release_log();
  void set_allocated_log(::std::string* log);

  // required int64 sequence_number = 3;
  bool has_sequence_number() const;
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 3;
  ::google::protobuf::int64 sequence_number() const;
  void set_sequence_number(::google::protobuf::int64 value);

  // required .peloton.networking.ResponseType sync_type = 2;
  bool has_sync_type() const;
  void clear_sync_type();
  static const int kSyncTypeFieldNumber = 2;
  ::peloton::networking::ResponseType sync_type() const;
  void set_sync_type(::peloton::networking::ResponseType value);

  // @@protoc_insertion_point(class_scope:peloton.networking.LogRecordReplayRequest)
 private:
  void set_has_log();
  void clear_has_log();
  void set_has_sync_type();
  void clear_has_sync_type();
  void set_has_sequence_number();
  void clear_has_sequence_number();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr log_;
  ::google::protobuf::int64 sequence_number_;
  int sync_type_;
  friend struct protobuf_logging_5fservice_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogRecordReplayResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:peloton.networking.LogRecordReplayResponse) */ {
 public:
  LogRecordReplayResponse();
  virtual ~LogRecordReplayResponse();

  LogRecordReplayResponse(const LogRecordReplayResponse& from);

  inline LogRecordReplayResponse& operator=(const LogRecordReplayResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogRecordReplayResponse(LogRecordReplayResponse&& from) noexcept
    : LogRecordReplayResponse() {
    *this = ::std::move(from);
  }

  inline LogRecordReplayResponse& operator=(LogRecordReplayResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogRecordReplayResponse& default_instance();

  static inline const LogRecordReplayResponse* internal_default_instance() {
    return reinterpret_cast<const LogRecordReplayResponse*>(
               &_LogRecordReplayResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LogRecordReplayResponse* other);
  friend void swap(LogRecordReplayResponse& a, LogRecordReplayResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogRecordReplayResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  LogRecordReplayResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LogRecordReplayResponse& from);
  void MergeFrom(const LogRecordReplayResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LogRecordReplayResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 sequence_number = 1;
  bool has_sequence_number() const;
  void clear_sequence_number();
  static const int kSequenceNumberFieldNumber = 1;
  ::google::protobuf::int64 sequence_number() const;
  void set_sequence_number(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:peloton.networking.LogRecordReplayResponse)
 private:
  void set_has_sequence_number();
  void clear_has_sequence_number();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 sequence_number_;
  friend struct protobuf_logging_5fservice_2eproto::TableStruct;
};
// ===================================================================

class PelotonLoggingService_Stub;

class PelotonLoggingService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PelotonLoggingService() {};
 public:
  virtual ~PelotonLoggingService();

  typedef PelotonLoggingService_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void LogRecordReplay(::google::protobuf::RpcController* controller,
                       const ::peloton::networking::LogRecordReplayRequest* request,
                       ::peloton::networking::LogRecordReplayResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PelotonLoggingService);
};

class PelotonLoggingService_Stub : public PelotonLoggingService {
 public:
  PelotonLoggingService_Stub(::google::protobuf::RpcChannel* channel);
  PelotonLoggingService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~PelotonLoggingService_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements PelotonLoggingService ------------------------------------------

  void LogRecordReplay(::google::protobuf::RpcController* controller,
                       const ::peloton::networking::LogRecordReplayRequest* request,
                       ::peloton::networking::LogRecordReplayResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PelotonLoggingService_Stub);
};


// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogRecordReplayRequest

// required bytes log = 1;
inline bool LogRecordReplayRequest::has_log() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRecordReplayRequest::set_has_log() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRecordReplayRequest::clear_has_log() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRecordReplayRequest::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log();
}
inline const ::std::string& LogRecordReplayRequest::log() const {
  // @@protoc_insertion_point(field_get:peloton.networking.LogRecordReplayRequest.log)
  return log_.GetNoArena();
}
inline void LogRecordReplayRequest::set_log(const ::std::string& value) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.LogRecordReplayRequest.log)
}
#if LANG_CXX11
inline void LogRecordReplayRequest::set_log(::std::string&& value) {
  set_has_log();
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.LogRecordReplayRequest.log)
}
#endif
inline void LogRecordReplayRequest::set_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.LogRecordReplayRequest.log)
}
inline void LogRecordReplayRequest::set_log(const void* value, size_t size) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.LogRecordReplayRequest.log)
}
inline ::std::string* LogRecordReplayRequest::mutable_log() {
  set_has_log();
  // @@protoc_insertion_point(field_mutable:peloton.networking.LogRecordReplayRequest.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogRecordReplayRequest::release_log() {
  // @@protoc_insertion_point(field_release:peloton.networking.LogRecordReplayRequest.log)
  clear_has_log();
  return log_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogRecordReplayRequest::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    set_has_log();
  } else {
    clear_has_log();
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.LogRecordReplayRequest.log)
}

// required .peloton.networking.ResponseType sync_type = 2;
inline bool LogRecordReplayRequest::has_sync_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogRecordReplayRequest::set_has_sync_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogRecordReplayRequest::clear_has_sync_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogRecordReplayRequest::clear_sync_type() {
  sync_type_ = 0;
  clear_has_sync_type();
}
inline ::peloton::networking::ResponseType LogRecordReplayRequest::sync_type() const {
  // @@protoc_insertion_point(field_get:peloton.networking.LogRecordReplayRequest.sync_type)
  return static_cast< ::peloton::networking::ResponseType >(sync_type_);
}
inline void LogRecordReplayRequest::set_sync_type(::peloton::networking::ResponseType value) {
  assert(::peloton::networking::ResponseType_IsValid(value));
  set_has_sync_type();
  sync_type_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.LogRecordReplayRequest.sync_type)
}

// required int64 sequence_number = 3;
inline bool LogRecordReplayRequest::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogRecordReplayRequest::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogRecordReplayRequest::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogRecordReplayRequest::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_number();
}
inline ::google::protobuf::int64 LogRecordReplayRequest::sequence_number() const {
  // @@protoc_insertion_point(field_get:peloton.networking.LogRecordReplayRequest.sequence_number)
  return sequence_number_;
}
inline void LogRecordReplayRequest::set_sequence_number(::google::protobuf::int64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.LogRecordReplayRequest.sequence_number)
}

// -------------------------------------------------------------------

// LogRecordReplayResponse

// required int64 sequence_number = 1;
inline bool LogRecordReplayResponse::has_sequence_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogRecordReplayResponse::set_has_sequence_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogRecordReplayResponse::clear_has_sequence_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogRecordReplayResponse::clear_sequence_number() {
  sequence_number_ = GOOGLE_LONGLONG(0);
  clear_has_sequence_number();
}
inline ::google::protobuf::int64 LogRecordReplayResponse::sequence_number() const {
  // @@protoc_insertion_point(field_get:peloton.networking.LogRecordReplayResponse.sequence_number)
  return sequence_number_;
}
inline void LogRecordReplayResponse::set_sequence_number(::google::protobuf::int64 value) {
  set_has_sequence_number();
  sequence_number_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.LogRecordReplayResponse.sequence_number)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace networking
}  // namespace peloton

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::peloton::networking::ResponseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::peloton::networking::ResponseType>() {
  return ::peloton::networking::ResponseType_descriptor();
}
template <> struct is_proto_enum< ::peloton::networking::LoggingStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::peloton::networking::LoggingStatus>() {
  return ::peloton::networking::LoggingStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_logging_5fservice_2eproto__INCLUDED
