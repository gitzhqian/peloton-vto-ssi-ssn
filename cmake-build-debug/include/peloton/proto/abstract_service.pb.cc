// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: abstract_service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "abstract_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace peloton {
namespace networking {
class WorkFragmentDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WorkFragment>
     _instance;
} _WorkFragment_default_instance_;
class WorkResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<WorkResult>
     _instance;
} _WorkResult_default_instance_;
class QueryEstimateDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryEstimate>
     _instance;
} _QueryEstimate_default_instance_;
class TransactionInitRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionInitRequest>
     _instance;
} _TransactionInitRequest_default_instance_;
class TransactionInitResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionInitResponse>
     _instance;
} _TransactionInitResponse_default_instance_;
class TransactionWorkRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionWorkRequest>
     _instance;
} _TransactionWorkRequest_default_instance_;
class TransactionWorkResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionWorkResponse>
     _instance;
} _TransactionWorkResponse_default_instance_;
class TransactionPrefetchResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionPrefetchResult>
     _instance;
} _TransactionPrefetchResult_default_instance_;
class TransactionPrefetchAcknowledgementDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionPrefetchAcknowledgement>
     _instance;
} _TransactionPrefetchAcknowledgement_default_instance_;
class TransactionMapRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionMapRequest>
     _instance;
} _TransactionMapRequest_default_instance_;
class TransactionMapResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionMapResponse>
     _instance;
} _TransactionMapResponse_default_instance_;
class TransactionReduceRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionReduceRequest>
     _instance;
} _TransactionReduceRequest_default_instance_;
class TransactionReduceResponse_ReduceResultDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionReduceResponse_ReduceResult>
     _instance;
} _TransactionReduceResponse_ReduceResult_default_instance_;
class TransactionReduceResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionReduceResponse>
     _instance;
} _TransactionReduceResponse_default_instance_;
class TransactionPrepareRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionPrepareRequest>
     _instance;
} _TransactionPrepareRequest_default_instance_;
class TransactionPrepareResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionPrepareResponse>
     _instance;
} _TransactionPrepareResponse_default_instance_;
class TransactionFinishRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionFinishRequest>
     _instance;
} _TransactionFinishRequest_default_instance_;
class TransactionFinishResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionFinishResponse>
     _instance;
} _TransactionFinishResponse_default_instance_;
class TransactionRedirectRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionRedirectRequest>
     _instance;
} _TransactionRedirectRequest_default_instance_;
class TransactionRedirectResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionRedirectResponse>
     _instance;
} _TransactionRedirectResponse_default_instance_;
class TransactionDebugRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionDebugRequest>
     _instance;
} _TransactionDebugRequest_default_instance_;
class TransactionDebugResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TransactionDebugResponse>
     _instance;
} _TransactionDebugResponse_default_instance_;
class SendDataRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SendDataRequest>
     _instance;
} _SendDataRequest_default_instance_;
class SendDataResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SendDataResponse>
     _instance;
} _SendDataResponse_default_instance_;
class InitializeRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InitializeRequest>
     _instance;
} _InitializeRequest_default_instance_;
class InitializeResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InitializeResponse>
     _instance;
} _InitializeResponse_default_instance_;
class ShutdownPrepareRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShutdownPrepareRequest>
     _instance;
} _ShutdownPrepareRequest_default_instance_;
class ShutdownPrepareResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShutdownPrepareResponse>
     _instance;
} _ShutdownPrepareResponse_default_instance_;
class ShutdownRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShutdownRequest>
     _instance;
} _ShutdownRequest_default_instance_;
class ShutdownResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ShutdownResponse>
     _instance;
} _ShutdownResponse_default_instance_;
class HeartbeatRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatRequest>
     _instance;
} _HeartbeatRequest_default_instance_;
class HeartbeatResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HeartbeatResponse>
     _instance;
} _HeartbeatResponse_default_instance_;
class UnevictDataRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UnevictDataRequest>
     _instance;
} _UnevictDataRequest_default_instance_;
class UnevictDataResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<UnevictDataResponse>
     _instance;
} _UnevictDataResponse_default_instance_;
class TimeSyncRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TimeSyncRequest>
     _instance;
} _TimeSyncRequest_default_instance_;
class TimeSyncResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<TimeSyncResponse>
     _instance;
} _TimeSyncResponse_default_instance_;
class QueryPlanExecRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryPlanExecRequest>
     _instance;
} _QueryPlanExecRequest_default_instance_;
class QueryPlanExecResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<QueryPlanExecResponse>
     _instance;
} _QueryPlanExecResponse_default_instance_;

namespace protobuf_abstract_5fservice_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[38];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, partition_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, fragment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, input_dep_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, output_dep_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, param_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, stmt_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, stmt_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, stmt_ignore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, read_only_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, needs_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, last_fragment_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, prefetch_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkFragment, force_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, partition_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, dep_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, dep_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkResult, error_),
  1,
  ~0u,
  ~0u,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, stmt_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, stmt_counters_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryEstimate, time_estimate_),
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, last_transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, base_partition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, procedure_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, partitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, proc_params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, prefetch_fragments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitRequest, prefetch_params_),
  1,
  2,
  3,
  4,
  ~0u,
  0,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, partitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, reject_partition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionInitResponse, reject_transaction_id_),
  0,
  ~0u,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, last_transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, source_partition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, fragments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, procedure_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, attached_dep_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, attached_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, done_partition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkRequest, proc_params_),
  1,
  2,
  3,
  ~0u,
  4,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionWorkResponse, status_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, last_transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, source_partition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, stmt_counter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, fragment_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchResult, param_hash_),
  1,
  2,
  3,
  0,
  4,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrefetchAcknowledgement, target_partition_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, last_transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, client_handle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, base_partition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, procedure_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapRequest, params_),
  1,
  2,
  3,
  4,
  5,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, partitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionMapResponse, status_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceRequest, transaction_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, partition_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse_ReduceResult, error_),
  1,
  0,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionReduceResponse, status_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareRequest, partitions_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, partitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionPrepareResponse, status_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, partitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishRequest, status_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionFinishResponse, partitions_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, work_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectRequest, orig_txn_id_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRedirectResponse, output_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugRequest, transaction_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionDebugResponse, debug_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, dep_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataRequest, data_),
  0,
  1,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, partitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendDataResponse, status_),
  0,
  ~0u,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeRequest, instance_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitializeResponse, status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareRequest, error_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownPrepareResponse, sender_site_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownRequest, exit_status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShutdownResponse, sender_site_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatRequest, last_transaction_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartbeatResponse, status_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, partition_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, table_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, block_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, tuple_offsets_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataRequest, new_transaction_id_),
  1,
  0,
  2,
  4,
  ~0u,
  ~0u,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, transaction_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnevictDataResponse, partition_id_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncRequest, t0_s_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, sender_site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, t0_s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, t0_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeSyncResponse, t1_s_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, plan_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, param_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, param_list_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecRequest, plan_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecResponse, tuple_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecResponse, tile_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPlanExecResponse, result_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(WorkFragment)},
  { 31, 41, sizeof(WorkResult)},
  { 46, 54, sizeof(QueryEstimate)},
  { 57, 70, sizeof(TransactionInitRequest)},
  { 78, 88, sizeof(TransactionInitResponse)},
  { 93, 108, sizeof(TransactionWorkRequest)},
  { 118, 126, sizeof(TransactionWorkResponse)},
  { 129, 142, sizeof(TransactionPrefetchResult)},
  { 150, 157, sizeof(TransactionPrefetchAcknowledgement)},
  { 159, 170, sizeof(TransactionMapRequest)},
  { 176, 184, sizeof(TransactionMapResponse)},
  { 187, 193, sizeof(TransactionReduceRequest)},
  { 194, 203, sizeof(TransactionReduceResponse_ReduceResult)},
  { 207, 215, sizeof(TransactionReduceResponse)},
  { 218, 225, sizeof(TransactionPrepareRequest)},
  { 227, 235, sizeof(TransactionPrepareResponse)},
  { 238, 246, sizeof(TransactionFinishRequest)},
  { 249, 256, sizeof(TransactionFinishResponse)},
  { 258, 266, sizeof(TransactionRedirectRequest)},
  { 269, 276, sizeof(TransactionRedirectResponse)},
  { 278, 285, sizeof(TransactionDebugRequest)},
  { 287, 295, sizeof(TransactionDebugResponse)},
  { 298, 307, sizeof(SendDataRequest)},
  { 311, 320, sizeof(SendDataResponse)},
  { 324, 331, sizeof(InitializeRequest)},
  { 333, 340, sizeof(InitializeResponse)},
  { 342, 349, sizeof(ShutdownPrepareRequest)},
  { 351, 357, sizeof(ShutdownPrepareResponse)},
  { 358, 365, sizeof(ShutdownRequest)},
  { 367, 373, sizeof(ShutdownResponse)},
  { 374, 381, sizeof(HeartbeatRequest)},
  { 383, 390, sizeof(HeartbeatResponse)},
  { 392, 404, sizeof(UnevictDataRequest)},
  { 411, 420, sizeof(UnevictDataResponse)},
  { 424, 431, sizeof(TimeSyncRequest)},
  { 433, 442, sizeof(TimeSyncResponse)},
  { 446, 455, sizeof(QueryPlanExecRequest)},
  { 459, 467, sizeof(QueryPlanExecResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_WorkFragment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_WorkResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryEstimate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionInitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionInitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionWorkRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionWorkResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionPrefetchResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionPrefetchAcknowledgement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionMapRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionMapResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionReduceRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionReduceResponse_ReduceResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionReduceResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionPrepareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionPrepareResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionFinishRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionFinishResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionRedirectRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionRedirectResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionDebugRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TransactionDebugResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendDataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitializeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitializeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShutdownPrepareRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShutdownPrepareResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShutdownRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ShutdownResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartbeatRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HeartbeatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnevictDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnevictDataResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimeSyncRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TimeSyncResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryPlanExecRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_QueryPlanExecResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "abstract_service.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 38);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _WorkFragment_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WorkFragment_default_instance_);_WorkResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_WorkResult_default_instance_);_QueryEstimate_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryEstimate_default_instance_);_TransactionInitRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionInitRequest_default_instance_);_TransactionInitResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionInitResponse_default_instance_);_TransactionWorkRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionWorkRequest_default_instance_);_TransactionWorkResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionWorkResponse_default_instance_);_TransactionPrefetchResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionPrefetchResult_default_instance_);_TransactionPrefetchAcknowledgement_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionPrefetchAcknowledgement_default_instance_);_TransactionMapRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionMapRequest_default_instance_);_TransactionMapResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionMapResponse_default_instance_);_TransactionReduceRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionReduceRequest_default_instance_);_TransactionReduceResponse_ReduceResult_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionReduceResponse_ReduceResult_default_instance_);_TransactionReduceResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionReduceResponse_default_instance_);_TransactionPrepareRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionPrepareRequest_default_instance_);_TransactionPrepareResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionPrepareResponse_default_instance_);_TransactionFinishRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionFinishRequest_default_instance_);_TransactionFinishResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionFinishResponse_default_instance_);_TransactionRedirectRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionRedirectRequest_default_instance_);_TransactionRedirectResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionRedirectResponse_default_instance_);_TransactionDebugRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionDebugRequest_default_instance_);_TransactionDebugResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TransactionDebugResponse_default_instance_);_SendDataRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SendDataRequest_default_instance_);_SendDataResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SendDataResponse_default_instance_);_InitializeRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InitializeRequest_default_instance_);_InitializeResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InitializeResponse_default_instance_);_ShutdownPrepareRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShutdownPrepareRequest_default_instance_);_ShutdownPrepareResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShutdownPrepareResponse_default_instance_);_ShutdownRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShutdownRequest_default_instance_);_ShutdownResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ShutdownResponse_default_instance_);_HeartbeatRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HeartbeatRequest_default_instance_);_HeartbeatResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HeartbeatResponse_default_instance_);_UnevictDataRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UnevictDataRequest_default_instance_);_UnevictDataResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_UnevictDataResponse_default_instance_);_TimeSyncRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TimeSyncRequest_default_instance_);_TimeSyncResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_TimeSyncResponse_default_instance_);_QueryPlanExecRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryPlanExecRequest_default_instance_);_QueryPlanExecResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_QueryPlanExecResponse_default_instance_);_TransactionPrefetchResult_default_instance_._instance.get_mutable()->result_ = const_cast< ::peloton::networking::WorkResult*>(
      ::peloton::networking::WorkResult::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\026abstract_service.proto\022\022peloton.networ"
      "king\"\322\002\n\014WorkFragment\022\024\n\014partition_id\030\001 "
      "\002(\005\022\027\n\013fragment_id\030\002 \003(\005B\002\020\001\022\030\n\014input_de"
      "p_id\030\003 \003(\005B\002\020\001\022\031\n\routput_dep_id\030\004 \003(\005B\002\020"
      "\001\022\027\n\013param_index\030\005 \003(\005B\002\020\001\022\030\n\014stmt_count"
      "er\030\006 \003(\005B\002\020\001\022\026\n\nstmt_index\030\007 \003(\005B\002\020\001\022\027\n\013"
      "stmt_ignore\030\010 \003(\010B\002\020\001\022\021\n\tread_only\030\t \002(\010"
      "\022\032\n\013needs_input\030\n \001(\010:\005false\022\034\n\rlast_fra"
      "gment\030\013 \001(\010:\005false\022\027\n\010prefetch\030\014 \001(\010:\005fa"
      "lse\022\024\n\005force\030\r \001(\010:\005false\"\203\001\n\nWorkResult"
      "\022\024\n\014partition_id\030\001 \002(\005\022\022\n\006dep_id\030\002 \003(\005B\002"
      "\020\001\022\020\n\010dep_data\030\003 \003(\014\022*\n\006status\030\004 \002(\0162\032.p"
      "eloton.networking.Status\022\r\n\005error\030\005 \001(\014\""
      "W\n\rQueryEstimate\022\024\n\010stmt_ids\030\001 \003(\005B\002\020\001\022\031"
      "\n\rstmt_counters\030\002 \003(\005B\002\020\001\022\025\n\rtime_estima"
      "te\030\003 \001(\005\"\377\001\n\026TransactionInitRequest\022\033\n\023l"
      "ast_transaction_id\030\001 \001(\003\022\026\n\016transaction_"
      "id\030\002 \002(\003\022\026\n\016base_partition\030\003 \002(\005\022\024\n\014proc"
      "edure_id\030\004 \002(\005\022\026\n\npartitions\030\005 \003(\005B\002\020\001\022\023"
      "\n\013proc_params\030\006 \001(\014\022<\n\022prefetch_fragment"
      "s\030\007 \003(\0132 .peloton.networking.WorkFragmen"
      "t\022\027\n\017prefetch_params\030\010 \003(\014\"\256\001\n\027Transacti"
      "onInitResponse\022\026\n\016transaction_id\030\001 \002(\003\022\026"
      "\n\npartitions\030\002 \003(\005B\002\020\001\022*\n\006status\030\003 \002(\0162\032"
      ".peloton.networking.Status\022\030\n\020reject_par"
      "tition\030\004 \001(\005\022\035\n\025reject_transaction_id\030\005 "
      "\001(\003\"\247\002\n\026TransactionWorkRequest\022\033\n\023last_t"
      "ransaction_id\030\001 \001(\003\022\026\n\016transaction_id\030\002 "
      "\002(\003\022\030\n\020source_partition\030\003 \002(\005\0223\n\tfragmen"
      "ts\030\004 \003(\0132 .peloton.networking.WorkFragme"
      "nt\022\024\n\014procedure_id\030\005 \002(\005\022\016\n\006params\030\006 \003(\014"
      "\022\033\n\017attached_dep_id\030\007 \003(\005B\002\020\001\022\025\n\rattache"
      "d_data\030\010 \003(\014\022\032\n\016done_partition\030\t \003(\005B\002\020\001"
      "\022\023\n\013proc_params\030\n \001(\014\"\216\001\n\027TransactionWor"
      "kResponse\022\026\n\016transaction_id\030\001 \002(\003\022/\n\007res"
      "ults\030\002 \003(\0132\036.peloton.networking.WorkResu"
      "lt\022*\n\006status\030\003 \002(\0162\032.peloton.networking."
      "Status\"\221\002\n\031TransactionPrefetchResult\022\033\n\023"
      "last_transaction_id\030\001 \001(\003\022\026\n\016transaction"
      "_id\030\002 \002(\003\022\030\n\020source_partition\030\003 \002(\005\022.\n\006r"
      "esult\030\004 \002(\0132\036.peloton.networking.WorkRes"
      "ult\022*\n\006status\030\005 \002(\0162\032.peloton.networking"
      ".Status\022\030\n\014stmt_counter\030\006 \003(\005B\002\020\001\022\027\n\013fra"
      "gment_id\030\007 \003(\005B\002\020\001\022\026\n\nparam_hash\030\010 \003(\005B\002"
      "\020\001\"V\n\"TransactionPrefetchAcknowledgement"
      "\022\026\n\016transaction_id\030\001 \002(\003\022\030\n\020target_parti"
      "tion\030\002 \002(\005\"\241\001\n\025TransactionMapRequest\022\033\n\023"
      "last_transaction_id\030\001 \001(\003\022\026\n\016transaction"
      "_id\030\002 \002(\003\022\025\n\rclient_handle\030\003 \002(\003\022\026\n\016base"
      "_partition\030\004 \002(\005\022\024\n\014procedure_id\030\005 \002(\005\022\016"
      "\n\006params\030\006 \002(\014\"t\n\026TransactionMapResponse"
      "\022\026\n\016transaction_id\030\001 \002(\003\022\026\n\npartitions\030\002"
      " \003(\005B\002\020\001\022*\n\006status\030\003 \002(\0162\032.peloton.netwo"
      "rking.Status\"2\n\030TransactionReduceRequest"
      "\022\026\n\016transaction_id\030\001 \002(\003\"\242\002\n\031Transaction"
      "ReduceResponse\022\026\n\016transaction_id\030\001 \002(\003\022K"
      "\n\007results\030\002 \003(\0132:.peloton.networking.Tra"
      "nsactionReduceResponse.ReduceResult\022*\n\006s"
      "tatus\030\003 \002(\0162\032.peloton.networking.Status\032"
      "t\n\014ReduceResult\022\024\n\014partition_id\030\001 \002(\005\022\014\n"
      "\004data\030\002 \002(\014\022*\n\006status\030\003 \002(\0162\032.peloton.ne"
      "tworking.Status\022\024\n\005error\030\004 \001(\010:\005false\"K\n"
      "\031TransactionPrepareRequest\022\026\n\016transactio"
      "n_id\030\001 \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\"x\n\032Tr"
      "ansactionPrepareResponse\022\026\n\016transaction_"
      "id\030\001 \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\022*\n\006stat"
      "us\030\003 \002(\0162\032.peloton.networking.Status\"v\n\030"
      "TransactionFinishRequest\022\026\n\016transaction_"
      "id\030\001 \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\022*\n\006stat"
      "us\030\003 \002(\0162\032.peloton.networking.Status\"K\n\031"
      "TransactionFinishResponse\022\026\n\016transaction"
      "_id\030\001 \002(\003\022\026\n\npartitions\030\002 \003(\005B\002\020\001\"T\n\032Tra"
      "nsactionRedirectRequest\022\023\n\013sender_site\030\001"
      " \002(\005\022\014\n\004work\030\002 \002(\014\022\023\n\013orig_txn_id\030\003 \001(\003\""
      "B\n\033TransactionRedirectResponse\022\023\n\013sender"
      "_site\030\001 \002(\005\022\016\n\006output\030\002 \002(\014\"F\n\027Transacti"
      "onDebugRequest\022\023\n\013sender_site\030\001 \002(\005\022\026\n\016t"
      "ransaction_id\030\002 \002(\003\"j\n\030TransactionDebugR"
      "esponse\022\023\n\013sender_site\030\001 \002(\005\022*\n\006status\030\002"
      " \002(\0162\032.peloton.networking.Status\022\r\n\005debu"
      "g\030\003 \002(\t\"`\n\017SendDataRequest\022\026\n\016transactio"
      "n_id\030\001 \002(\003\022\023\n\013sender_site\030\002 \002(\005\022\022\n\006dep_i"
      "d\030\003 \003(\005B\002\020\001\022\014\n\004data\030\004 \003(\014\"\203\001\n\020SendDataRe"
      "sponse\022\026\n\016transaction_id\030\001 \002(\003\022\026\n\npartit"
      "ions\030\002 \003(\005B\002\020\001\022\023\n\013sender_site\030\003 \002(\005\022*\n\006s"
      "tatus\030\004 \002(\0162\032.peloton.networking.Status\""
      "=\n\021InitializeRequest\022\023\n\013sender_site\030\001 \002("
      "\005\022\023\n\013instance_id\030\002 \002(\003\"U\n\022InitializeResp"
      "onse\022\023\n\013sender_site\030\001 \002(\005\022*\n\006status\030\002 \002("
      "\0162\032.peloton.networking.Status\"<\n\026Shutdow"
      "nPrepareRequest\022\023\n\013sender_site\030\001 \002(\005\022\r\n\005"
      "error\030\002 \001(\014\".\n\027ShutdownPrepareResponse\022\023"
      "\n\013sender_site\030\001 \002(\005\";\n\017ShutdownRequest\022\023"
      "\n\013sender_site\030\001 \002(\005\022\023\n\013exit_status\030\002 \002(\005"
      "\"\'\n\020ShutdownResponse\022\023\n\013sender_site\030\001 \002("
      "\005\"D\n\020HeartbeatRequest\022\023\n\013sender_site\030\001 \002"
      "(\005\022\033\n\023last_transaction_id\030\002 \002(\003\"T\n\021Heart"
      "beatResponse\022\023\n\013sender_site\030\001 \002(\005\022*\n\006sta"
      "tus\030\002 \002(\0162\032.peloton.networking.Status\"\267\001"
      "\n\022UnevictDataRequest\022\023\n\013sender_site\030\001 \002("
      "\005\022\026\n\016transaction_id\030\002 \002(\003\022\024\n\014partition_i"
      "d\030\003 \002(\005\022\020\n\010table_id\030\004 \002(\005\022\025\n\tblock_ids\030\005"
      " \003(\005B\002\020\001\022\031\n\rtuple_offsets\030\006 \003(\005B\002\020\001\022\032\n\022n"
      "ew_transaction_id\030\007 \002(\003\"\204\001\n\023UnevictDataR"
      "esponse\022\023\n\013sender_site\030\001 \002(\005\022*\n\006status\030\002"
      " \002(\0162\032.peloton.networking.Status\022\026\n\016tran"
      "saction_id\030\003 \002(\003\022\024\n\014partition_id\030\004 \002(\005\"4"
      "\n\017TimeSyncRequest\022\023\n\013sender_site\030\001 \002(\005\022\014"
      "\n\004t0_s\030\002 \002(\003\"Q\n\020TimeSyncResponse\022\023\n\013send"
      "er_site\030\001 \002(\005\022\014\n\004t0_s\030\002 \002(\003\022\014\n\004t0_r\030\003 \002("
      "\003\022\014\n\004t1_s\030\004 \002(\003\"^\n\024QueryPlanExecRequest\022"
      "\021\n\tplan_type\030\001 \002(\005\022\021\n\tparam_num\030\002 \001(\005\022\022\n"
      "\nparam_list\030\003 \001(\014\022\014\n\004plan\030\004 \002(\014\"P\n\025Query"
      "PlanExecResponse\022\023\n\013tuple_count\030\001 \002(\005\022\022\n"
      "\ntile_count\030\002 \001(\005\022\016\n\006result\030\003 \003(\014*\320\001\n\006St"
      "atus\022\006\n\002OK\020\000\022\016\n\nABORT_USER\020\001\022\022\n\016ABORT_GR"
      "ACEFUL\020\002\022\024\n\020ABORT_UNEXPECTED\020\003\022\031\n\025ABORT_"
      "CONNECTION_LOST\020\004\022\024\n\020ABORT_MISPREDICT\020\005\022"
      "\021\n\rABORT_RESTART\020\006\022\020\n\014ABORT_REJECT\020\007\022\027\n\023"
      "ABORT_EVICTEDACCESS\020\010\022\025\n\021ABORT_SPECULATI"
      "VE\020\t2\201\016\n\026AbstractPelotonService\022j\n\017Trans"
      "actionInit\022*.peloton.networking.Transact"
      "ionInitRequest\032+.peloton.networking.Tran"
      "sactionInitResponse\022j\n\017TransactionWork\022*"
      ".peloton.networking.TransactionWorkReque"
      "st\032+.peloton.networking.TransactionWorkR"
      "esponse\022|\n\023TransactionPrefetch\022-.peloton"
      ".networking.TransactionPrefetchResult\0326."
      "peloton.networking.TransactionPrefetchAc"
      "knowledgement\022g\n\016TransactionMap\022).peloto"
      "n.networking.TransactionMapRequest\032*.pel"
      "oton.networking.TransactionMapResponse\022p"
      "\n\021TransactionReduce\022,.peloton.networking"
      ".TransactionReduceRequest\032-.peloton.netw"
      "orking.TransactionReduceResponse\022s\n\022Tran"
      "sactionPrepare\022-.peloton.networking.Tran"
      "sactionPrepareRequest\032..peloton.networki"
      "ng.TransactionPrepareResponse\022p\n\021Transac"
      "tionFinish\022,.peloton.networking.Transact"
      "ionFinishRequest\032-.peloton.networking.Tr"
      "ansactionFinishResponse\022v\n\023TransactionRe"
      "direct\022..peloton.networking.TransactionR"
      "edirectRequest\032/.peloton.networking.Tran"
      "sactionRedirectResponse\022m\n\020TransactionDe"
      "bug\022+.peloton.networking.TransactionDebu"
      "gRequest\032,.peloton.networking.Transactio"
      "nDebugResponse\022U\n\010SendData\022#.peloton.net"
      "working.SendDataRequest\032$.peloton.networ"
      "king.SendDataResponse\022[\n\nInitialize\022%.pe"
      "loton.networking.InitializeRequest\032&.pel"
      "oton.networking.InitializeResponse\022j\n\017Sh"
      "utdownPrepare\022*.peloton.networking.Shutd"
      "ownPrepareRequest\032+.peloton.networking.S"
      "hutdownPrepareResponse\022U\n\010Shutdown\022#.pel"
      "oton.networking.ShutdownRequest\032$.peloto"
      "n.networking.ShutdownResponse\022X\n\tHeartbe"
      "at\022$.peloton.networking.HeartbeatRequest"
      "\032%.peloton.networking.HeartbeatResponse\022"
      "^\n\013UnevictData\022&.peloton.networking.Unev"
      "ictDataRequest\032\'.peloton.networking.Unev"
      "ictDataResponse\022U\n\010TimeSync\022#.peloton.ne"
      "tworking.TimeSyncRequest\032$.peloton.netwo"
      "rking.TimeSyncResponse\022`\n\tQueryPlan\022(.pe"
      "loton.networking.QueryPlanExecRequest\032)."
      "peloton.networking.QueryPlanExecResponse"
      "B\003\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6605);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "abstract_service.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_abstract_5fservice_2eproto

const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_enum_descriptors[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkFragment::kPartitionIdFieldNumber;
const int WorkFragment::kFragmentIdFieldNumber;
const int WorkFragment::kInputDepIdFieldNumber;
const int WorkFragment::kOutputDepIdFieldNumber;
const int WorkFragment::kParamIndexFieldNumber;
const int WorkFragment::kStmtCounterFieldNumber;
const int WorkFragment::kStmtIndexFieldNumber;
const int WorkFragment::kStmtIgnoreFieldNumber;
const int WorkFragment::kReadOnlyFieldNumber;
const int WorkFragment::kNeedsInputFieldNumber;
const int WorkFragment::kLastFragmentFieldNumber;
const int WorkFragment::kPrefetchFieldNumber;
const int WorkFragment::kForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkFragment::WorkFragment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.WorkFragment)
}
WorkFragment::WorkFragment(const WorkFragment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fragment_id_(from.fragment_id_),
      input_dep_id_(from.input_dep_id_),
      output_dep_id_(from.output_dep_id_),
      param_index_(from.param_index_),
      stmt_counter_(from.stmt_counter_),
      stmt_index_(from.stmt_index_),
      stmt_ignore_(from.stmt_ignore_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&partition_id_, &from.partition_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&force_) -
    reinterpret_cast<char*>(&partition_id_)) + sizeof(force_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.WorkFragment)
}

void WorkFragment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&partition_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&force_) -
      reinterpret_cast<char*>(&partition_id_)) + sizeof(force_));
}

WorkFragment::~WorkFragment() {
  // @@protoc_insertion_point(destructor:peloton.networking.WorkFragment)
  SharedDtor();
}

void WorkFragment::SharedDtor() {
}

void WorkFragment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkFragment::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkFragment& WorkFragment::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

WorkFragment* WorkFragment::New(::google::protobuf::Arena* arena) const {
  WorkFragment* n = new WorkFragment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkFragment::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.WorkFragment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fragment_id_.Clear();
  input_dep_id_.Clear();
  output_dep_id_.Clear();
  param_index_.Clear();
  stmt_counter_.Clear();
  stmt_index_.Clear();
  stmt_ignore_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&partition_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&force_) -
        reinterpret_cast<char*>(&partition_id_)) + sizeof(force_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WorkFragment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.WorkFragment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partition_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_partition_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 fragment_id = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fragment_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_fragment_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 input_dep_id = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_input_dep_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_input_dep_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 output_dep_id = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_output_dep_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_output_dep_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 param_index = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_param_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stmt_counter = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_counter())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_stmt_counter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stmt_index = 7 [packed = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_index())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_stmt_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool stmt_ignore = 8 [packed = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_stmt_ignore())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 66u, input, this->mutable_stmt_ignore())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool read_only = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_read_only();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &read_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needs_input = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_needs_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needs_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool last_fragment = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_last_fragment();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_fragment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool prefetch = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_prefetch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prefetch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool force = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.WorkFragment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.WorkFragment)
  return false;
#undef DO_
}

void WorkFragment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.WorkFragment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 partition_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition_id(), output);
  }

  // repeated int32 fragment_id = 2 [packed = true];
  if (this->fragment_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fragment_id_cached_byte_size_));
  }
  for (int i = 0, n = this->fragment_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fragment_id(i), output);
  }

  // repeated int32 input_dep_id = 3 [packed = true];
  if (this->input_dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _input_dep_id_cached_byte_size_));
  }
  for (int i = 0, n = this->input_dep_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->input_dep_id(i), output);
  }

  // repeated int32 output_dep_id = 4 [packed = true];
  if (this->output_dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _output_dep_id_cached_byte_size_));
  }
  for (int i = 0, n = this->output_dep_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->output_dep_id(i), output);
  }

  // repeated int32 param_index = 5 [packed = true];
  if (this->param_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_index_cached_byte_size_));
  }
  for (int i = 0, n = this->param_index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->param_index(i), output);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stmt_counter_cached_byte_size_));
  }
  for (int i = 0, n = this->stmt_counter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_counter(i), output);
  }

  // repeated int32 stmt_index = 7 [packed = true];
  if (this->stmt_index_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stmt_index_cached_byte_size_));
  }
  for (int i = 0, n = this->stmt_index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_index(i), output);
  }

  // repeated bool stmt_ignore = 8 [packed = true];
  if (this->stmt_ignore_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stmt_ignore_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteBoolArray(
      this->stmt_ignore().data(), this->stmt_ignore_size(), output);
  }

  // required bool read_only = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->read_only(), output);
  }

  // optional bool needs_input = 10 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->needs_input(), output);
  }

  // optional bool last_fragment = 11 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->last_fragment(), output);
  }

  // optional bool prefetch = 12 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->prefetch(), output);
  }

  // optional bool force = 13 [default = false];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->force(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.WorkFragment)
}

::google::protobuf::uint8* WorkFragment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.WorkFragment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 partition_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition_id(), target);
  }

  // repeated int32 fragment_id = 2 [packed = true];
  if (this->fragment_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _fragment_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fragment_id_, target);
  }

  // repeated int32 input_dep_id = 3 [packed = true];
  if (this->input_dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _input_dep_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->input_dep_id_, target);
  }

  // repeated int32 output_dep_id = 4 [packed = true];
  if (this->output_dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _output_dep_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->output_dep_id_, target);
  }

  // repeated int32 param_index = 5 [packed = true];
  if (this->param_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _param_index_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->param_index_, target);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _stmt_counter_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_counter_, target);
  }

  // repeated int32 stmt_index = 7 [packed = true];
  if (this->stmt_index_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _stmt_index_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_index_, target);
  }

  // repeated bool stmt_ignore = 8 [packed = true];
  if (this->stmt_ignore_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _stmt_ignore_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->stmt_ignore_, target);
  }

  // required bool read_only = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->read_only(), target);
  }

  // optional bool needs_input = 10 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->needs_input(), target);
  }

  // optional bool last_fragment = 11 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->last_fragment(), target);
  }

  // optional bool prefetch = 12 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->prefetch(), target);
  }

  // optional bool force = 13 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->force(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.WorkFragment)
  return target;
}

size_t WorkFragment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.WorkFragment)
  size_t total_size = 0;

  if (has_partition_id()) {
    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());
  }

  if (has_read_only()) {
    // required bool read_only = 9;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t WorkFragment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.WorkFragment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());

    // required bool read_only = 9;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 fragment_id = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->fragment_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fragment_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 input_dep_id = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->input_dep_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _input_dep_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 output_dep_id = 4 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->output_dep_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _output_dep_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 param_index = 5 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->param_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stmt_counter_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_counter_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 stmt_index = 7 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stmt_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_index_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bool stmt_ignore = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->stmt_ignore_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_ignore_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 60u) {
    // optional bool needs_input = 10 [default = false];
    if (has_needs_input()) {
      total_size += 1 + 1;
    }

    // optional bool last_fragment = 11 [default = false];
    if (has_last_fragment()) {
      total_size += 1 + 1;
    }

    // optional bool prefetch = 12 [default = false];
    if (has_prefetch()) {
      total_size += 1 + 1;
    }

    // optional bool force = 13 [default = false];
    if (has_force()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkFragment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.WorkFragment)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkFragment* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkFragment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.WorkFragment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.WorkFragment)
    MergeFrom(*source);
  }
}

void WorkFragment::MergeFrom(const WorkFragment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.WorkFragment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fragment_id_.MergeFrom(from.fragment_id_);
  input_dep_id_.MergeFrom(from.input_dep_id_);
  output_dep_id_.MergeFrom(from.output_dep_id_);
  param_index_.MergeFrom(from.param_index_);
  stmt_counter_.MergeFrom(from.stmt_counter_);
  stmt_index_.MergeFrom(from.stmt_index_);
  stmt_ignore_.MergeFrom(from.stmt_ignore_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      partition_id_ = from.partition_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      read_only_ = from.read_only_;
    }
    if (cached_has_bits & 0x00000004u) {
      needs_input_ = from.needs_input_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_fragment_ = from.last_fragment_;
    }
    if (cached_has_bits & 0x00000010u) {
      prefetch_ = from.prefetch_;
    }
    if (cached_has_bits & 0x00000020u) {
      force_ = from.force_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkFragment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.WorkFragment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkFragment::CopyFrom(const WorkFragment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.WorkFragment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkFragment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void WorkFragment::Swap(WorkFragment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkFragment::InternalSwap(WorkFragment* other) {
  using std::swap;
  fragment_id_.InternalSwap(&other->fragment_id_);
  input_dep_id_.InternalSwap(&other->input_dep_id_);
  output_dep_id_.InternalSwap(&other->output_dep_id_);
  param_index_.InternalSwap(&other->param_index_);
  stmt_counter_.InternalSwap(&other->stmt_counter_);
  stmt_index_.InternalSwap(&other->stmt_index_);
  stmt_ignore_.InternalSwap(&other->stmt_ignore_);
  swap(partition_id_, other->partition_id_);
  swap(read_only_, other->read_only_);
  swap(needs_input_, other->needs_input_);
  swap(last_fragment_, other->last_fragment_);
  swap(prefetch_, other->prefetch_);
  swap(force_, other->force_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkFragment::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkFragment

// required int32 partition_id = 1;
bool WorkFragment::has_partition_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WorkFragment::set_has_partition_id() {
  _has_bits_[0] |= 0x00000001u;
}
void WorkFragment::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void WorkFragment::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
::google::protobuf::int32 WorkFragment::partition_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.partition_id)
  return partition_id_;
}
void WorkFragment::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.partition_id)
}

// repeated int32 fragment_id = 2 [packed = true];
int WorkFragment::fragment_id_size() const {
  return fragment_id_.size();
}
void WorkFragment::clear_fragment_id() {
  fragment_id_.Clear();
}
::google::protobuf::int32 WorkFragment::fragment_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.fragment_id)
  return fragment_id_.Get(index);
}
void WorkFragment::set_fragment_id(int index, ::google::protobuf::int32 value) {
  fragment_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.fragment_id)
}
void WorkFragment::add_fragment_id(::google::protobuf::int32 value) {
  fragment_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.WorkFragment.fragment_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::fragment_id() const {
  // @@protoc_insertion_point(field_list:peloton.networking.WorkFragment.fragment_id)
  return fragment_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_fragment_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.WorkFragment.fragment_id)
  return &fragment_id_;
}

// repeated int32 input_dep_id = 3 [packed = true];
int WorkFragment::input_dep_id_size() const {
  return input_dep_id_.size();
}
void WorkFragment::clear_input_dep_id() {
  input_dep_id_.Clear();
}
::google::protobuf::int32 WorkFragment::input_dep_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.input_dep_id)
  return input_dep_id_.Get(index);
}
void WorkFragment::set_input_dep_id(int index, ::google::protobuf::int32 value) {
  input_dep_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.input_dep_id)
}
void WorkFragment::add_input_dep_id(::google::protobuf::int32 value) {
  input_dep_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.WorkFragment.input_dep_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::input_dep_id() const {
  // @@protoc_insertion_point(field_list:peloton.networking.WorkFragment.input_dep_id)
  return input_dep_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_input_dep_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.WorkFragment.input_dep_id)
  return &input_dep_id_;
}

// repeated int32 output_dep_id = 4 [packed = true];
int WorkFragment::output_dep_id_size() const {
  return output_dep_id_.size();
}
void WorkFragment::clear_output_dep_id() {
  output_dep_id_.Clear();
}
::google::protobuf::int32 WorkFragment::output_dep_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.output_dep_id)
  return output_dep_id_.Get(index);
}
void WorkFragment::set_output_dep_id(int index, ::google::protobuf::int32 value) {
  output_dep_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.output_dep_id)
}
void WorkFragment::add_output_dep_id(::google::protobuf::int32 value) {
  output_dep_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.WorkFragment.output_dep_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::output_dep_id() const {
  // @@protoc_insertion_point(field_list:peloton.networking.WorkFragment.output_dep_id)
  return output_dep_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_output_dep_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.WorkFragment.output_dep_id)
  return &output_dep_id_;
}

// repeated int32 param_index = 5 [packed = true];
int WorkFragment::param_index_size() const {
  return param_index_.size();
}
void WorkFragment::clear_param_index() {
  param_index_.Clear();
}
::google::protobuf::int32 WorkFragment::param_index(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.param_index)
  return param_index_.Get(index);
}
void WorkFragment::set_param_index(int index, ::google::protobuf::int32 value) {
  param_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.param_index)
}
void WorkFragment::add_param_index(::google::protobuf::int32 value) {
  param_index_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.WorkFragment.param_index)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::param_index() const {
  // @@protoc_insertion_point(field_list:peloton.networking.WorkFragment.param_index)
  return param_index_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_param_index() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.WorkFragment.param_index)
  return &param_index_;
}

// repeated int32 stmt_counter = 6 [packed = true];
int WorkFragment::stmt_counter_size() const {
  return stmt_counter_.size();
}
void WorkFragment::clear_stmt_counter() {
  stmt_counter_.Clear();
}
::google::protobuf::int32 WorkFragment::stmt_counter(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.stmt_counter)
  return stmt_counter_.Get(index);
}
void WorkFragment::set_stmt_counter(int index, ::google::protobuf::int32 value) {
  stmt_counter_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.stmt_counter)
}
void WorkFragment::add_stmt_counter(::google::protobuf::int32 value) {
  stmt_counter_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.WorkFragment.stmt_counter)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::stmt_counter() const {
  // @@protoc_insertion_point(field_list:peloton.networking.WorkFragment.stmt_counter)
  return stmt_counter_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_stmt_counter() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.WorkFragment.stmt_counter)
  return &stmt_counter_;
}

// repeated int32 stmt_index = 7 [packed = true];
int WorkFragment::stmt_index_size() const {
  return stmt_index_.size();
}
void WorkFragment::clear_stmt_index() {
  stmt_index_.Clear();
}
::google::protobuf::int32 WorkFragment::stmt_index(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.stmt_index)
  return stmt_index_.Get(index);
}
void WorkFragment::set_stmt_index(int index, ::google::protobuf::int32 value) {
  stmt_index_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.stmt_index)
}
void WorkFragment::add_stmt_index(::google::protobuf::int32 value) {
  stmt_index_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.WorkFragment.stmt_index)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkFragment::stmt_index() const {
  // @@protoc_insertion_point(field_list:peloton.networking.WorkFragment.stmt_index)
  return stmt_index_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkFragment::mutable_stmt_index() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.WorkFragment.stmt_index)
  return &stmt_index_;
}

// repeated bool stmt_ignore = 8 [packed = true];
int WorkFragment::stmt_ignore_size() const {
  return stmt_ignore_.size();
}
void WorkFragment::clear_stmt_ignore() {
  stmt_ignore_.Clear();
}
bool WorkFragment::stmt_ignore(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.stmt_ignore)
  return stmt_ignore_.Get(index);
}
void WorkFragment::set_stmt_ignore(int index, bool value) {
  stmt_ignore_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.stmt_ignore)
}
void WorkFragment::add_stmt_ignore(bool value) {
  stmt_ignore_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.WorkFragment.stmt_ignore)
}
const ::google::protobuf::RepeatedField< bool >&
WorkFragment::stmt_ignore() const {
  // @@protoc_insertion_point(field_list:peloton.networking.WorkFragment.stmt_ignore)
  return stmt_ignore_;
}
::google::protobuf::RepeatedField< bool >*
WorkFragment::mutable_stmt_ignore() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.WorkFragment.stmt_ignore)
  return &stmt_ignore_;
}

// required bool read_only = 9;
bool WorkFragment::has_read_only() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WorkFragment::set_has_read_only() {
  _has_bits_[0] |= 0x00000002u;
}
void WorkFragment::clear_has_read_only() {
  _has_bits_[0] &= ~0x00000002u;
}
void WorkFragment::clear_read_only() {
  read_only_ = false;
  clear_has_read_only();
}
bool WorkFragment::read_only() const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.read_only)
  return read_only_;
}
void WorkFragment::set_read_only(bool value) {
  set_has_read_only();
  read_only_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.read_only)
}

// optional bool needs_input = 10 [default = false];
bool WorkFragment::has_needs_input() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WorkFragment::set_has_needs_input() {
  _has_bits_[0] |= 0x00000004u;
}
void WorkFragment::clear_has_needs_input() {
  _has_bits_[0] &= ~0x00000004u;
}
void WorkFragment::clear_needs_input() {
  needs_input_ = false;
  clear_has_needs_input();
}
bool WorkFragment::needs_input() const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.needs_input)
  return needs_input_;
}
void WorkFragment::set_needs_input(bool value) {
  set_has_needs_input();
  needs_input_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.needs_input)
}

// optional bool last_fragment = 11 [default = false];
bool WorkFragment::has_last_fragment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WorkFragment::set_has_last_fragment() {
  _has_bits_[0] |= 0x00000008u;
}
void WorkFragment::clear_has_last_fragment() {
  _has_bits_[0] &= ~0x00000008u;
}
void WorkFragment::clear_last_fragment() {
  last_fragment_ = false;
  clear_has_last_fragment();
}
bool WorkFragment::last_fragment() const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.last_fragment)
  return last_fragment_;
}
void WorkFragment::set_last_fragment(bool value) {
  set_has_last_fragment();
  last_fragment_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.last_fragment)
}

// optional bool prefetch = 12 [default = false];
bool WorkFragment::has_prefetch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WorkFragment::set_has_prefetch() {
  _has_bits_[0] |= 0x00000010u;
}
void WorkFragment::clear_has_prefetch() {
  _has_bits_[0] &= ~0x00000010u;
}
void WorkFragment::clear_prefetch() {
  prefetch_ = false;
  clear_has_prefetch();
}
bool WorkFragment::prefetch() const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.prefetch)
  return prefetch_;
}
void WorkFragment::set_prefetch(bool value) {
  set_has_prefetch();
  prefetch_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.prefetch)
}

// optional bool force = 13 [default = false];
bool WorkFragment::has_force() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void WorkFragment::set_has_force() {
  _has_bits_[0] |= 0x00000020u;
}
void WorkFragment::clear_has_force() {
  _has_bits_[0] &= ~0x00000020u;
}
void WorkFragment::clear_force() {
  force_ = false;
  clear_has_force();
}
bool WorkFragment::force() const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkFragment.force)
  return force_;
}
void WorkFragment::set_force(bool value) {
  set_has_force();
  force_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.WorkFragment.force)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WorkResult::kPartitionIdFieldNumber;
const int WorkResult::kDepIdFieldNumber;
const int WorkResult::kDepDataFieldNumber;
const int WorkResult::kStatusFieldNumber;
const int WorkResult::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WorkResult::WorkResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.WorkResult)
}
WorkResult::WorkResult(const WorkResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dep_id_(from.dep_id_),
      dep_data_(from.dep_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error()) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  ::memcpy(&partition_id_, &from.partition_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&partition_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.WorkResult)
}

void WorkResult::SharedCtor() {
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&partition_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&partition_id_)) + sizeof(status_));
}

WorkResult::~WorkResult() {
  // @@protoc_insertion_point(destructor:peloton.networking.WorkResult)
  SharedDtor();
}

void WorkResult::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WorkResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkResult::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WorkResult& WorkResult::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

WorkResult* WorkResult::New(::google::protobuf::Arena* arena) const {
  WorkResult* n = new WorkResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WorkResult::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.WorkResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dep_id_.Clear();
  dep_data_.Clear();
  if (has_error()) {
    GOOGLE_DCHECK(!error_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*error_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&partition_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&partition_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool WorkResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.WorkResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partition_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_partition_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dep_id = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dep_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_dep_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes dep_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_dep_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes error = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.WorkResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.WorkResult)
  return false;
#undef DO_
}

void WorkResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.WorkResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 partition_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition_id(), output);
  }

  // repeated int32 dep_id = 2 [packed = true];
  if (this->dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _dep_id_cached_byte_size_));
  }
  for (int i = 0, n = this->dep_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dep_id(i), output);
  }

  // repeated bytes dep_data = 3;
  for (int i = 0, n = this->dep_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->dep_data(i), output);
  }

  // required .peloton.networking.Status status = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional bytes error = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.WorkResult)
}

::google::protobuf::uint8* WorkResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.WorkResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 partition_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition_id(), target);
  }

  // repeated int32 dep_id = 2 [packed = true];
  if (this->dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _dep_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dep_id_, target);
  }

  // repeated bytes dep_data = 3;
  for (int i = 0, n = this->dep_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->dep_data(i), target);
  }

  // required .peloton.networking.Status status = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional bytes error = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.WorkResult)
  return target;
}

size_t WorkResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.WorkResult)
  size_t total_size = 0;

  if (has_partition_id()) {
    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t WorkResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.WorkResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());

    // required .peloton.networking.Status status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 dep_id = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dep_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dep_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes dep_data = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dep_data_size());
  for (int i = 0, n = this->dep_data_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->dep_data(i));
  }

  // optional bytes error = 5;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.WorkResult)
  GOOGLE_DCHECK_NE(&from, this);
  const WorkResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WorkResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.WorkResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.WorkResult)
    MergeFrom(*source);
  }
}

void WorkResult::MergeFrom(const WorkResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.WorkResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dep_id_.MergeFrom(from.dep_id_);
  dep_data_.MergeFrom(from.dep_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000002u) {
      partition_id_ = from.partition_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WorkResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.WorkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkResult::CopyFrom(const WorkResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.WorkResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void WorkResult::Swap(WorkResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WorkResult::InternalSwap(WorkResult* other) {
  using std::swap;
  dep_id_.InternalSwap(&other->dep_id_);
  dep_data_.InternalSwap(&other->dep_data_);
  error_.Swap(&other->error_);
  swap(partition_id_, other->partition_id_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WorkResult::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WorkResult

// required int32 partition_id = 1;
bool WorkResult::has_partition_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WorkResult::set_has_partition_id() {
  _has_bits_[0] |= 0x00000002u;
}
void WorkResult::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void WorkResult::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
::google::protobuf::int32 WorkResult::partition_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkResult.partition_id)
  return partition_id_;
}
void WorkResult::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.WorkResult.partition_id)
}

// repeated int32 dep_id = 2 [packed = true];
int WorkResult::dep_id_size() const {
  return dep_id_.size();
}
void WorkResult::clear_dep_id() {
  dep_id_.Clear();
}
::google::protobuf::int32 WorkResult::dep_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkResult.dep_id)
  return dep_id_.Get(index);
}
void WorkResult::set_dep_id(int index, ::google::protobuf::int32 value) {
  dep_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.WorkResult.dep_id)
}
void WorkResult::add_dep_id(::google::protobuf::int32 value) {
  dep_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.WorkResult.dep_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WorkResult::dep_id() const {
  // @@protoc_insertion_point(field_list:peloton.networking.WorkResult.dep_id)
  return dep_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WorkResult::mutable_dep_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.WorkResult.dep_id)
  return &dep_id_;
}

// repeated bytes dep_data = 3;
int WorkResult::dep_data_size() const {
  return dep_data_.size();
}
void WorkResult::clear_dep_data() {
  dep_data_.Clear();
}
const ::std::string& WorkResult::dep_data(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkResult.dep_data)
  return dep_data_.Get(index);
}
::std::string* WorkResult::mutable_dep_data(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.networking.WorkResult.dep_data)
  return dep_data_.Mutable(index);
}
void WorkResult::set_dep_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.WorkResult.dep_data)
  dep_data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void WorkResult::set_dep_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.WorkResult.dep_data)
  dep_data_.Mutable(index)->assign(std::move(value));
}
#endif
void WorkResult::set_dep_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dep_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peloton.networking.WorkResult.dep_data)
}
void WorkResult::set_dep_data(int index, const void* value, size_t size) {
  dep_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.WorkResult.dep_data)
}
::std::string* WorkResult::add_dep_data() {
  // @@protoc_insertion_point(field_add_mutable:peloton.networking.WorkResult.dep_data)
  return dep_data_.Add();
}
void WorkResult::add_dep_data(const ::std::string& value) {
  dep_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peloton.networking.WorkResult.dep_data)
}
#if LANG_CXX11
void WorkResult::add_dep_data(::std::string&& value) {
  dep_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:peloton.networking.WorkResult.dep_data)
}
#endif
void WorkResult::add_dep_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  dep_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peloton.networking.WorkResult.dep_data)
}
void WorkResult::add_dep_data(const void* value, size_t size) {
  dep_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peloton.networking.WorkResult.dep_data)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
WorkResult::dep_data() const {
  // @@protoc_insertion_point(field_list:peloton.networking.WorkResult.dep_data)
  return dep_data_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
WorkResult::mutable_dep_data() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.WorkResult.dep_data)
  return &dep_data_;
}

// required .peloton.networking.Status status = 4;
bool WorkResult::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WorkResult::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void WorkResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void WorkResult::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status WorkResult::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkResult.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void WorkResult::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.WorkResult.status)
}

// optional bytes error = 5;
bool WorkResult::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WorkResult::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void WorkResult::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void WorkResult::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& WorkResult::error() const {
  // @@protoc_insertion_point(field_get:peloton.networking.WorkResult.error)
  return error_.GetNoArena();
}
void WorkResult::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.WorkResult.error)
}
#if LANG_CXX11
void WorkResult::set_error(::std::string&& value) {
  set_has_error();
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.WorkResult.error)
}
#endif
void WorkResult::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.WorkResult.error)
}
void WorkResult::set_error(const void* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.WorkResult.error)
}
::std::string* WorkResult::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:peloton.networking.WorkResult.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* WorkResult::release_error() {
  // @@protoc_insertion_point(field_release:peloton.networking.WorkResult.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void WorkResult::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.WorkResult.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryEstimate::kStmtIdsFieldNumber;
const int QueryEstimate::kStmtCountersFieldNumber;
const int QueryEstimate::kTimeEstimateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryEstimate::QueryEstimate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.QueryEstimate)
}
QueryEstimate::QueryEstimate(const QueryEstimate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stmt_ids_(from.stmt_ids_),
      stmt_counters_(from.stmt_counters_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_estimate_ = from.time_estimate_;
  // @@protoc_insertion_point(copy_constructor:peloton.networking.QueryEstimate)
}

void QueryEstimate::SharedCtor() {
  _cached_size_ = 0;
  time_estimate_ = 0;
}

QueryEstimate::~QueryEstimate() {
  // @@protoc_insertion_point(destructor:peloton.networking.QueryEstimate)
  SharedDtor();
}

void QueryEstimate::SharedDtor() {
}

void QueryEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryEstimate::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryEstimate& QueryEstimate::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryEstimate* QueryEstimate::New(::google::protobuf::Arena* arena) const {
  QueryEstimate* n = new QueryEstimate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.QueryEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stmt_ids_.Clear();
  stmt_counters_.Clear();
  time_estimate_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.QueryEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 stmt_ids = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_stmt_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stmt_counters = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_counters())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_stmt_counters())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 time_estimate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_time_estimate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_estimate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.QueryEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.QueryEstimate)
  return false;
#undef DO_
}

void QueryEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.QueryEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 stmt_ids = 1 [packed = true];
  if (this->stmt_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stmt_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->stmt_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_ids(i), output);
  }

  // repeated int32 stmt_counters = 2 [packed = true];
  if (this->stmt_counters_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stmt_counters_cached_byte_size_));
  }
  for (int i = 0, n = this->stmt_counters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_counters(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 time_estimate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time_estimate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.QueryEstimate)
}

::google::protobuf::uint8* QueryEstimate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.QueryEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 stmt_ids = 1 [packed = true];
  if (this->stmt_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _stmt_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_ids_, target);
  }

  // repeated int32 stmt_counters = 2 [packed = true];
  if (this->stmt_counters_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _stmt_counters_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_counters_, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 time_estimate = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time_estimate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.QueryEstimate)
  return target;
}

size_t QueryEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.QueryEstimate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated int32 stmt_ids = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stmt_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 stmt_counters = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stmt_counters_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_counters_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional int32 time_estimate = 3;
  if (has_time_estimate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->time_estimate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryEstimate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.QueryEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryEstimate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryEstimate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.QueryEstimate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.QueryEstimate)
    MergeFrom(*source);
  }
}

void QueryEstimate::MergeFrom(const QueryEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.QueryEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stmt_ids_.MergeFrom(from.stmt_ids_);
  stmt_counters_.MergeFrom(from.stmt_counters_);
  if (from.has_time_estimate()) {
    set_time_estimate(from.time_estimate());
  }
}

void QueryEstimate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.QueryEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryEstimate::CopyFrom(const QueryEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.QueryEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryEstimate::IsInitialized() const {
  return true;
}

void QueryEstimate::Swap(QueryEstimate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryEstimate::InternalSwap(QueryEstimate* other) {
  using std::swap;
  stmt_ids_.InternalSwap(&other->stmt_ids_);
  stmt_counters_.InternalSwap(&other->stmt_counters_);
  swap(time_estimate_, other->time_estimate_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryEstimate::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryEstimate

// repeated int32 stmt_ids = 1 [packed = true];
int QueryEstimate::stmt_ids_size() const {
  return stmt_ids_.size();
}
void QueryEstimate::clear_stmt_ids() {
  stmt_ids_.Clear();
}
::google::protobuf::int32 QueryEstimate::stmt_ids(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.QueryEstimate.stmt_ids)
  return stmt_ids_.Get(index);
}
void QueryEstimate::set_stmt_ids(int index, ::google::protobuf::int32 value) {
  stmt_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.QueryEstimate.stmt_ids)
}
void QueryEstimate::add_stmt_ids(::google::protobuf::int32 value) {
  stmt_ids_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.QueryEstimate.stmt_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryEstimate::stmt_ids() const {
  // @@protoc_insertion_point(field_list:peloton.networking.QueryEstimate.stmt_ids)
  return stmt_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryEstimate::mutable_stmt_ids() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.QueryEstimate.stmt_ids)
  return &stmt_ids_;
}

// repeated int32 stmt_counters = 2 [packed = true];
int QueryEstimate::stmt_counters_size() const {
  return stmt_counters_.size();
}
void QueryEstimate::clear_stmt_counters() {
  stmt_counters_.Clear();
}
::google::protobuf::int32 QueryEstimate::stmt_counters(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.QueryEstimate.stmt_counters)
  return stmt_counters_.Get(index);
}
void QueryEstimate::set_stmt_counters(int index, ::google::protobuf::int32 value) {
  stmt_counters_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.QueryEstimate.stmt_counters)
}
void QueryEstimate::add_stmt_counters(::google::protobuf::int32 value) {
  stmt_counters_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.QueryEstimate.stmt_counters)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
QueryEstimate::stmt_counters() const {
  // @@protoc_insertion_point(field_list:peloton.networking.QueryEstimate.stmt_counters)
  return stmt_counters_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
QueryEstimate::mutable_stmt_counters() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.QueryEstimate.stmt_counters)
  return &stmt_counters_;
}

// optional int32 time_estimate = 3;
bool QueryEstimate::has_time_estimate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryEstimate::set_has_time_estimate() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryEstimate::clear_has_time_estimate() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryEstimate::clear_time_estimate() {
  time_estimate_ = 0;
  clear_has_time_estimate();
}
::google::protobuf::int32 QueryEstimate::time_estimate() const {
  // @@protoc_insertion_point(field_get:peloton.networking.QueryEstimate.time_estimate)
  return time_estimate_;
}
void QueryEstimate::set_time_estimate(::google::protobuf::int32 value) {
  set_has_time_estimate();
  time_estimate_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.QueryEstimate.time_estimate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionInitRequest::kLastTransactionIdFieldNumber;
const int TransactionInitRequest::kTransactionIdFieldNumber;
const int TransactionInitRequest::kBasePartitionFieldNumber;
const int TransactionInitRequest::kProcedureIdFieldNumber;
const int TransactionInitRequest::kPartitionsFieldNumber;
const int TransactionInitRequest::kProcParamsFieldNumber;
const int TransactionInitRequest::kPrefetchFragmentsFieldNumber;
const int TransactionInitRequest::kPrefetchParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionInitRequest::TransactionInitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionInitRequest)
}
TransactionInitRequest::TransactionInitRequest(const TransactionInitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      partitions_(from.partitions_),
      prefetch_fragments_(from.prefetch_fragments_),
      prefetch_params_(from.prefetch_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proc_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proc_params()) {
    proc_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_params_);
  }
  ::memcpy(&last_transaction_id_, &from.last_transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&procedure_id_) -
    reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(procedure_id_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionInitRequest)
}

void TransactionInitRequest::SharedCtor() {
  _cached_size_ = 0;
  proc_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&procedure_id_) -
      reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(procedure_id_));
}

TransactionInitRequest::~TransactionInitRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionInitRequest)
  SharedDtor();
}

void TransactionInitRequest::SharedDtor() {
  proc_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionInitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionInitRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionInitRequest& TransactionInitRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionInitRequest* TransactionInitRequest::New(::google::protobuf::Arena* arena) const {
  TransactionInitRequest* n = new TransactionInitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionInitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionInitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_.Clear();
  prefetch_fragments_.Clear();
  prefetch_params_.Clear();
  if (has_proc_params()) {
    GOOGLE_DCHECK(!proc_params_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*proc_params_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&last_transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&procedure_id_) -
        reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(procedure_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionInitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionInitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_last_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 base_partition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_base_partition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_partition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 procedure_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_procedure_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &procedure_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 partitions = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes proc_params = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proc_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .peloton.networking.WorkFragment prefetch_fragments = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prefetch_fragments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes prefetch_params = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_prefetch_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionInitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionInitRequest)
  return false;
#undef DO_
}

void TransactionInitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionInitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 base_partition = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->base_partition(), output);
  }

  // required int32 procedure_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->procedure_id(), output);
  }

  // repeated int32 partitions = 5 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _partitions_cached_byte_size_));
  }
  for (int i = 0, n = this->partitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // optional bytes proc_params = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->proc_params(), output);
  }

  // repeated .peloton.networking.WorkFragment prefetch_fragments = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prefetch_fragments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->prefetch_fragments(static_cast<int>(i)), output);
  }

  // repeated bytes prefetch_params = 8;
  for (int i = 0, n = this->prefetch_params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->prefetch_params(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionInitRequest)
}

::google::protobuf::uint8* TransactionInitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionInitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 base_partition = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->base_partition(), target);
  }

  // required int32 procedure_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->procedure_id(), target);
  }

  // repeated int32 partitions = 5 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _partitions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions_, target);
  }

  // optional bytes proc_params = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->proc_params(), target);
  }

  // repeated .peloton.networking.WorkFragment prefetch_fragments = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prefetch_fragments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->prefetch_fragments(static_cast<int>(i)), deterministic, target);
  }

  // repeated bytes prefetch_params = 8;
  for (int i = 0, n = this->prefetch_params_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->prefetch_params(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionInitRequest)
  return target;
}

size_t TransactionInitRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionInitRequest)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_base_partition()) {
    // required int32 base_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_partition());
  }

  if (has_procedure_id()) {
    // required int32 procedure_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());
  }

  return total_size;
}
size_t TransactionInitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionInitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 base_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_partition());

    // required int32 procedure_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 partitions = 5 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->partitions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .peloton.networking.WorkFragment prefetch_fragments = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->prefetch_fragments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prefetch_fragments(static_cast<int>(i)));
    }
  }

  // repeated bytes prefetch_params = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->prefetch_params_size());
  for (int i = 0, n = this->prefetch_params_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->prefetch_params(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes proc_params = 6;
    if (has_proc_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proc_params());
    }

    // optional int64 last_transaction_id = 1;
    if (has_last_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_transaction_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionInitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionInitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionInitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionInitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionInitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionInitRequest)
    MergeFrom(*source);
  }
}

void TransactionInitRequest::MergeFrom(const TransactionInitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionInitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_.MergeFrom(from.partitions_);
  prefetch_fragments_.MergeFrom(from.prefetch_fragments_);
  prefetch_params_.MergeFrom(from.prefetch_params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_proc_params();
      proc_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_params_);
    }
    if (cached_has_bits & 0x00000002u) {
      last_transaction_id_ = from.last_transaction_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      base_partition_ = from.base_partition_;
    }
    if (cached_has_bits & 0x00000010u) {
      procedure_id_ = from.procedure_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionInitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionInitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInitRequest::CopyFrom(const TransactionInitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionInitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->prefetch_fragments())) return false;
  return true;
}

void TransactionInitRequest::Swap(TransactionInitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionInitRequest::InternalSwap(TransactionInitRequest* other) {
  using std::swap;
  partitions_.InternalSwap(&other->partitions_);
  prefetch_fragments_.InternalSwap(&other->prefetch_fragments_);
  prefetch_params_.InternalSwap(&other->prefetch_params_);
  proc_params_.Swap(&other->proc_params_);
  swap(last_transaction_id_, other->last_transaction_id_);
  swap(transaction_id_, other->transaction_id_);
  swap(base_partition_, other->base_partition_);
  swap(procedure_id_, other->procedure_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionInitRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionInitRequest

// optional int64 last_transaction_id = 1;
bool TransactionInitRequest::has_last_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionInitRequest::set_has_last_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionInitRequest::clear_has_last_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionInitRequest::clear_last_transaction_id() {
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_transaction_id();
}
::google::protobuf::int64 TransactionInitRequest::last_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitRequest.last_transaction_id)
  return last_transaction_id_;
}
void TransactionInitRequest::set_last_transaction_id(::google::protobuf::int64 value) {
  set_has_last_transaction_id();
  last_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitRequest.last_transaction_id)
}

// required int64 transaction_id = 2;
bool TransactionInitRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionInitRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionInitRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionInitRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionInitRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitRequest.transaction_id)
  return transaction_id_;
}
void TransactionInitRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitRequest.transaction_id)
}

// required int32 base_partition = 3;
bool TransactionInitRequest::has_base_partition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionInitRequest::set_has_base_partition() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionInitRequest::clear_has_base_partition() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionInitRequest::clear_base_partition() {
  base_partition_ = 0;
  clear_has_base_partition();
}
::google::protobuf::int32 TransactionInitRequest::base_partition() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitRequest.base_partition)
  return base_partition_;
}
void TransactionInitRequest::set_base_partition(::google::protobuf::int32 value) {
  set_has_base_partition();
  base_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitRequest.base_partition)
}

// required int32 procedure_id = 4;
bool TransactionInitRequest::has_procedure_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionInitRequest::set_has_procedure_id() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionInitRequest::clear_has_procedure_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionInitRequest::clear_procedure_id() {
  procedure_id_ = 0;
  clear_has_procedure_id();
}
::google::protobuf::int32 TransactionInitRequest::procedure_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitRequest.procedure_id)
  return procedure_id_;
}
void TransactionInitRequest::set_procedure_id(::google::protobuf::int32 value) {
  set_has_procedure_id();
  procedure_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitRequest.procedure_id)
}

// repeated int32 partitions = 5 [packed = true];
int TransactionInitRequest::partitions_size() const {
  return partitions_.size();
}
void TransactionInitRequest::clear_partitions() {
  partitions_.Clear();
}
::google::protobuf::int32 TransactionInitRequest::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitRequest.partitions)
  return partitions_.Get(index);
}
void TransactionInitRequest::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitRequest.partitions)
}
void TransactionInitRequest::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionInitRequest.partitions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionInitRequest::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionInitRequest.partitions)
  return partitions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionInitRequest::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionInitRequest.partitions)
  return &partitions_;
}

// optional bytes proc_params = 6;
bool TransactionInitRequest::has_proc_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionInitRequest::set_has_proc_params() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionInitRequest::clear_has_proc_params() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionInitRequest::clear_proc_params() {
  proc_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proc_params();
}
const ::std::string& TransactionInitRequest::proc_params() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitRequest.proc_params)
  return proc_params_.GetNoArena();
}
void TransactionInitRequest::set_proc_params(const ::std::string& value) {
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitRequest.proc_params)
}
#if LANG_CXX11
void TransactionInitRequest::set_proc_params(::std::string&& value) {
  set_has_proc_params();
  proc_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.TransactionInitRequest.proc_params)
}
#endif
void TransactionInitRequest::set_proc_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.TransactionInitRequest.proc_params)
}
void TransactionInitRequest::set_proc_params(const void* value, size_t size) {
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.TransactionInitRequest.proc_params)
}
::std::string* TransactionInitRequest::mutable_proc_params() {
  set_has_proc_params();
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionInitRequest.proc_params)
  return proc_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionInitRequest::release_proc_params() {
  // @@protoc_insertion_point(field_release:peloton.networking.TransactionInitRequest.proc_params)
  clear_has_proc_params();
  return proc_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionInitRequest::set_allocated_proc_params(::std::string* proc_params) {
  if (proc_params != NULL) {
    set_has_proc_params();
  } else {
    clear_has_proc_params();
  }
  proc_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_params);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.TransactionInitRequest.proc_params)
}

// repeated .peloton.networking.WorkFragment prefetch_fragments = 7;
int TransactionInitRequest::prefetch_fragments_size() const {
  return prefetch_fragments_.size();
}
void TransactionInitRequest::clear_prefetch_fragments() {
  prefetch_fragments_.Clear();
}
const ::peloton::networking::WorkFragment& TransactionInitRequest::prefetch_fragments(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitRequest.prefetch_fragments)
  return prefetch_fragments_.Get(index);
}
::peloton::networking::WorkFragment* TransactionInitRequest::mutable_prefetch_fragments(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionInitRequest.prefetch_fragments)
  return prefetch_fragments_.Mutable(index);
}
::peloton::networking::WorkFragment* TransactionInitRequest::add_prefetch_fragments() {
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionInitRequest.prefetch_fragments)
  return prefetch_fragments_.Add();
}
::google::protobuf::RepeatedPtrField< ::peloton::networking::WorkFragment >*
TransactionInitRequest::mutable_prefetch_fragments() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionInitRequest.prefetch_fragments)
  return &prefetch_fragments_;
}
const ::google::protobuf::RepeatedPtrField< ::peloton::networking::WorkFragment >&
TransactionInitRequest::prefetch_fragments() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionInitRequest.prefetch_fragments)
  return prefetch_fragments_;
}

// repeated bytes prefetch_params = 8;
int TransactionInitRequest::prefetch_params_size() const {
  return prefetch_params_.size();
}
void TransactionInitRequest::clear_prefetch_params() {
  prefetch_params_.Clear();
}
const ::std::string& TransactionInitRequest::prefetch_params(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitRequest.prefetch_params)
  return prefetch_params_.Get(index);
}
::std::string* TransactionInitRequest::mutable_prefetch_params(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionInitRequest.prefetch_params)
  return prefetch_params_.Mutable(index);
}
void TransactionInitRequest::set_prefetch_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitRequest.prefetch_params)
  prefetch_params_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TransactionInitRequest::set_prefetch_params(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitRequest.prefetch_params)
  prefetch_params_.Mutable(index)->assign(std::move(value));
}
#endif
void TransactionInitRequest::set_prefetch_params(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  prefetch_params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peloton.networking.TransactionInitRequest.prefetch_params)
}
void TransactionInitRequest::set_prefetch_params(int index, const void* value, size_t size) {
  prefetch_params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.TransactionInitRequest.prefetch_params)
}
::std::string* TransactionInitRequest::add_prefetch_params() {
  // @@protoc_insertion_point(field_add_mutable:peloton.networking.TransactionInitRequest.prefetch_params)
  return prefetch_params_.Add();
}
void TransactionInitRequest::add_prefetch_params(const ::std::string& value) {
  prefetch_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionInitRequest.prefetch_params)
}
#if LANG_CXX11
void TransactionInitRequest::add_prefetch_params(::std::string&& value) {
  prefetch_params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionInitRequest.prefetch_params)
}
#endif
void TransactionInitRequest::add_prefetch_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  prefetch_params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peloton.networking.TransactionInitRequest.prefetch_params)
}
void TransactionInitRequest::add_prefetch_params(const void* value, size_t size) {
  prefetch_params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peloton.networking.TransactionInitRequest.prefetch_params)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransactionInitRequest::prefetch_params() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionInitRequest.prefetch_params)
  return prefetch_params_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TransactionInitRequest::mutable_prefetch_params() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionInitRequest.prefetch_params)
  return &prefetch_params_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionInitResponse::kTransactionIdFieldNumber;
const int TransactionInitResponse::kPartitionsFieldNumber;
const int TransactionInitResponse::kStatusFieldNumber;
const int TransactionInitResponse::kRejectPartitionFieldNumber;
const int TransactionInitResponse::kRejectTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionInitResponse::TransactionInitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionInitResponse)
}
TransactionInitResponse::TransactionInitResponse(const TransactionInitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      partitions_(from.partitions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reject_transaction_id_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(reject_transaction_id_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionInitResponse)
}

void TransactionInitResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reject_transaction_id_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(reject_transaction_id_));
}

TransactionInitResponse::~TransactionInitResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionInitResponse)
  SharedDtor();
}

void TransactionInitResponse::SharedDtor() {
}

void TransactionInitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionInitResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionInitResponse& TransactionInitResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionInitResponse* TransactionInitResponse::New(::google::protobuf::Arena* arena) const {
  TransactionInitResponse* n = new TransactionInitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionInitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reject_transaction_id_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(reject_transaction_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionInitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionInitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reject_partition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reject_partition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reject_partition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 reject_transaction_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_reject_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &reject_transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionInitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionInitResponse)
  return false;
#undef DO_
}

void TransactionInitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _partitions_cached_byte_size_));
  }
  for (int i = 0, n = this->partitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional int32 reject_partition = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reject_partition(), output);
  }

  // optional int64 reject_transaction_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->reject_transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionInitResponse)
}

::google::protobuf::uint8* TransactionInitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _partitions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions_, target);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional int32 reject_partition = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reject_partition(), target);
  }

  // optional int64 reject_transaction_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->reject_transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionInitResponse)
  return target;
}

size_t TransactionInitResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionInitResponse)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t TransactionInitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionInitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->partitions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 12u) {
    // optional int32 reject_partition = 4;
    if (has_reject_partition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reject_partition());
    }

    // optional int64 reject_transaction_id = 5;
    if (has_reject_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->reject_transaction_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionInitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionInitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionInitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionInitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionInitResponse)
    MergeFrom(*source);
  }
}

void TransactionInitResponse::MergeFrom(const TransactionInitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_.MergeFrom(from.partitions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      reject_partition_ = from.reject_partition_;
    }
    if (cached_has_bits & 0x00000008u) {
      reject_transaction_id_ = from.reject_transaction_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionInitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInitResponse::CopyFrom(const TransactionInitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInitResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TransactionInitResponse::Swap(TransactionInitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionInitResponse::InternalSwap(TransactionInitResponse* other) {
  using std::swap;
  partitions_.InternalSwap(&other->partitions_);
  swap(transaction_id_, other->transaction_id_);
  swap(status_, other->status_);
  swap(reject_partition_, other->reject_partition_);
  swap(reject_transaction_id_, other->reject_transaction_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionInitResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionInitResponse

// required int64 transaction_id = 1;
bool TransactionInitResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionInitResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionInitResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionInitResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionInitResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitResponse.transaction_id)
  return transaction_id_;
}
void TransactionInitResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitResponse.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionInitResponse::partitions_size() const {
  return partitions_.size();
}
void TransactionInitResponse::clear_partitions() {
  partitions_.Clear();
}
::google::protobuf::int32 TransactionInitResponse::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitResponse.partitions)
  return partitions_.Get(index);
}
void TransactionInitResponse::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitResponse.partitions)
}
void TransactionInitResponse::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionInitResponse.partitions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionInitResponse::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionInitResponse.partitions)
  return partitions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionInitResponse::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionInitResponse.partitions)
  return &partitions_;
}

// required .peloton.networking.Status status = 3;
bool TransactionInitResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionInitResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionInitResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionInitResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status TransactionInitResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitResponse.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void TransactionInitResponse::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitResponse.status)
}

// optional int32 reject_partition = 4;
bool TransactionInitResponse::has_reject_partition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionInitResponse::set_has_reject_partition() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionInitResponse::clear_has_reject_partition() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionInitResponse::clear_reject_partition() {
  reject_partition_ = 0;
  clear_has_reject_partition();
}
::google::protobuf::int32 TransactionInitResponse::reject_partition() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitResponse.reject_partition)
  return reject_partition_;
}
void TransactionInitResponse::set_reject_partition(::google::protobuf::int32 value) {
  set_has_reject_partition();
  reject_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitResponse.reject_partition)
}

// optional int64 reject_transaction_id = 5;
bool TransactionInitResponse::has_reject_transaction_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionInitResponse::set_has_reject_transaction_id() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionInitResponse::clear_has_reject_transaction_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionInitResponse::clear_reject_transaction_id() {
  reject_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_reject_transaction_id();
}
::google::protobuf::int64 TransactionInitResponse::reject_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionInitResponse.reject_transaction_id)
  return reject_transaction_id_;
}
void TransactionInitResponse::set_reject_transaction_id(::google::protobuf::int64 value) {
  set_has_reject_transaction_id();
  reject_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionInitResponse.reject_transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionWorkRequest::kLastTransactionIdFieldNumber;
const int TransactionWorkRequest::kTransactionIdFieldNumber;
const int TransactionWorkRequest::kSourcePartitionFieldNumber;
const int TransactionWorkRequest::kFragmentsFieldNumber;
const int TransactionWorkRequest::kProcedureIdFieldNumber;
const int TransactionWorkRequest::kParamsFieldNumber;
const int TransactionWorkRequest::kAttachedDepIdFieldNumber;
const int TransactionWorkRequest::kAttachedDataFieldNumber;
const int TransactionWorkRequest::kDonePartitionFieldNumber;
const int TransactionWorkRequest::kProcParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionWorkRequest::TransactionWorkRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionWorkRequest)
}
TransactionWorkRequest::TransactionWorkRequest(const TransactionWorkRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      fragments_(from.fragments_),
      params_(from.params_),
      attached_dep_id_(from.attached_dep_id_),
      attached_data_(from.attached_data_),
      done_partition_(from.done_partition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proc_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_proc_params()) {
    proc_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_params_);
  }
  ::memcpy(&last_transaction_id_, &from.last_transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&procedure_id_) -
    reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(procedure_id_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionWorkRequest)
}

void TransactionWorkRequest::SharedCtor() {
  _cached_size_ = 0;
  proc_params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&procedure_id_) -
      reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(procedure_id_));
}

TransactionWorkRequest::~TransactionWorkRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionWorkRequest)
  SharedDtor();
}

void TransactionWorkRequest::SharedDtor() {
  proc_params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionWorkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionWorkRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionWorkRequest& TransactionWorkRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionWorkRequest* TransactionWorkRequest::New(::google::protobuf::Arena* arena) const {
  TransactionWorkRequest* n = new TransactionWorkRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionWorkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionWorkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fragments_.Clear();
  params_.Clear();
  attached_dep_id_.Clear();
  attached_data_.Clear();
  done_partition_.Clear();
  if (has_proc_params()) {
    GOOGLE_DCHECK(!proc_params_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*proc_params_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&last_transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&procedure_id_) -
        reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(procedure_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionWorkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionWorkRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_last_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 source_partition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_source_partition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_partition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .peloton.networking.WorkFragment fragments = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 procedure_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_procedure_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &procedure_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes params = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 attached_dep_id = 7 [packed = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_attached_dep_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_attached_dep_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes attached_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_attached_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 done_partition = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_done_partition())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 74u, input, this->mutable_done_partition())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes proc_params = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proc_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionWorkRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionWorkRequest)
  return false;
#undef DO_
}

void TransactionWorkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionWorkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 source_partition = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source_partition(), output);
  }

  // repeated .peloton.networking.WorkFragment fragments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fragments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fragments(static_cast<int>(i)), output);
  }

  // required int32 procedure_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->procedure_id(), output);
  }

  // repeated bytes params = 6;
  for (int i = 0, n = this->params_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->params(i), output);
  }

  // repeated int32 attached_dep_id = 7 [packed = true];
  if (this->attached_dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _attached_dep_id_cached_byte_size_));
  }
  for (int i = 0, n = this->attached_dep_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->attached_dep_id(i), output);
  }

  // repeated bytes attached_data = 8;
  for (int i = 0, n = this->attached_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->attached_data(i), output);
  }

  // repeated int32 done_partition = 9 [packed = true];
  if (this->done_partition_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _done_partition_cached_byte_size_));
  }
  for (int i = 0, n = this->done_partition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->done_partition(i), output);
  }

  // optional bytes proc_params = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->proc_params(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionWorkRequest)
}

::google::protobuf::uint8* TransactionWorkRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionWorkRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 source_partition = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->source_partition(), target);
  }

  // repeated .peloton.networking.WorkFragment fragments = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fragments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->fragments(static_cast<int>(i)), deterministic, target);
  }

  // required int32 procedure_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->procedure_id(), target);
  }

  // repeated bytes params = 6;
  for (int i = 0, n = this->params_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->params(i), target);
  }

  // repeated int32 attached_dep_id = 7 [packed = true];
  if (this->attached_dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _attached_dep_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->attached_dep_id_, target);
  }

  // repeated bytes attached_data = 8;
  for (int i = 0, n = this->attached_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(8, this->attached_data(i), target);
  }

  // repeated int32 done_partition = 9 [packed = true];
  if (this->done_partition_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _done_partition_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->done_partition_, target);
  }

  // optional bytes proc_params = 10;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->proc_params(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionWorkRequest)
  return target;
}

size_t TransactionWorkRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionWorkRequest)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_source_partition()) {
    // required int32 source_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_partition());
  }

  if (has_procedure_id()) {
    // required int32 procedure_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());
  }

  return total_size;
}
size_t TransactionWorkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionWorkRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001c) ^ 0x0000001c) == 0) {  // All required fields are present.
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 source_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_partition());

    // required int32 procedure_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .peloton.networking.WorkFragment fragments = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->fragments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fragments(static_cast<int>(i)));
    }
  }

  // repeated bytes params = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->params_size());
  for (int i = 0, n = this->params_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->params(i));
  }

  // repeated int32 attached_dep_id = 7 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->attached_dep_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _attached_dep_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes attached_data = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attached_data_size());
  for (int i = 0, n = this->attached_data_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->attached_data(i));
  }

  // repeated int32 done_partition = 9 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->done_partition_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _done_partition_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes proc_params = 10;
    if (has_proc_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->proc_params());
    }

    // optional int64 last_transaction_id = 1;
    if (has_last_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_transaction_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionWorkRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionWorkRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionWorkRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionWorkRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionWorkRequest)
    MergeFrom(*source);
  }
}

void TransactionWorkRequest::MergeFrom(const TransactionWorkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionWorkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fragments_.MergeFrom(from.fragments_);
  params_.MergeFrom(from.params_);
  attached_dep_id_.MergeFrom(from.attached_dep_id_);
  attached_data_.MergeFrom(from.attached_data_);
  done_partition_.MergeFrom(from.done_partition_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_proc_params();
      proc_params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.proc_params_);
    }
    if (cached_has_bits & 0x00000002u) {
      last_transaction_id_ = from.last_transaction_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_partition_ = from.source_partition_;
    }
    if (cached_has_bits & 0x00000010u) {
      procedure_id_ = from.procedure_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionWorkRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionWorkRequest::CopyFrom(const TransactionWorkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionWorkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionWorkRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001c) != 0x0000001c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->fragments())) return false;
  return true;
}

void TransactionWorkRequest::Swap(TransactionWorkRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionWorkRequest::InternalSwap(TransactionWorkRequest* other) {
  using std::swap;
  fragments_.InternalSwap(&other->fragments_);
  params_.InternalSwap(&other->params_);
  attached_dep_id_.InternalSwap(&other->attached_dep_id_);
  attached_data_.InternalSwap(&other->attached_data_);
  done_partition_.InternalSwap(&other->done_partition_);
  proc_params_.Swap(&other->proc_params_);
  swap(last_transaction_id_, other->last_transaction_id_);
  swap(transaction_id_, other->transaction_id_);
  swap(source_partition_, other->source_partition_);
  swap(procedure_id_, other->procedure_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionWorkRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionWorkRequest

// optional int64 last_transaction_id = 1;
bool TransactionWorkRequest::has_last_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionWorkRequest::set_has_last_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionWorkRequest::clear_has_last_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionWorkRequest::clear_last_transaction_id() {
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_transaction_id();
}
::google::protobuf::int64 TransactionWorkRequest::last_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkRequest.last_transaction_id)
  return last_transaction_id_;
}
void TransactionWorkRequest::set_last_transaction_id(::google::protobuf::int64 value) {
  set_has_last_transaction_id();
  last_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkRequest.last_transaction_id)
}

// required int64 transaction_id = 2;
bool TransactionWorkRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionWorkRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionWorkRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionWorkRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionWorkRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkRequest.transaction_id)
  return transaction_id_;
}
void TransactionWorkRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkRequest.transaction_id)
}

// required int32 source_partition = 3;
bool TransactionWorkRequest::has_source_partition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionWorkRequest::set_has_source_partition() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionWorkRequest::clear_has_source_partition() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionWorkRequest::clear_source_partition() {
  source_partition_ = 0;
  clear_has_source_partition();
}
::google::protobuf::int32 TransactionWorkRequest::source_partition() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkRequest.source_partition)
  return source_partition_;
}
void TransactionWorkRequest::set_source_partition(::google::protobuf::int32 value) {
  set_has_source_partition();
  source_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkRequest.source_partition)
}

// repeated .peloton.networking.WorkFragment fragments = 4;
int TransactionWorkRequest::fragments_size() const {
  return fragments_.size();
}
void TransactionWorkRequest::clear_fragments() {
  fragments_.Clear();
}
const ::peloton::networking::WorkFragment& TransactionWorkRequest::fragments(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkRequest.fragments)
  return fragments_.Get(index);
}
::peloton::networking::WorkFragment* TransactionWorkRequest::mutable_fragments(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionWorkRequest.fragments)
  return fragments_.Mutable(index);
}
::peloton::networking::WorkFragment* TransactionWorkRequest::add_fragments() {
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionWorkRequest.fragments)
  return fragments_.Add();
}
::google::protobuf::RepeatedPtrField< ::peloton::networking::WorkFragment >*
TransactionWorkRequest::mutable_fragments() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionWorkRequest.fragments)
  return &fragments_;
}
const ::google::protobuf::RepeatedPtrField< ::peloton::networking::WorkFragment >&
TransactionWorkRequest::fragments() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionWorkRequest.fragments)
  return fragments_;
}

// required int32 procedure_id = 5;
bool TransactionWorkRequest::has_procedure_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionWorkRequest::set_has_procedure_id() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionWorkRequest::clear_has_procedure_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionWorkRequest::clear_procedure_id() {
  procedure_id_ = 0;
  clear_has_procedure_id();
}
::google::protobuf::int32 TransactionWorkRequest::procedure_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkRequest.procedure_id)
  return procedure_id_;
}
void TransactionWorkRequest::set_procedure_id(::google::protobuf::int32 value) {
  set_has_procedure_id();
  procedure_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkRequest.procedure_id)
}

// repeated bytes params = 6;
int TransactionWorkRequest::params_size() const {
  return params_.size();
}
void TransactionWorkRequest::clear_params() {
  params_.Clear();
}
const ::std::string& TransactionWorkRequest::params(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkRequest.params)
  return params_.Get(index);
}
::std::string* TransactionWorkRequest::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionWorkRequest.params)
  return params_.Mutable(index);
}
void TransactionWorkRequest::set_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkRequest.params)
  params_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TransactionWorkRequest::set_params(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkRequest.params)
  params_.Mutable(index)->assign(std::move(value));
}
#endif
void TransactionWorkRequest::set_params(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peloton.networking.TransactionWorkRequest.params)
}
void TransactionWorkRequest::set_params(int index, const void* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.TransactionWorkRequest.params)
}
::std::string* TransactionWorkRequest::add_params() {
  // @@protoc_insertion_point(field_add_mutable:peloton.networking.TransactionWorkRequest.params)
  return params_.Add();
}
void TransactionWorkRequest::add_params(const ::std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionWorkRequest.params)
}
#if LANG_CXX11
void TransactionWorkRequest::add_params(::std::string&& value) {
  params_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionWorkRequest.params)
}
#endif
void TransactionWorkRequest::add_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peloton.networking.TransactionWorkRequest.params)
}
void TransactionWorkRequest::add_params(const void* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peloton.networking.TransactionWorkRequest.params)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransactionWorkRequest::params() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionWorkRequest.params)
  return params_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TransactionWorkRequest::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionWorkRequest.params)
  return &params_;
}

// repeated int32 attached_dep_id = 7 [packed = true];
int TransactionWorkRequest::attached_dep_id_size() const {
  return attached_dep_id_.size();
}
void TransactionWorkRequest::clear_attached_dep_id() {
  attached_dep_id_.Clear();
}
::google::protobuf::int32 TransactionWorkRequest::attached_dep_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkRequest.attached_dep_id)
  return attached_dep_id_.Get(index);
}
void TransactionWorkRequest::set_attached_dep_id(int index, ::google::protobuf::int32 value) {
  attached_dep_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkRequest.attached_dep_id)
}
void TransactionWorkRequest::add_attached_dep_id(::google::protobuf::int32 value) {
  attached_dep_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionWorkRequest.attached_dep_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionWorkRequest::attached_dep_id() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionWorkRequest.attached_dep_id)
  return attached_dep_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionWorkRequest::mutable_attached_dep_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionWorkRequest.attached_dep_id)
  return &attached_dep_id_;
}

// repeated bytes attached_data = 8;
int TransactionWorkRequest::attached_data_size() const {
  return attached_data_.size();
}
void TransactionWorkRequest::clear_attached_data() {
  attached_data_.Clear();
}
const ::std::string& TransactionWorkRequest::attached_data(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkRequest.attached_data)
  return attached_data_.Get(index);
}
::std::string* TransactionWorkRequest::mutable_attached_data(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionWorkRequest.attached_data)
  return attached_data_.Mutable(index);
}
void TransactionWorkRequest::set_attached_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkRequest.attached_data)
  attached_data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void TransactionWorkRequest::set_attached_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkRequest.attached_data)
  attached_data_.Mutable(index)->assign(std::move(value));
}
#endif
void TransactionWorkRequest::set_attached_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  attached_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peloton.networking.TransactionWorkRequest.attached_data)
}
void TransactionWorkRequest::set_attached_data(int index, const void* value, size_t size) {
  attached_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.TransactionWorkRequest.attached_data)
}
::std::string* TransactionWorkRequest::add_attached_data() {
  // @@protoc_insertion_point(field_add_mutable:peloton.networking.TransactionWorkRequest.attached_data)
  return attached_data_.Add();
}
void TransactionWorkRequest::add_attached_data(const ::std::string& value) {
  attached_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionWorkRequest.attached_data)
}
#if LANG_CXX11
void TransactionWorkRequest::add_attached_data(::std::string&& value) {
  attached_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionWorkRequest.attached_data)
}
#endif
void TransactionWorkRequest::add_attached_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  attached_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peloton.networking.TransactionWorkRequest.attached_data)
}
void TransactionWorkRequest::add_attached_data(const void* value, size_t size) {
  attached_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peloton.networking.TransactionWorkRequest.attached_data)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TransactionWorkRequest::attached_data() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionWorkRequest.attached_data)
  return attached_data_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TransactionWorkRequest::mutable_attached_data() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionWorkRequest.attached_data)
  return &attached_data_;
}

// repeated int32 done_partition = 9 [packed = true];
int TransactionWorkRequest::done_partition_size() const {
  return done_partition_.size();
}
void TransactionWorkRequest::clear_done_partition() {
  done_partition_.Clear();
}
::google::protobuf::int32 TransactionWorkRequest::done_partition(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkRequest.done_partition)
  return done_partition_.Get(index);
}
void TransactionWorkRequest::set_done_partition(int index, ::google::protobuf::int32 value) {
  done_partition_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkRequest.done_partition)
}
void TransactionWorkRequest::add_done_partition(::google::protobuf::int32 value) {
  done_partition_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionWorkRequest.done_partition)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionWorkRequest::done_partition() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionWorkRequest.done_partition)
  return done_partition_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionWorkRequest::mutable_done_partition() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionWorkRequest.done_partition)
  return &done_partition_;
}

// optional bytes proc_params = 10;
bool TransactionWorkRequest::has_proc_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionWorkRequest::set_has_proc_params() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionWorkRequest::clear_has_proc_params() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionWorkRequest::clear_proc_params() {
  proc_params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_proc_params();
}
const ::std::string& TransactionWorkRequest::proc_params() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkRequest.proc_params)
  return proc_params_.GetNoArena();
}
void TransactionWorkRequest::set_proc_params(const ::std::string& value) {
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkRequest.proc_params)
}
#if LANG_CXX11
void TransactionWorkRequest::set_proc_params(::std::string&& value) {
  set_has_proc_params();
  proc_params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.TransactionWorkRequest.proc_params)
}
#endif
void TransactionWorkRequest::set_proc_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.TransactionWorkRequest.proc_params)
}
void TransactionWorkRequest::set_proc_params(const void* value, size_t size) {
  set_has_proc_params();
  proc_params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.TransactionWorkRequest.proc_params)
}
::std::string* TransactionWorkRequest::mutable_proc_params() {
  set_has_proc_params();
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionWorkRequest.proc_params)
  return proc_params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionWorkRequest::release_proc_params() {
  // @@protoc_insertion_point(field_release:peloton.networking.TransactionWorkRequest.proc_params)
  clear_has_proc_params();
  return proc_params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionWorkRequest::set_allocated_proc_params(::std::string* proc_params) {
  if (proc_params != NULL) {
    set_has_proc_params();
  } else {
    clear_has_proc_params();
  }
  proc_params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), proc_params);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.TransactionWorkRequest.proc_params)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionWorkResponse::kTransactionIdFieldNumber;
const int TransactionWorkResponse::kResultsFieldNumber;
const int TransactionWorkResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionWorkResponse::TransactionWorkResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionWorkResponse)
}
TransactionWorkResponse::TransactionWorkResponse(const TransactionWorkResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionWorkResponse)
}

void TransactionWorkResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
}

TransactionWorkResponse::~TransactionWorkResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionWorkResponse)
  SharedDtor();
}

void TransactionWorkResponse::SharedDtor() {
}

void TransactionWorkResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionWorkResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionWorkResponse& TransactionWorkResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionWorkResponse* TransactionWorkResponse::New(::google::protobuf::Arena* arena) const {
  TransactionWorkResponse* n = new TransactionWorkResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionWorkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionWorkResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionWorkResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionWorkResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .peloton.networking.WorkResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionWorkResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionWorkResponse)
  return false;
#undef DO_
}

void TransactionWorkResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionWorkResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated .peloton.networking.WorkResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(static_cast<int>(i)), output);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionWorkResponse)
}

::google::protobuf::uint8* TransactionWorkResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionWorkResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated .peloton.networking.WorkResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->results(static_cast<int>(i)), deterministic, target);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionWorkResponse)
  return target;
}

size_t TransactionWorkResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionWorkResponse)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t TransactionWorkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionWorkResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .peloton.networking.WorkResult results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionWorkResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionWorkResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionWorkResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionWorkResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionWorkResponse)
    MergeFrom(*source);
  }
}

void TransactionWorkResponse::MergeFrom(const TransactionWorkResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionWorkResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionWorkResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionWorkResponse::CopyFrom(const TransactionWorkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionWorkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionWorkResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void TransactionWorkResponse::Swap(TransactionWorkResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionWorkResponse::InternalSwap(TransactionWorkResponse* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  swap(transaction_id_, other->transaction_id_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionWorkResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionWorkResponse

// required int64 transaction_id = 1;
bool TransactionWorkResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionWorkResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionWorkResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionWorkResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionWorkResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkResponse.transaction_id)
  return transaction_id_;
}
void TransactionWorkResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkResponse.transaction_id)
}

// repeated .peloton.networking.WorkResult results = 2;
int TransactionWorkResponse::results_size() const {
  return results_.size();
}
void TransactionWorkResponse::clear_results() {
  results_.Clear();
}
const ::peloton::networking::WorkResult& TransactionWorkResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkResponse.results)
  return results_.Get(index);
}
::peloton::networking::WorkResult* TransactionWorkResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionWorkResponse.results)
  return results_.Mutable(index);
}
::peloton::networking::WorkResult* TransactionWorkResponse::add_results() {
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionWorkResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::peloton::networking::WorkResult >*
TransactionWorkResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionWorkResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::peloton::networking::WorkResult >&
TransactionWorkResponse::results() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionWorkResponse.results)
  return results_;
}

// required .peloton.networking.Status status = 3;
bool TransactionWorkResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionWorkResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionWorkResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionWorkResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status TransactionWorkResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionWorkResponse.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void TransactionWorkResponse::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionWorkResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionPrefetchResult::kLastTransactionIdFieldNumber;
const int TransactionPrefetchResult::kTransactionIdFieldNumber;
const int TransactionPrefetchResult::kSourcePartitionFieldNumber;
const int TransactionPrefetchResult::kResultFieldNumber;
const int TransactionPrefetchResult::kStatusFieldNumber;
const int TransactionPrefetchResult::kStmtCounterFieldNumber;
const int TransactionPrefetchResult::kFragmentIdFieldNumber;
const int TransactionPrefetchResult::kParamHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionPrefetchResult::TransactionPrefetchResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionPrefetchResult)
}
TransactionPrefetchResult::TransactionPrefetchResult(const TransactionPrefetchResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stmt_counter_(from.stmt_counter_),
      fragment_id_(from.fragment_id_),
      param_hash_(from.param_hash_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::peloton::networking::WorkResult(*from.result_);
  } else {
    result_ = NULL;
  }
  ::memcpy(&last_transaction_id_, &from.last_transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionPrefetchResult)
}

void TransactionPrefetchResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&result_)) + sizeof(status_));
}

TransactionPrefetchResult::~TransactionPrefetchResult() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionPrefetchResult)
  SharedDtor();
}

void TransactionPrefetchResult::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void TransactionPrefetchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrefetchResult::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionPrefetchResult& TransactionPrefetchResult::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionPrefetchResult* TransactionPrefetchResult::New(::google::protobuf::Arena* arena) const {
  TransactionPrefetchResult* n = new TransactionPrefetchResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionPrefetchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionPrefetchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stmt_counter_.Clear();
  fragment_id_.Clear();
  param_hash_.Clear();
  if (has_result()) {
    GOOGLE_DCHECK(result_ != NULL);
    result_->::peloton::networking::WorkResult::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&last_transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionPrefetchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionPrefetchResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_last_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 source_partition = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_source_partition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_partition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.WorkResult result = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 stmt_counter = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stmt_counter())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_stmt_counter())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 fragment_id = 7 [packed = true];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fragment_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 58u, input, this->mutable_fragment_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 param_hash = 8 [packed = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param_hash())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 66u, input, this->mutable_param_hash())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionPrefetchResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionPrefetchResult)
  return false;
#undef DO_
}

void TransactionPrefetchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionPrefetchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 source_partition = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->source_partition(), output);
  }

  // required .peloton.networking.WorkResult result = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->result_, output);
  }

  // required .peloton.networking.Status status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->status(), output);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _stmt_counter_cached_byte_size_));
  }
  for (int i = 0, n = this->stmt_counter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->stmt_counter(i), output);
  }

  // repeated int32 fragment_id = 7 [packed = true];
  if (this->fragment_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fragment_id_cached_byte_size_));
  }
  for (int i = 0, n = this->fragment_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fragment_id(i), output);
  }

  // repeated int32 param_hash = 8 [packed = true];
  if (this->param_hash_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _param_hash_cached_byte_size_));
  }
  for (int i = 0, n = this->param_hash_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->param_hash(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionPrefetchResult)
}

::google::protobuf::uint8* TransactionPrefetchResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionPrefetchResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 source_partition = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->source_partition(), target);
  }

  // required .peloton.networking.WorkResult result = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->result_, deterministic, target);
  }

  // required .peloton.networking.Status status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->status(), target);
  }

  // repeated int32 stmt_counter = 6 [packed = true];
  if (this->stmt_counter_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _stmt_counter_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->stmt_counter_, target);
  }

  // repeated int32 fragment_id = 7 [packed = true];
  if (this->fragment_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _fragment_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fragment_id_, target);
  }

  // repeated int32 param_hash = 8 [packed = true];
  if (this->param_hash_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _param_hash_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->param_hash_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionPrefetchResult)
  return target;
}

size_t TransactionPrefetchResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionPrefetchResult)
  size_t total_size = 0;

  if (has_result()) {
    // required .peloton.networking.WorkResult result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);
  }

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_source_partition()) {
    // required int32 source_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_partition());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t TransactionPrefetchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionPrefetchResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required .peloton.networking.WorkResult result = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->result_);

    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 source_partition = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->source_partition());

    // required .peloton.networking.Status status = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 stmt_counter = 6 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->stmt_counter_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _stmt_counter_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 fragment_id = 7 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->fragment_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fragment_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 param_hash = 8 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->param_hash_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _param_hash_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_transaction_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrefetchResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionPrefetchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionPrefetchResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionPrefetchResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionPrefetchResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionPrefetchResult)
    MergeFrom(*source);
  }
}

void TransactionPrefetchResult::MergeFrom(const TransactionPrefetchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionPrefetchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stmt_counter_.MergeFrom(from.stmt_counter_);
  fragment_id_.MergeFrom(from.fragment_id_);
  param_hash_.MergeFrom(from.param_hash_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_result()->::peloton::networking::WorkResult::MergeFrom(from.result());
    }
    if (cached_has_bits & 0x00000002u) {
      last_transaction_id_ = from.last_transaction_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_partition_ = from.source_partition_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionPrefetchResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionPrefetchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrefetchResult::CopyFrom(const TransactionPrefetchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionPrefetchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrefetchResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;
  if (has_result()) {
    if (!this->result_->IsInitialized()) return false;
  }
  return true;
}

void TransactionPrefetchResult::Swap(TransactionPrefetchResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionPrefetchResult::InternalSwap(TransactionPrefetchResult* other) {
  using std::swap;
  stmt_counter_.InternalSwap(&other->stmt_counter_);
  fragment_id_.InternalSwap(&other->fragment_id_);
  param_hash_.InternalSwap(&other->param_hash_);
  swap(result_, other->result_);
  swap(last_transaction_id_, other->last_transaction_id_);
  swap(transaction_id_, other->transaction_id_);
  swap(source_partition_, other->source_partition_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionPrefetchResult::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionPrefetchResult

// optional int64 last_transaction_id = 1;
bool TransactionPrefetchResult::has_last_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionPrefetchResult::set_has_last_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionPrefetchResult::clear_has_last_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionPrefetchResult::clear_last_transaction_id() {
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_transaction_id();
}
::google::protobuf::int64 TransactionPrefetchResult::last_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrefetchResult.last_transaction_id)
  return last_transaction_id_;
}
void TransactionPrefetchResult::set_last_transaction_id(::google::protobuf::int64 value) {
  set_has_last_transaction_id();
  last_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrefetchResult.last_transaction_id)
}

// required int64 transaction_id = 2;
bool TransactionPrefetchResult::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionPrefetchResult::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionPrefetchResult::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionPrefetchResult::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionPrefetchResult::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrefetchResult.transaction_id)
  return transaction_id_;
}
void TransactionPrefetchResult::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrefetchResult.transaction_id)
}

// required int32 source_partition = 3;
bool TransactionPrefetchResult::has_source_partition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionPrefetchResult::set_has_source_partition() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionPrefetchResult::clear_has_source_partition() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionPrefetchResult::clear_source_partition() {
  source_partition_ = 0;
  clear_has_source_partition();
}
::google::protobuf::int32 TransactionPrefetchResult::source_partition() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrefetchResult.source_partition)
  return source_partition_;
}
void TransactionPrefetchResult::set_source_partition(::google::protobuf::int32 value) {
  set_has_source_partition();
  source_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrefetchResult.source_partition)
}

// required .peloton.networking.WorkResult result = 4;
bool TransactionPrefetchResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionPrefetchResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionPrefetchResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionPrefetchResult::clear_result() {
  if (result_ != NULL) result_->::peloton::networking::WorkResult::Clear();
  clear_has_result();
}
const ::peloton::networking::WorkResult& TransactionPrefetchResult::result() const {
  const ::peloton::networking::WorkResult* p = result_;
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrefetchResult.result)
  return p != NULL ? *p : *reinterpret_cast<const ::peloton::networking::WorkResult*>(
      &::peloton::networking::_WorkResult_default_instance_);
}
::peloton::networking::WorkResult* TransactionPrefetchResult::mutable_result() {
  set_has_result();
  if (result_ == NULL) {
    result_ = new ::peloton::networking::WorkResult;
  }
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionPrefetchResult.result)
  return result_;
}
::peloton::networking::WorkResult* TransactionPrefetchResult::release_result() {
  // @@protoc_insertion_point(field_release:peloton.networking.TransactionPrefetchResult.result)
  clear_has_result();
  ::peloton::networking::WorkResult* temp = result_;
  result_ = NULL;
  return temp;
}
void TransactionPrefetchResult::set_allocated_result(::peloton::networking::WorkResult* result) {
  delete result_;
  result_ = result;
  if (result) {
    set_has_result();
  } else {
    clear_has_result();
  }
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.TransactionPrefetchResult.result)
}

// required .peloton.networking.Status status = 5;
bool TransactionPrefetchResult::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionPrefetchResult::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionPrefetchResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionPrefetchResult::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status TransactionPrefetchResult::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrefetchResult.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void TransactionPrefetchResult::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrefetchResult.status)
}

// repeated int32 stmt_counter = 6 [packed = true];
int TransactionPrefetchResult::stmt_counter_size() const {
  return stmt_counter_.size();
}
void TransactionPrefetchResult::clear_stmt_counter() {
  stmt_counter_.Clear();
}
::google::protobuf::int32 TransactionPrefetchResult::stmt_counter(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrefetchResult.stmt_counter)
  return stmt_counter_.Get(index);
}
void TransactionPrefetchResult::set_stmt_counter(int index, ::google::protobuf::int32 value) {
  stmt_counter_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrefetchResult.stmt_counter)
}
void TransactionPrefetchResult::add_stmt_counter(::google::protobuf::int32 value) {
  stmt_counter_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionPrefetchResult.stmt_counter)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionPrefetchResult::stmt_counter() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionPrefetchResult.stmt_counter)
  return stmt_counter_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionPrefetchResult::mutable_stmt_counter() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionPrefetchResult.stmt_counter)
  return &stmt_counter_;
}

// repeated int32 fragment_id = 7 [packed = true];
int TransactionPrefetchResult::fragment_id_size() const {
  return fragment_id_.size();
}
void TransactionPrefetchResult::clear_fragment_id() {
  fragment_id_.Clear();
}
::google::protobuf::int32 TransactionPrefetchResult::fragment_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrefetchResult.fragment_id)
  return fragment_id_.Get(index);
}
void TransactionPrefetchResult::set_fragment_id(int index, ::google::protobuf::int32 value) {
  fragment_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrefetchResult.fragment_id)
}
void TransactionPrefetchResult::add_fragment_id(::google::protobuf::int32 value) {
  fragment_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionPrefetchResult.fragment_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionPrefetchResult::fragment_id() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionPrefetchResult.fragment_id)
  return fragment_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionPrefetchResult::mutable_fragment_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionPrefetchResult.fragment_id)
  return &fragment_id_;
}

// repeated int32 param_hash = 8 [packed = true];
int TransactionPrefetchResult::param_hash_size() const {
  return param_hash_.size();
}
void TransactionPrefetchResult::clear_param_hash() {
  param_hash_.Clear();
}
::google::protobuf::int32 TransactionPrefetchResult::param_hash(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrefetchResult.param_hash)
  return param_hash_.Get(index);
}
void TransactionPrefetchResult::set_param_hash(int index, ::google::protobuf::int32 value) {
  param_hash_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrefetchResult.param_hash)
}
void TransactionPrefetchResult::add_param_hash(::google::protobuf::int32 value) {
  param_hash_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionPrefetchResult.param_hash)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionPrefetchResult::param_hash() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionPrefetchResult.param_hash)
  return param_hash_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionPrefetchResult::mutable_param_hash() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionPrefetchResult.param_hash)
  return &param_hash_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionPrefetchAcknowledgement::kTransactionIdFieldNumber;
const int TransactionPrefetchAcknowledgement::kTargetPartitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionPrefetchAcknowledgement::TransactionPrefetchAcknowledgement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionPrefetchAcknowledgement)
}
TransactionPrefetchAcknowledgement::TransactionPrefetchAcknowledgement(const TransactionPrefetchAcknowledgement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_partition_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(target_partition_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionPrefetchAcknowledgement)
}

void TransactionPrefetchAcknowledgement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_partition_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(target_partition_));
}

TransactionPrefetchAcknowledgement::~TransactionPrefetchAcknowledgement() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionPrefetchAcknowledgement)
  SharedDtor();
}

void TransactionPrefetchAcknowledgement::SharedDtor() {
}

void TransactionPrefetchAcknowledgement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrefetchAcknowledgement::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionPrefetchAcknowledgement& TransactionPrefetchAcknowledgement::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionPrefetchAcknowledgement* TransactionPrefetchAcknowledgement::New(::google::protobuf::Arena* arena) const {
  TransactionPrefetchAcknowledgement* n = new TransactionPrefetchAcknowledgement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionPrefetchAcknowledgement::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionPrefetchAcknowledgement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_partition_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(target_partition_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionPrefetchAcknowledgement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionPrefetchAcknowledgement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 target_partition = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_target_partition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_partition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionPrefetchAcknowledgement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionPrefetchAcknowledgement)
  return false;
#undef DO_
}

void TransactionPrefetchAcknowledgement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionPrefetchAcknowledgement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // required int32 target_partition = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_partition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionPrefetchAcknowledgement)
}

::google::protobuf::uint8* TransactionPrefetchAcknowledgement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionPrefetchAcknowledgement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // required int32 target_partition = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_partition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionPrefetchAcknowledgement)
  return target;
}

size_t TransactionPrefetchAcknowledgement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionPrefetchAcknowledgement)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_target_partition()) {
    // required int32 target_partition = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_partition());
  }

  return total_size;
}
size_t TransactionPrefetchAcknowledgement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionPrefetchAcknowledgement)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 target_partition = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_partition());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrefetchAcknowledgement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionPrefetchAcknowledgement)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionPrefetchAcknowledgement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionPrefetchAcknowledgement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionPrefetchAcknowledgement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionPrefetchAcknowledgement)
    MergeFrom(*source);
  }
}

void TransactionPrefetchAcknowledgement::MergeFrom(const TransactionPrefetchAcknowledgement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionPrefetchAcknowledgement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_partition_ = from.target_partition_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionPrefetchAcknowledgement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionPrefetchAcknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrefetchAcknowledgement::CopyFrom(const TransactionPrefetchAcknowledgement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionPrefetchAcknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrefetchAcknowledgement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TransactionPrefetchAcknowledgement::Swap(TransactionPrefetchAcknowledgement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionPrefetchAcknowledgement::InternalSwap(TransactionPrefetchAcknowledgement* other) {
  using std::swap;
  swap(transaction_id_, other->transaction_id_);
  swap(target_partition_, other->target_partition_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionPrefetchAcknowledgement::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionPrefetchAcknowledgement

// required int64 transaction_id = 1;
bool TransactionPrefetchAcknowledgement::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionPrefetchAcknowledgement::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionPrefetchAcknowledgement::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionPrefetchAcknowledgement::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionPrefetchAcknowledgement::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrefetchAcknowledgement.transaction_id)
  return transaction_id_;
}
void TransactionPrefetchAcknowledgement::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrefetchAcknowledgement.transaction_id)
}

// required int32 target_partition = 2;
bool TransactionPrefetchAcknowledgement::has_target_partition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionPrefetchAcknowledgement::set_has_target_partition() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionPrefetchAcknowledgement::clear_has_target_partition() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionPrefetchAcknowledgement::clear_target_partition() {
  target_partition_ = 0;
  clear_has_target_partition();
}
::google::protobuf::int32 TransactionPrefetchAcknowledgement::target_partition() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrefetchAcknowledgement.target_partition)
  return target_partition_;
}
void TransactionPrefetchAcknowledgement::set_target_partition(::google::protobuf::int32 value) {
  set_has_target_partition();
  target_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrefetchAcknowledgement.target_partition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionMapRequest::kLastTransactionIdFieldNumber;
const int TransactionMapRequest::kTransactionIdFieldNumber;
const int TransactionMapRequest::kClientHandleFieldNumber;
const int TransactionMapRequest::kBasePartitionFieldNumber;
const int TransactionMapRequest::kProcedureIdFieldNumber;
const int TransactionMapRequest::kParamsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionMapRequest::TransactionMapRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionMapRequest)
}
TransactionMapRequest::TransactionMapRequest(const TransactionMapRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_params()) {
    params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.params_);
  }
  ::memcpy(&last_transaction_id_, &from.last_transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&procedure_id_) -
    reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(procedure_id_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionMapRequest)
}

void TransactionMapRequest::SharedCtor() {
  _cached_size_ = 0;
  params_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&procedure_id_) -
      reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(procedure_id_));
}

TransactionMapRequest::~TransactionMapRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionMapRequest)
  SharedDtor();
}

void TransactionMapRequest::SharedDtor() {
  params_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionMapRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionMapRequest& TransactionMapRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionMapRequest* TransactionMapRequest::New(::google::protobuf::Arena* arena) const {
  TransactionMapRequest* n = new TransactionMapRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_params()) {
    GOOGLE_DCHECK(!params_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*params_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&last_transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&procedure_id_) -
        reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(procedure_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionMapRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 last_transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_last_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 client_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_client_handle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &client_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 base_partition = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_base_partition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_partition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 procedure_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_procedure_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &procedure_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes params = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionMapRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionMapRequest)
  return false;
#undef DO_
}

void TransactionMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->last_transaction_id(), output);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int64 client_handle = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->client_handle(), output);
  }

  // required int32 base_partition = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->base_partition(), output);
  }

  // required int32 procedure_id = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->procedure_id(), output);
  }

  // required bytes params = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->params(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionMapRequest)
}

::google::protobuf::uint8* TransactionMapRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionMapRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_transaction_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->last_transaction_id(), target);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int64 client_handle = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->client_handle(), target);
  }

  // required int32 base_partition = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->base_partition(), target);
  }

  // required int32 procedure_id = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->procedure_id(), target);
  }

  // required bytes params = 6;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->params(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionMapRequest)
  return target;
}

size_t TransactionMapRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionMapRequest)
  size_t total_size = 0;

  if (has_params()) {
    // required bytes params = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->params());
  }

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_client_handle()) {
    // required int64 client_handle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_handle());
  }

  if (has_base_partition()) {
    // required int32 base_partition = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_partition());
  }

  if (has_procedure_id()) {
    // required int32 procedure_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());
  }

  return total_size;
}
size_t TransactionMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionMapRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required bytes params = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->params());

    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int64 client_handle = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->client_handle());

    // required int32 base_partition = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->base_partition());

    // required int32 procedure_id = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->procedure_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 last_transaction_id = 1;
  if (has_last_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_transaction_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionMapRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionMapRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionMapRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionMapRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionMapRequest)
    MergeFrom(*source);
  }
}

void TransactionMapRequest::MergeFrom(const TransactionMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_params();
      params_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.params_);
    }
    if (cached_has_bits & 0x00000002u) {
      last_transaction_id_ = from.last_transaction_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_handle_ = from.client_handle_;
    }
    if (cached_has_bits & 0x00000010u) {
      base_partition_ = from.base_partition_;
    }
    if (cached_has_bits & 0x00000020u) {
      procedure_id_ = from.procedure_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionMapRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionMapRequest::CopyFrom(const TransactionMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionMapRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;
  return true;
}

void TransactionMapRequest::Swap(TransactionMapRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionMapRequest::InternalSwap(TransactionMapRequest* other) {
  using std::swap;
  params_.Swap(&other->params_);
  swap(last_transaction_id_, other->last_transaction_id_);
  swap(transaction_id_, other->transaction_id_);
  swap(client_handle_, other->client_handle_);
  swap(base_partition_, other->base_partition_);
  swap(procedure_id_, other->procedure_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionMapRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionMapRequest

// optional int64 last_transaction_id = 1;
bool TransactionMapRequest::has_last_transaction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionMapRequest::set_has_last_transaction_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionMapRequest::clear_has_last_transaction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionMapRequest::clear_last_transaction_id() {
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_transaction_id();
}
::google::protobuf::int64 TransactionMapRequest::last_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionMapRequest.last_transaction_id)
  return last_transaction_id_;
}
void TransactionMapRequest::set_last_transaction_id(::google::protobuf::int64 value) {
  set_has_last_transaction_id();
  last_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionMapRequest.last_transaction_id)
}

// required int64 transaction_id = 2;
bool TransactionMapRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionMapRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionMapRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionMapRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionMapRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionMapRequest.transaction_id)
  return transaction_id_;
}
void TransactionMapRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionMapRequest.transaction_id)
}

// required int64 client_handle = 3;
bool TransactionMapRequest::has_client_handle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionMapRequest::set_has_client_handle() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionMapRequest::clear_has_client_handle() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionMapRequest::clear_client_handle() {
  client_handle_ = GOOGLE_LONGLONG(0);
  clear_has_client_handle();
}
::google::protobuf::int64 TransactionMapRequest::client_handle() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionMapRequest.client_handle)
  return client_handle_;
}
void TransactionMapRequest::set_client_handle(::google::protobuf::int64 value) {
  set_has_client_handle();
  client_handle_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionMapRequest.client_handle)
}

// required int32 base_partition = 4;
bool TransactionMapRequest::has_base_partition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TransactionMapRequest::set_has_base_partition() {
  _has_bits_[0] |= 0x00000010u;
}
void TransactionMapRequest::clear_has_base_partition() {
  _has_bits_[0] &= ~0x00000010u;
}
void TransactionMapRequest::clear_base_partition() {
  base_partition_ = 0;
  clear_has_base_partition();
}
::google::protobuf::int32 TransactionMapRequest::base_partition() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionMapRequest.base_partition)
  return base_partition_;
}
void TransactionMapRequest::set_base_partition(::google::protobuf::int32 value) {
  set_has_base_partition();
  base_partition_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionMapRequest.base_partition)
}

// required int32 procedure_id = 5;
bool TransactionMapRequest::has_procedure_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TransactionMapRequest::set_has_procedure_id() {
  _has_bits_[0] |= 0x00000020u;
}
void TransactionMapRequest::clear_has_procedure_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void TransactionMapRequest::clear_procedure_id() {
  procedure_id_ = 0;
  clear_has_procedure_id();
}
::google::protobuf::int32 TransactionMapRequest::procedure_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionMapRequest.procedure_id)
  return procedure_id_;
}
void TransactionMapRequest::set_procedure_id(::google::protobuf::int32 value) {
  set_has_procedure_id();
  procedure_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionMapRequest.procedure_id)
}

// required bytes params = 6;
bool TransactionMapRequest::has_params() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionMapRequest::set_has_params() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionMapRequest::clear_has_params() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionMapRequest::clear_params() {
  params_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_params();
}
const ::std::string& TransactionMapRequest::params() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionMapRequest.params)
  return params_.GetNoArena();
}
void TransactionMapRequest::set_params(const ::std::string& value) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionMapRequest.params)
}
#if LANG_CXX11
void TransactionMapRequest::set_params(::std::string&& value) {
  set_has_params();
  params_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.TransactionMapRequest.params)
}
#endif
void TransactionMapRequest::set_params(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.TransactionMapRequest.params)
}
void TransactionMapRequest::set_params(const void* value, size_t size) {
  set_has_params();
  params_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.TransactionMapRequest.params)
}
::std::string* TransactionMapRequest::mutable_params() {
  set_has_params();
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionMapRequest.params)
  return params_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionMapRequest::release_params() {
  // @@protoc_insertion_point(field_release:peloton.networking.TransactionMapRequest.params)
  clear_has_params();
  return params_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionMapRequest::set_allocated_params(::std::string* params) {
  if (params != NULL) {
    set_has_params();
  } else {
    clear_has_params();
  }
  params_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), params);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.TransactionMapRequest.params)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionMapResponse::kTransactionIdFieldNumber;
const int TransactionMapResponse::kPartitionsFieldNumber;
const int TransactionMapResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionMapResponse::TransactionMapResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionMapResponse)
}
TransactionMapResponse::TransactionMapResponse(const TransactionMapResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      partitions_(from.partitions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionMapResponse)
}

void TransactionMapResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
}

TransactionMapResponse::~TransactionMapResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionMapResponse)
  SharedDtor();
}

void TransactionMapResponse::SharedDtor() {
}

void TransactionMapResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionMapResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionMapResponse& TransactionMapResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionMapResponse* TransactionMapResponse::New(::google::protobuf::Arena* arena) const {
  TransactionMapResponse* n = new TransactionMapResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionMapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionMapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionMapResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionMapResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionMapResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionMapResponse)
  return false;
#undef DO_
}

void TransactionMapResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionMapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _partitions_cached_byte_size_));
  }
  for (int i = 0, n = this->partitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionMapResponse)
}

::google::protobuf::uint8* TransactionMapResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionMapResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _partitions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions_, target);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionMapResponse)
  return target;
}

size_t TransactionMapResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionMapResponse)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t TransactionMapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionMapResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->partitions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionMapResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionMapResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionMapResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionMapResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionMapResponse)
    MergeFrom(*source);
  }
}

void TransactionMapResponse::MergeFrom(const TransactionMapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionMapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_.MergeFrom(from.partitions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionMapResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionMapResponse::CopyFrom(const TransactionMapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionMapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionMapResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TransactionMapResponse::Swap(TransactionMapResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionMapResponse::InternalSwap(TransactionMapResponse* other) {
  using std::swap;
  partitions_.InternalSwap(&other->partitions_);
  swap(transaction_id_, other->transaction_id_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionMapResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionMapResponse

// required int64 transaction_id = 1;
bool TransactionMapResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionMapResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionMapResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionMapResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionMapResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionMapResponse.transaction_id)
  return transaction_id_;
}
void TransactionMapResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionMapResponse.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionMapResponse::partitions_size() const {
  return partitions_.size();
}
void TransactionMapResponse::clear_partitions() {
  partitions_.Clear();
}
::google::protobuf::int32 TransactionMapResponse::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionMapResponse.partitions)
  return partitions_.Get(index);
}
void TransactionMapResponse::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionMapResponse.partitions)
}
void TransactionMapResponse::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionMapResponse.partitions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionMapResponse::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionMapResponse.partitions)
  return partitions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionMapResponse::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionMapResponse.partitions)
  return &partitions_;
}

// required .peloton.networking.Status status = 3;
bool TransactionMapResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionMapResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionMapResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionMapResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status TransactionMapResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionMapResponse.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void TransactionMapResponse::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionMapResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionReduceRequest::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionReduceRequest::TransactionReduceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionReduceRequest)
}
TransactionReduceRequest::TransactionReduceRequest(const TransactionReduceRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_id_ = from.transaction_id_;
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionReduceRequest)
}

void TransactionReduceRequest::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
}

TransactionReduceRequest::~TransactionReduceRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionReduceRequest)
  SharedDtor();
}

void TransactionReduceRequest::SharedDtor() {
}

void TransactionReduceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionReduceRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionReduceRequest& TransactionReduceRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionReduceRequest* TransactionReduceRequest::New(::google::protobuf::Arena* arena) const {
  TransactionReduceRequest* n = new TransactionReduceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionReduceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionReduceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionReduceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionReduceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionReduceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionReduceRequest)
  return false;
#undef DO_
}

void TransactionReduceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionReduceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionReduceRequest)
}

::google::protobuf::uint8* TransactionReduceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionReduceRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionReduceRequest)
  return target;
}

size_t TransactionReduceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionReduceRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionReduceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionReduceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionReduceRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionReduceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionReduceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionReduceRequest)
    MergeFrom(*source);
  }
}

void TransactionReduceRequest::MergeFrom(const TransactionReduceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionReduceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transaction_id()) {
    set_transaction_id(from.transaction_id());
  }
}

void TransactionReduceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionReduceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionReduceRequest::CopyFrom(const TransactionReduceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionReduceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionReduceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TransactionReduceRequest::Swap(TransactionReduceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionReduceRequest::InternalSwap(TransactionReduceRequest* other) {
  using std::swap;
  swap(transaction_id_, other->transaction_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionReduceRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionReduceRequest

// required int64 transaction_id = 1;
bool TransactionReduceRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionReduceRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionReduceRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionReduceRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionReduceRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionReduceRequest.transaction_id)
  return transaction_id_;
}
void TransactionReduceRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionReduceRequest.transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionReduceResponse_ReduceResult::kPartitionIdFieldNumber;
const int TransactionReduceResponse_ReduceResult::kDataFieldNumber;
const int TransactionReduceResponse_ReduceResult::kStatusFieldNumber;
const int TransactionReduceResponse_ReduceResult::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionReduceResponse_ReduceResult::TransactionReduceResponse_ReduceResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionReduceResponse.ReduceResult)
}
TransactionReduceResponse_ReduceResult::TransactionReduceResponse_ReduceResult(const TransactionReduceResponse_ReduceResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&partition_id_, &from.partition_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&error_) -
    reinterpret_cast<char*>(&partition_id_)) + sizeof(error_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionReduceResponse.ReduceResult)
}

void TransactionReduceResponse_ReduceResult::SharedCtor() {
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&partition_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&partition_id_)) + sizeof(error_));
}

TransactionReduceResponse_ReduceResult::~TransactionReduceResponse_ReduceResult() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionReduceResponse.ReduceResult)
  SharedDtor();
}

void TransactionReduceResponse_ReduceResult::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionReduceResponse_ReduceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionReduceResponse_ReduceResult::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionReduceResponse_ReduceResult& TransactionReduceResponse_ReduceResult::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionReduceResponse_ReduceResult* TransactionReduceResponse_ReduceResult::New(::google::protobuf::Arena* arena) const {
  TransactionReduceResponse_ReduceResult* n = new TransactionReduceResponse_ReduceResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionReduceResponse_ReduceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionReduceResponse.ReduceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_data()) {
    GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*data_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&partition_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&error_) -
        reinterpret_cast<char*>(&partition_id_)) + sizeof(error_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionReduceResponse_ReduceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionReduceResponse.ReduceResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 partition_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_partition_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool error = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionReduceResponse.ReduceResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionReduceResponse.ReduceResult)
  return false;
#undef DO_
}

void TransactionReduceResponse_ReduceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionReduceResponse.ReduceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 partition_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->partition_id(), output);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional bool error = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionReduceResponse.ReduceResult)
}

::google::protobuf::uint8* TransactionReduceResponse_ReduceResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionReduceResponse.ReduceResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 partition_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->partition_id(), target);
  }

  // required bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional bool error = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionReduceResponse.ReduceResult)
  return target;
}

size_t TransactionReduceResponse_ReduceResult::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionReduceResponse.ReduceResult)
  size_t total_size = 0;

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (has_partition_id()) {
    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t TransactionReduceResponse_ReduceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionReduceResponse.ReduceResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

    // required int32 partition_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());

    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool error = 4 [default = false];
  if (has_error()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionReduceResponse_ReduceResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionReduceResponse.ReduceResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionReduceResponse_ReduceResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionReduceResponse_ReduceResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionReduceResponse.ReduceResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionReduceResponse.ReduceResult)
    MergeFrom(*source);
  }
}

void TransactionReduceResponse_ReduceResult::MergeFrom(const TransactionReduceResponse_ReduceResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionReduceResponse.ReduceResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      partition_id_ = from.partition_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      error_ = from.error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionReduceResponse_ReduceResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionReduceResponse.ReduceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionReduceResponse_ReduceResult::CopyFrom(const TransactionReduceResponse_ReduceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionReduceResponse.ReduceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionReduceResponse_ReduceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TransactionReduceResponse_ReduceResult::Swap(TransactionReduceResponse_ReduceResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionReduceResponse_ReduceResult::InternalSwap(TransactionReduceResponse_ReduceResult* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(partition_id_, other->partition_id_);
  swap(status_, other->status_);
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionReduceResponse_ReduceResult::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionReduceResponse_ReduceResult

// required int32 partition_id = 1;
bool TransactionReduceResponse_ReduceResult::has_partition_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionReduceResponse_ReduceResult::set_has_partition_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionReduceResponse_ReduceResult::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionReduceResponse_ReduceResult::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
::google::protobuf::int32 TransactionReduceResponse_ReduceResult::partition_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionReduceResponse.ReduceResult.partition_id)
  return partition_id_;
}
void TransactionReduceResponse_ReduceResult::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionReduceResponse.ReduceResult.partition_id)
}

// required bytes data = 2;
bool TransactionReduceResponse_ReduceResult::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionReduceResponse_ReduceResult::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionReduceResponse_ReduceResult::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionReduceResponse_ReduceResult::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& TransactionReduceResponse_ReduceResult::data() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionReduceResponse.ReduceResult.data)
  return data_.GetNoArena();
}
void TransactionReduceResponse_ReduceResult::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionReduceResponse.ReduceResult.data)
}
#if LANG_CXX11
void TransactionReduceResponse_ReduceResult::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.TransactionReduceResponse.ReduceResult.data)
}
#endif
void TransactionReduceResponse_ReduceResult::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.TransactionReduceResponse.ReduceResult.data)
}
void TransactionReduceResponse_ReduceResult::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.TransactionReduceResponse.ReduceResult.data)
}
::std::string* TransactionReduceResponse_ReduceResult::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionReduceResponse.ReduceResult.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionReduceResponse_ReduceResult::release_data() {
  // @@protoc_insertion_point(field_release:peloton.networking.TransactionReduceResponse.ReduceResult.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionReduceResponse_ReduceResult::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.TransactionReduceResponse.ReduceResult.data)
}

// required .peloton.networking.Status status = 3;
bool TransactionReduceResponse_ReduceResult::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionReduceResponse_ReduceResult::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionReduceResponse_ReduceResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionReduceResponse_ReduceResult::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status TransactionReduceResponse_ReduceResult::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionReduceResponse.ReduceResult.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void TransactionReduceResponse_ReduceResult::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionReduceResponse.ReduceResult.status)
}

// optional bool error = 4 [default = false];
bool TransactionReduceResponse_ReduceResult::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TransactionReduceResponse_ReduceResult::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
void TransactionReduceResponse_ReduceResult::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void TransactionReduceResponse_ReduceResult::clear_error() {
  error_ = false;
  clear_has_error();
}
bool TransactionReduceResponse_ReduceResult::error() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionReduceResponse.ReduceResult.error)
  return error_;
}
void TransactionReduceResponse_ReduceResult::set_error(bool value) {
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionReduceResponse.ReduceResult.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionReduceResponse::kTransactionIdFieldNumber;
const int TransactionReduceResponse::kResultsFieldNumber;
const int TransactionReduceResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionReduceResponse::TransactionReduceResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionReduceResponse)
}
TransactionReduceResponse::TransactionReduceResponse(const TransactionReduceResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      results_(from.results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionReduceResponse)
}

void TransactionReduceResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
}

TransactionReduceResponse::~TransactionReduceResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionReduceResponse)
  SharedDtor();
}

void TransactionReduceResponse::SharedDtor() {
}

void TransactionReduceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionReduceResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionReduceResponse& TransactionReduceResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionReduceResponse* TransactionReduceResponse::New(::google::protobuf::Arena* arena) const {
  TransactionReduceResponse* n = new TransactionReduceResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionReduceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionReduceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionReduceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionReduceResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .peloton.networking.TransactionReduceResponse.ReduceResult results = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionReduceResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionReduceResponse)
  return false;
#undef DO_
}

void TransactionReduceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionReduceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated .peloton.networking.TransactionReduceResponse.ReduceResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->results(static_cast<int>(i)), output);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionReduceResponse)
}

::google::protobuf::uint8* TransactionReduceResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionReduceResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated .peloton.networking.TransactionReduceResponse.ReduceResult results = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->results(static_cast<int>(i)), deterministic, target);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionReduceResponse)
  return target;
}

size_t TransactionReduceResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionReduceResponse)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t TransactionReduceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionReduceResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .peloton.networking.TransactionReduceResponse.ReduceResult results = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionReduceResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionReduceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionReduceResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionReduceResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionReduceResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionReduceResponse)
    MergeFrom(*source);
  }
}

void TransactionReduceResponse::MergeFrom(const TransactionReduceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionReduceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionReduceResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionReduceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionReduceResponse::CopyFrom(const TransactionReduceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionReduceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionReduceResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void TransactionReduceResponse::Swap(TransactionReduceResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionReduceResponse::InternalSwap(TransactionReduceResponse* other) {
  using std::swap;
  results_.InternalSwap(&other->results_);
  swap(transaction_id_, other->transaction_id_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionReduceResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionReduceResponse

// required int64 transaction_id = 1;
bool TransactionReduceResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionReduceResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionReduceResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionReduceResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionReduceResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionReduceResponse.transaction_id)
  return transaction_id_;
}
void TransactionReduceResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionReduceResponse.transaction_id)
}

// repeated .peloton.networking.TransactionReduceResponse.ReduceResult results = 2;
int TransactionReduceResponse::results_size() const {
  return results_.size();
}
void TransactionReduceResponse::clear_results() {
  results_.Clear();
}
const ::peloton::networking::TransactionReduceResponse_ReduceResult& TransactionReduceResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionReduceResponse.results)
  return results_.Get(index);
}
::peloton::networking::TransactionReduceResponse_ReduceResult* TransactionReduceResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionReduceResponse.results)
  return results_.Mutable(index);
}
::peloton::networking::TransactionReduceResponse_ReduceResult* TransactionReduceResponse::add_results() {
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionReduceResponse.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::peloton::networking::TransactionReduceResponse_ReduceResult >*
TransactionReduceResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionReduceResponse.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::peloton::networking::TransactionReduceResponse_ReduceResult >&
TransactionReduceResponse::results() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionReduceResponse.results)
  return results_;
}

// required .peloton.networking.Status status = 3;
bool TransactionReduceResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionReduceResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionReduceResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionReduceResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status TransactionReduceResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionReduceResponse.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void TransactionReduceResponse::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionReduceResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionPrepareRequest::kTransactionIdFieldNumber;
const int TransactionPrepareRequest::kPartitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionPrepareRequest::TransactionPrepareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionPrepareRequest)
}
TransactionPrepareRequest::TransactionPrepareRequest(const TransactionPrepareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      partitions_(from.partitions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_id_ = from.transaction_id_;
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionPrepareRequest)
}

void TransactionPrepareRequest::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
}

TransactionPrepareRequest::~TransactionPrepareRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionPrepareRequest)
  SharedDtor();
}

void TransactionPrepareRequest::SharedDtor() {
}

void TransactionPrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrepareRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionPrepareRequest& TransactionPrepareRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionPrepareRequest* TransactionPrepareRequest::New(::google::protobuf::Arena* arena) const {
  TransactionPrepareRequest* n = new TransactionPrepareRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionPrepareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionPrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_.Clear();
  transaction_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionPrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionPrepareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionPrepareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionPrepareRequest)
  return false;
#undef DO_
}

void TransactionPrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionPrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _partitions_cached_byte_size_));
  }
  for (int i = 0, n = this->partitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionPrepareRequest)
}

::google::protobuf::uint8* TransactionPrepareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionPrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _partitions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionPrepareRequest)
  return target;
}

size_t TransactionPrepareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionPrepareRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->partitions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionPrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionPrepareRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionPrepareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionPrepareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionPrepareRequest)
    MergeFrom(*source);
  }
}

void TransactionPrepareRequest::MergeFrom(const TransactionPrepareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionPrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_.MergeFrom(from.partitions_);
  if (from.has_transaction_id()) {
    set_transaction_id(from.transaction_id());
  }
}

void TransactionPrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionPrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrepareRequest::CopyFrom(const TransactionPrepareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionPrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrepareRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TransactionPrepareRequest::Swap(TransactionPrepareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionPrepareRequest::InternalSwap(TransactionPrepareRequest* other) {
  using std::swap;
  partitions_.InternalSwap(&other->partitions_);
  swap(transaction_id_, other->transaction_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionPrepareRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionPrepareRequest

// required int64 transaction_id = 1;
bool TransactionPrepareRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionPrepareRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionPrepareRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionPrepareRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionPrepareRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrepareRequest.transaction_id)
  return transaction_id_;
}
void TransactionPrepareRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrepareRequest.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionPrepareRequest::partitions_size() const {
  return partitions_.size();
}
void TransactionPrepareRequest::clear_partitions() {
  partitions_.Clear();
}
::google::protobuf::int32 TransactionPrepareRequest::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrepareRequest.partitions)
  return partitions_.Get(index);
}
void TransactionPrepareRequest::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrepareRequest.partitions)
}
void TransactionPrepareRequest::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionPrepareRequest.partitions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionPrepareRequest::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionPrepareRequest.partitions)
  return partitions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionPrepareRequest::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionPrepareRequest.partitions)
  return &partitions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionPrepareResponse::kTransactionIdFieldNumber;
const int TransactionPrepareResponse::kPartitionsFieldNumber;
const int TransactionPrepareResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionPrepareResponse::TransactionPrepareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionPrepareResponse)
}
TransactionPrepareResponse::TransactionPrepareResponse(const TransactionPrepareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      partitions_(from.partitions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionPrepareResponse)
}

void TransactionPrepareResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
}

TransactionPrepareResponse::~TransactionPrepareResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionPrepareResponse)
  SharedDtor();
}

void TransactionPrepareResponse::SharedDtor() {
}

void TransactionPrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionPrepareResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionPrepareResponse& TransactionPrepareResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionPrepareResponse* TransactionPrepareResponse::New(::google::protobuf::Arena* arena) const {
  TransactionPrepareResponse* n = new TransactionPrepareResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionPrepareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionPrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionPrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionPrepareResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionPrepareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionPrepareResponse)
  return false;
#undef DO_
}

void TransactionPrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionPrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _partitions_cached_byte_size_));
  }
  for (int i = 0, n = this->partitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionPrepareResponse)
}

::google::protobuf::uint8* TransactionPrepareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionPrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _partitions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions_, target);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionPrepareResponse)
  return target;
}

size_t TransactionPrepareResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionPrepareResponse)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t TransactionPrepareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionPrepareResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->partitions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionPrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionPrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionPrepareResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionPrepareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionPrepareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionPrepareResponse)
    MergeFrom(*source);
  }
}

void TransactionPrepareResponse::MergeFrom(const TransactionPrepareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionPrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_.MergeFrom(from.partitions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionPrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionPrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionPrepareResponse::CopyFrom(const TransactionPrepareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionPrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPrepareResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TransactionPrepareResponse::Swap(TransactionPrepareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionPrepareResponse::InternalSwap(TransactionPrepareResponse* other) {
  using std::swap;
  partitions_.InternalSwap(&other->partitions_);
  swap(transaction_id_, other->transaction_id_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionPrepareResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionPrepareResponse

// required int64 transaction_id = 1;
bool TransactionPrepareResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionPrepareResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionPrepareResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionPrepareResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionPrepareResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrepareResponse.transaction_id)
  return transaction_id_;
}
void TransactionPrepareResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrepareResponse.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionPrepareResponse::partitions_size() const {
  return partitions_.size();
}
void TransactionPrepareResponse::clear_partitions() {
  partitions_.Clear();
}
::google::protobuf::int32 TransactionPrepareResponse::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrepareResponse.partitions)
  return partitions_.Get(index);
}
void TransactionPrepareResponse::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrepareResponse.partitions)
}
void TransactionPrepareResponse::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionPrepareResponse.partitions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionPrepareResponse::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionPrepareResponse.partitions)
  return partitions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionPrepareResponse::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionPrepareResponse.partitions)
  return &partitions_;
}

// required .peloton.networking.Status status = 3;
bool TransactionPrepareResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionPrepareResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionPrepareResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionPrepareResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status TransactionPrepareResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionPrepareResponse.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void TransactionPrepareResponse::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionPrepareResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionFinishRequest::kTransactionIdFieldNumber;
const int TransactionFinishRequest::kPartitionsFieldNumber;
const int TransactionFinishRequest::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionFinishRequest::TransactionFinishRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionFinishRequest)
}
TransactionFinishRequest::TransactionFinishRequest(const TransactionFinishRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      partitions_(from.partitions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionFinishRequest)
}

void TransactionFinishRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
}

TransactionFinishRequest::~TransactionFinishRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionFinishRequest)
  SharedDtor();
}

void TransactionFinishRequest::SharedDtor() {
}

void TransactionFinishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionFinishRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionFinishRequest& TransactionFinishRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionFinishRequest* TransactionFinishRequest::New(::google::protobuf::Arena* arena) const {
  TransactionFinishRequest* n = new TransactionFinishRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionFinishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionFinishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionFinishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionFinishRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionFinishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionFinishRequest)
  return false;
#undef DO_
}

void TransactionFinishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionFinishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _partitions_cached_byte_size_));
  }
  for (int i = 0, n = this->partitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionFinishRequest)
}

::google::protobuf::uint8* TransactionFinishRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionFinishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _partitions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions_, target);
  }

  // required .peloton.networking.Status status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionFinishRequest)
  return target;
}

size_t TransactionFinishRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionFinishRequest)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t TransactionFinishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionFinishRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required .peloton.networking.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->partitions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionFinishRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionFinishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionFinishRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionFinishRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionFinishRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionFinishRequest)
    MergeFrom(*source);
  }
}

void TransactionFinishRequest::MergeFrom(const TransactionFinishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionFinishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_.MergeFrom(from.partitions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionFinishRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionFinishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionFinishRequest::CopyFrom(const TransactionFinishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionFinishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionFinishRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TransactionFinishRequest::Swap(TransactionFinishRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionFinishRequest::InternalSwap(TransactionFinishRequest* other) {
  using std::swap;
  partitions_.InternalSwap(&other->partitions_);
  swap(transaction_id_, other->transaction_id_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionFinishRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionFinishRequest

// required int64 transaction_id = 1;
bool TransactionFinishRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionFinishRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionFinishRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionFinishRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionFinishRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionFinishRequest.transaction_id)
  return transaction_id_;
}
void TransactionFinishRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionFinishRequest.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionFinishRequest::partitions_size() const {
  return partitions_.size();
}
void TransactionFinishRequest::clear_partitions() {
  partitions_.Clear();
}
::google::protobuf::int32 TransactionFinishRequest::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionFinishRequest.partitions)
  return partitions_.Get(index);
}
void TransactionFinishRequest::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionFinishRequest.partitions)
}
void TransactionFinishRequest::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionFinishRequest.partitions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionFinishRequest::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionFinishRequest.partitions)
  return partitions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionFinishRequest::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionFinishRequest.partitions)
  return &partitions_;
}

// required .peloton.networking.Status status = 3;
bool TransactionFinishRequest::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionFinishRequest::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionFinishRequest::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionFinishRequest::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status TransactionFinishRequest::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionFinishRequest.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void TransactionFinishRequest::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionFinishRequest.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionFinishResponse::kTransactionIdFieldNumber;
const int TransactionFinishResponse::kPartitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionFinishResponse::TransactionFinishResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionFinishResponse)
}
TransactionFinishResponse::TransactionFinishResponse(const TransactionFinishResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      partitions_(from.partitions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transaction_id_ = from.transaction_id_;
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionFinishResponse)
}

void TransactionFinishResponse::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_LONGLONG(0);
}

TransactionFinishResponse::~TransactionFinishResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionFinishResponse)
  SharedDtor();
}

void TransactionFinishResponse::SharedDtor() {
}

void TransactionFinishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionFinishResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionFinishResponse& TransactionFinishResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionFinishResponse* TransactionFinishResponse::New(::google::protobuf::Arena* arena) const {
  TransactionFinishResponse* n = new TransactionFinishResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionFinishResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionFinishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_.Clear();
  transaction_id_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionFinishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionFinishResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionFinishResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionFinishResponse)
  return false;
#undef DO_
}

void TransactionFinishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionFinishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _partitions_cached_byte_size_));
  }
  for (int i = 0, n = this->partitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionFinishResponse)
}

::google::protobuf::uint8* TransactionFinishResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionFinishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _partitions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionFinishResponse)
  return target;
}

size_t TransactionFinishResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionFinishResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 transaction_id = 1;
  if (has_transaction_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->partitions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionFinishResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionFinishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionFinishResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionFinishResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionFinishResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionFinishResponse)
    MergeFrom(*source);
  }
}

void TransactionFinishResponse::MergeFrom(const TransactionFinishResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionFinishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_.MergeFrom(from.partitions_);
  if (from.has_transaction_id()) {
    set_transaction_id(from.transaction_id());
  }
}

void TransactionFinishResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionFinishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionFinishResponse::CopyFrom(const TransactionFinishResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionFinishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionFinishResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TransactionFinishResponse::Swap(TransactionFinishResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionFinishResponse::InternalSwap(TransactionFinishResponse* other) {
  using std::swap;
  partitions_.InternalSwap(&other->partitions_);
  swap(transaction_id_, other->transaction_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionFinishResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionFinishResponse

// required int64 transaction_id = 1;
bool TransactionFinishResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionFinishResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionFinishResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionFinishResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionFinishResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionFinishResponse.transaction_id)
  return transaction_id_;
}
void TransactionFinishResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionFinishResponse.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int TransactionFinishResponse::partitions_size() const {
  return partitions_.size();
}
void TransactionFinishResponse::clear_partitions() {
  partitions_.Clear();
}
::google::protobuf::int32 TransactionFinishResponse::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionFinishResponse.partitions)
  return partitions_.Get(index);
}
void TransactionFinishResponse::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionFinishResponse.partitions)
}
void TransactionFinishResponse::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.TransactionFinishResponse.partitions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TransactionFinishResponse::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.networking.TransactionFinishResponse.partitions)
  return partitions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TransactionFinishResponse::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.TransactionFinishResponse.partitions)
  return &partitions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionRedirectRequest::kSenderSiteFieldNumber;
const int TransactionRedirectRequest::kWorkFieldNumber;
const int TransactionRedirectRequest::kOrigTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionRedirectRequest::TransactionRedirectRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionRedirectRequest)
}
TransactionRedirectRequest::TransactionRedirectRequest(const TransactionRedirectRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  work_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_work()) {
    work_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.work_);
  }
  ::memcpy(&orig_txn_id_, &from.orig_txn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_site_) -
    reinterpret_cast<char*>(&orig_txn_id_)) + sizeof(sender_site_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionRedirectRequest)
}

void TransactionRedirectRequest::SharedCtor() {
  _cached_size_ = 0;
  work_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&orig_txn_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_site_) -
      reinterpret_cast<char*>(&orig_txn_id_)) + sizeof(sender_site_));
}

TransactionRedirectRequest::~TransactionRedirectRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionRedirectRequest)
  SharedDtor();
}

void TransactionRedirectRequest::SharedDtor() {
  work_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionRedirectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionRedirectRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionRedirectRequest& TransactionRedirectRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionRedirectRequest* TransactionRedirectRequest::New(::google::protobuf::Arena* arena) const {
  TransactionRedirectRequest* n = new TransactionRedirectRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionRedirectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionRedirectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_work()) {
    GOOGLE_DCHECK(!work_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*work_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&orig_txn_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sender_site_) -
        reinterpret_cast<char*>(&orig_txn_id_)) + sizeof(sender_site_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionRedirectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionRedirectRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes work = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_work()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 orig_txn_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_orig_txn_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &orig_txn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionRedirectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionRedirectRequest)
  return false;
#undef DO_
}

void TransactionRedirectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionRedirectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required bytes work = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->work(), output);
  }

  // optional int64 orig_txn_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->orig_txn_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionRedirectRequest)
}

::google::protobuf::uint8* TransactionRedirectRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionRedirectRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required bytes work = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->work(), target);
  }

  // optional int64 orig_txn_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->orig_txn_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionRedirectRequest)
  return target;
}

size_t TransactionRedirectRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionRedirectRequest)
  size_t total_size = 0;

  if (has_work()) {
    // required bytes work = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->work());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  return total_size;
}
size_t TransactionRedirectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionRedirectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required bytes work = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->work());

    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 orig_txn_id = 3;
  if (has_orig_txn_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->orig_txn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionRedirectRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionRedirectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionRedirectRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionRedirectRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionRedirectRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionRedirectRequest)
    MergeFrom(*source);
  }
}

void TransactionRedirectRequest::MergeFrom(const TransactionRedirectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionRedirectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_work();
      work_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.work_);
    }
    if (cached_has_bits & 0x00000002u) {
      orig_txn_id_ = from.orig_txn_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      sender_site_ = from.sender_site_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionRedirectRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionRedirectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRedirectRequest::CopyFrom(const TransactionRedirectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionRedirectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRedirectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void TransactionRedirectRequest::Swap(TransactionRedirectRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionRedirectRequest::InternalSwap(TransactionRedirectRequest* other) {
  using std::swap;
  work_.Swap(&other->work_);
  swap(orig_txn_id_, other->orig_txn_id_);
  swap(sender_site_, other->sender_site_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionRedirectRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionRedirectRequest

// required int32 sender_site = 1;
bool TransactionRedirectRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionRedirectRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionRedirectRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionRedirectRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 TransactionRedirectRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionRedirectRequest.sender_site)
  return sender_site_;
}
void TransactionRedirectRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionRedirectRequest.sender_site)
}

// required bytes work = 2;
bool TransactionRedirectRequest::has_work() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionRedirectRequest::set_has_work() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionRedirectRequest::clear_has_work() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionRedirectRequest::clear_work() {
  work_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_work();
}
const ::std::string& TransactionRedirectRequest::work() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionRedirectRequest.work)
  return work_.GetNoArena();
}
void TransactionRedirectRequest::set_work(const ::std::string& value) {
  set_has_work();
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionRedirectRequest.work)
}
#if LANG_CXX11
void TransactionRedirectRequest::set_work(::std::string&& value) {
  set_has_work();
  work_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.TransactionRedirectRequest.work)
}
#endif
void TransactionRedirectRequest::set_work(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_work();
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.TransactionRedirectRequest.work)
}
void TransactionRedirectRequest::set_work(const void* value, size_t size) {
  set_has_work();
  work_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.TransactionRedirectRequest.work)
}
::std::string* TransactionRedirectRequest::mutable_work() {
  set_has_work();
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionRedirectRequest.work)
  return work_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionRedirectRequest::release_work() {
  // @@protoc_insertion_point(field_release:peloton.networking.TransactionRedirectRequest.work)
  clear_has_work();
  return work_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionRedirectRequest::set_allocated_work(::std::string* work) {
  if (work != NULL) {
    set_has_work();
  } else {
    clear_has_work();
  }
  work_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), work);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.TransactionRedirectRequest.work)
}

// optional int64 orig_txn_id = 3;
bool TransactionRedirectRequest::has_orig_txn_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionRedirectRequest::set_has_orig_txn_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionRedirectRequest::clear_has_orig_txn_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionRedirectRequest::clear_orig_txn_id() {
  orig_txn_id_ = GOOGLE_LONGLONG(0);
  clear_has_orig_txn_id();
}
::google::protobuf::int64 TransactionRedirectRequest::orig_txn_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionRedirectRequest.orig_txn_id)
  return orig_txn_id_;
}
void TransactionRedirectRequest::set_orig_txn_id(::google::protobuf::int64 value) {
  set_has_orig_txn_id();
  orig_txn_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionRedirectRequest.orig_txn_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionRedirectResponse::kSenderSiteFieldNumber;
const int TransactionRedirectResponse::kOutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionRedirectResponse::TransactionRedirectResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionRedirectResponse)
}
TransactionRedirectResponse::TransactionRedirectResponse(const TransactionRedirectResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_output()) {
    output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
  }
  sender_site_ = from.sender_site_;
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionRedirectResponse)
}

void TransactionRedirectResponse::SharedCtor() {
  _cached_size_ = 0;
  output_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_site_ = 0;
}

TransactionRedirectResponse::~TransactionRedirectResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionRedirectResponse)
  SharedDtor();
}

void TransactionRedirectResponse::SharedDtor() {
  output_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionRedirectResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionRedirectResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionRedirectResponse& TransactionRedirectResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionRedirectResponse* TransactionRedirectResponse::New(::google::protobuf::Arena* arena) const {
  TransactionRedirectResponse* n = new TransactionRedirectResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionRedirectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionRedirectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_output()) {
    GOOGLE_DCHECK(!output_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*output_.UnsafeRawStringPointer())->clear();
  }
  sender_site_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionRedirectResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionRedirectResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes output = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_output()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionRedirectResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionRedirectResponse)
  return false;
#undef DO_
}

void TransactionRedirectResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionRedirectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required bytes output = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->output(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionRedirectResponse)
}

::google::protobuf::uint8* TransactionRedirectResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionRedirectResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required bytes output = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->output(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionRedirectResponse)
  return target;
}

size_t TransactionRedirectResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionRedirectResponse)
  size_t total_size = 0;

  if (has_output()) {
    // required bytes output = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->output());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  return total_size;
}
size_t TransactionRedirectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionRedirectResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes output = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->output());

    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionRedirectResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionRedirectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionRedirectResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionRedirectResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionRedirectResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionRedirectResponse)
    MergeFrom(*source);
  }
}

void TransactionRedirectResponse::MergeFrom(const TransactionRedirectResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionRedirectResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_output();
      output_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_);
    }
    if (cached_has_bits & 0x00000002u) {
      sender_site_ = from.sender_site_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionRedirectResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionRedirectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRedirectResponse::CopyFrom(const TransactionRedirectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionRedirectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRedirectResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TransactionRedirectResponse::Swap(TransactionRedirectResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionRedirectResponse::InternalSwap(TransactionRedirectResponse* other) {
  using std::swap;
  output_.Swap(&other->output_);
  swap(sender_site_, other->sender_site_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionRedirectResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionRedirectResponse

// required int32 sender_site = 1;
bool TransactionRedirectResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionRedirectResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionRedirectResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionRedirectResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 TransactionRedirectResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionRedirectResponse.sender_site)
  return sender_site_;
}
void TransactionRedirectResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionRedirectResponse.sender_site)
}

// required bytes output = 2;
bool TransactionRedirectResponse::has_output() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionRedirectResponse::set_has_output() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionRedirectResponse::clear_has_output() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionRedirectResponse::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output();
}
const ::std::string& TransactionRedirectResponse::output() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionRedirectResponse.output)
  return output_.GetNoArena();
}
void TransactionRedirectResponse::set_output(const ::std::string& value) {
  set_has_output();
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionRedirectResponse.output)
}
#if LANG_CXX11
void TransactionRedirectResponse::set_output(::std::string&& value) {
  set_has_output();
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.TransactionRedirectResponse.output)
}
#endif
void TransactionRedirectResponse::set_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_output();
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.TransactionRedirectResponse.output)
}
void TransactionRedirectResponse::set_output(const void* value, size_t size) {
  set_has_output();
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.TransactionRedirectResponse.output)
}
::std::string* TransactionRedirectResponse::mutable_output() {
  set_has_output();
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionRedirectResponse.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionRedirectResponse::release_output() {
  // @@protoc_insertion_point(field_release:peloton.networking.TransactionRedirectResponse.output)
  clear_has_output();
  return output_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionRedirectResponse::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    set_has_output();
  } else {
    clear_has_output();
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.TransactionRedirectResponse.output)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionDebugRequest::kSenderSiteFieldNumber;
const int TransactionDebugRequest::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionDebugRequest::TransactionDebugRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionDebugRequest)
}
TransactionDebugRequest::TransactionDebugRequest(const TransactionDebugRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_site_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(sender_site_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionDebugRequest)
}

void TransactionDebugRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_site_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(sender_site_));
}

TransactionDebugRequest::~TransactionDebugRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionDebugRequest)
  SharedDtor();
}

void TransactionDebugRequest::SharedDtor() {
}

void TransactionDebugRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionDebugRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionDebugRequest& TransactionDebugRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionDebugRequest* TransactionDebugRequest::New(::google::protobuf::Arena* arena) const {
  TransactionDebugRequest* n = new TransactionDebugRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionDebugRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionDebugRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sender_site_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(sender_site_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionDebugRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionDebugRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionDebugRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionDebugRequest)
  return false;
#undef DO_
}

void TransactionDebugRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionDebugRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionDebugRequest)
}

::google::protobuf::uint8* TransactionDebugRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionDebugRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionDebugRequest)
  return target;
}

size_t TransactionDebugRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionDebugRequest)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  return total_size;
}
size_t TransactionDebugRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionDebugRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionDebugRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionDebugRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionDebugRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionDebugRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionDebugRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionDebugRequest)
    MergeFrom(*source);
  }
}

void TransactionDebugRequest::MergeFrom(const TransactionDebugRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionDebugRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sender_site_ = from.sender_site_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionDebugRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionDebugRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionDebugRequest::CopyFrom(const TransactionDebugRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionDebugRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionDebugRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TransactionDebugRequest::Swap(TransactionDebugRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionDebugRequest::InternalSwap(TransactionDebugRequest* other) {
  using std::swap;
  swap(transaction_id_, other->transaction_id_);
  swap(sender_site_, other->sender_site_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionDebugRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionDebugRequest

// required int32 sender_site = 1;
bool TransactionDebugRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionDebugRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionDebugRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionDebugRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 TransactionDebugRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionDebugRequest.sender_site)
  return sender_site_;
}
void TransactionDebugRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionDebugRequest.sender_site)
}

// required int64 transaction_id = 2;
bool TransactionDebugRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionDebugRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionDebugRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionDebugRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 TransactionDebugRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionDebugRequest.transaction_id)
  return transaction_id_;
}
void TransactionDebugRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionDebugRequest.transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TransactionDebugResponse::kSenderSiteFieldNumber;
const int TransactionDebugResponse::kStatusFieldNumber;
const int TransactionDebugResponse::kDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TransactionDebugResponse::TransactionDebugResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TransactionDebugResponse)
}
TransactionDebugResponse::TransactionDebugResponse(const TransactionDebugResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_debug()) {
    debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
  }
  ::memcpy(&sender_site_, &from.sender_site_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&sender_site_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TransactionDebugResponse)
}

void TransactionDebugResponse::SharedCtor() {
  _cached_size_ = 0;
  debug_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sender_site_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&sender_site_)) + sizeof(status_));
}

TransactionDebugResponse::~TransactionDebugResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.TransactionDebugResponse)
  SharedDtor();
}

void TransactionDebugResponse::SharedDtor() {
  debug_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TransactionDebugResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionDebugResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TransactionDebugResponse& TransactionDebugResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TransactionDebugResponse* TransactionDebugResponse::New(::google::protobuf::Arena* arena) const {
  TransactionDebugResponse* n = new TransactionDebugResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransactionDebugResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TransactionDebugResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_debug()) {
    GOOGLE_DCHECK(!debug_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*debug_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&sender_site_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&sender_site_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TransactionDebugResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TransactionDebugResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string debug = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->debug().data(), static_cast<int>(this->debug().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "peloton.networking.TransactionDebugResponse.debug");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TransactionDebugResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TransactionDebugResponse)
  return false;
#undef DO_
}

void TransactionDebugResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TransactionDebugResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.networking.Status status = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required string debug = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peloton.networking.TransactionDebugResponse.debug");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->debug(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TransactionDebugResponse)
}

::google::protobuf::uint8* TransactionDebugResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TransactionDebugResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.networking.Status status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required string debug = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->debug().data(), static_cast<int>(this->debug().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "peloton.networking.TransactionDebugResponse.debug");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->debug(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TransactionDebugResponse)
  return target;
}

size_t TransactionDebugResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TransactionDebugResponse)
  size_t total_size = 0;

  if (has_debug()) {
    // required string debug = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->debug());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t TransactionDebugResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TransactionDebugResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string debug = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->debug());

    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required .peloton.networking.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionDebugResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TransactionDebugResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionDebugResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TransactionDebugResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TransactionDebugResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TransactionDebugResponse)
    MergeFrom(*source);
  }
}

void TransactionDebugResponse::MergeFrom(const TransactionDebugResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TransactionDebugResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_debug();
      debug_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.debug_);
    }
    if (cached_has_bits & 0x00000002u) {
      sender_site_ = from.sender_site_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TransactionDebugResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TransactionDebugResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionDebugResponse::CopyFrom(const TransactionDebugResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TransactionDebugResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionDebugResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void TransactionDebugResponse::Swap(TransactionDebugResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransactionDebugResponse::InternalSwap(TransactionDebugResponse* other) {
  using std::swap;
  debug_.Swap(&other->debug_);
  swap(sender_site_, other->sender_site_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransactionDebugResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransactionDebugResponse

// required int32 sender_site = 1;
bool TransactionDebugResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TransactionDebugResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000002u;
}
void TransactionDebugResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000002u;
}
void TransactionDebugResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 TransactionDebugResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionDebugResponse.sender_site)
  return sender_site_;
}
void TransactionDebugResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionDebugResponse.sender_site)
}

// required .peloton.networking.Status status = 2;
bool TransactionDebugResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TransactionDebugResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void TransactionDebugResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void TransactionDebugResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status TransactionDebugResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionDebugResponse.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void TransactionDebugResponse::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionDebugResponse.status)
}

// required string debug = 3;
bool TransactionDebugResponse::has_debug() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TransactionDebugResponse::set_has_debug() {
  _has_bits_[0] |= 0x00000001u;
}
void TransactionDebugResponse::clear_has_debug() {
  _has_bits_[0] &= ~0x00000001u;
}
void TransactionDebugResponse::clear_debug() {
  debug_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_debug();
}
const ::std::string& TransactionDebugResponse::debug() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TransactionDebugResponse.debug)
  return debug_.GetNoArena();
}
void TransactionDebugResponse::set_debug(const ::std::string& value) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.TransactionDebugResponse.debug)
}
#if LANG_CXX11
void TransactionDebugResponse::set_debug(::std::string&& value) {
  set_has_debug();
  debug_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.TransactionDebugResponse.debug)
}
#endif
void TransactionDebugResponse::set_debug(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.TransactionDebugResponse.debug)
}
void TransactionDebugResponse::set_debug(const char* value, size_t size) {
  set_has_debug();
  debug_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.TransactionDebugResponse.debug)
}
::std::string* TransactionDebugResponse::mutable_debug() {
  set_has_debug();
  // @@protoc_insertion_point(field_mutable:peloton.networking.TransactionDebugResponse.debug)
  return debug_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TransactionDebugResponse::release_debug() {
  // @@protoc_insertion_point(field_release:peloton.networking.TransactionDebugResponse.debug)
  clear_has_debug();
  return debug_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TransactionDebugResponse::set_allocated_debug(::std::string* debug) {
  if (debug != NULL) {
    set_has_debug();
  } else {
    clear_has_debug();
  }
  debug_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), debug);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.TransactionDebugResponse.debug)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendDataRequest::kTransactionIdFieldNumber;
const int SendDataRequest::kSenderSiteFieldNumber;
const int SendDataRequest::kDepIdFieldNumber;
const int SendDataRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendDataRequest::SendDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.SendDataRequest)
}
SendDataRequest::SendDataRequest(const SendDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dep_id_(from.dep_id_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_site_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(sender_site_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.SendDataRequest)
}

void SendDataRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_site_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(sender_site_));
}

SendDataRequest::~SendDataRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.SendDataRequest)
  SharedDtor();
}

void SendDataRequest::SharedDtor() {
}

void SendDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendDataRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendDataRequest& SendDataRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendDataRequest* SendDataRequest::New(::google::protobuf::Arena* arena) const {
  SendDataRequest* n = new SendDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.SendDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dep_id_.Clear();
  data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sender_site_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(sender_site_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SendDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.SendDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sender_site = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 dep_id = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dep_id())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_dep_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.SendDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.SendDataRequest)
  return false;
#undef DO_
}

void SendDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.SendDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // required int32 sender_site = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sender_site(), output);
  }

  // repeated int32 dep_id = 3 [packed = true];
  if (this->dep_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _dep_id_cached_byte_size_));
  }
  for (int i = 0, n = this->dep_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->dep_id(i), output);
  }

  // repeated bytes data = 4;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.SendDataRequest)
}

::google::protobuf::uint8* SendDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.SendDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // required int32 sender_site = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sender_site(), target);
  }

  // repeated int32 dep_id = 3 [packed = true];
  if (this->dep_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _dep_id_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->dep_id_, target);
  }

  // repeated bytes data = 4;
  for (int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.SendDataRequest)
  return target;
}

size_t SendDataRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.SendDataRequest)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  return total_size;
}
size_t SendDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.SendDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 sender_site = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 dep_id = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->dep_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dep_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes data = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  for (int i = 0, n = this->data_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.SendDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.SendDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.SendDataRequest)
    MergeFrom(*source);
  }
}

void SendDataRequest::MergeFrom(const SendDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.SendDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dep_id_.MergeFrom(from.dep_id_);
  data_.MergeFrom(from.data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sender_site_ = from.sender_site_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.SendDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendDataRequest::CopyFrom(const SendDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.SendDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SendDataRequest::Swap(SendDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendDataRequest::InternalSwap(SendDataRequest* other) {
  using std::swap;
  dep_id_.InternalSwap(&other->dep_id_);
  data_.InternalSwap(&other->data_);
  swap(transaction_id_, other->transaction_id_);
  swap(sender_site_, other->sender_site_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendDataRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendDataRequest

// required int64 transaction_id = 1;
bool SendDataRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendDataRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SendDataRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendDataRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 SendDataRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.SendDataRequest.transaction_id)
  return transaction_id_;
}
void SendDataRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.SendDataRequest.transaction_id)
}

// required int32 sender_site = 2;
bool SendDataRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SendDataRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000002u;
}
void SendDataRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000002u;
}
void SendDataRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 SendDataRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.SendDataRequest.sender_site)
  return sender_site_;
}
void SendDataRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.SendDataRequest.sender_site)
}

// repeated int32 dep_id = 3 [packed = true];
int SendDataRequest::dep_id_size() const {
  return dep_id_.size();
}
void SendDataRequest::clear_dep_id() {
  dep_id_.Clear();
}
::google::protobuf::int32 SendDataRequest::dep_id(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.SendDataRequest.dep_id)
  return dep_id_.Get(index);
}
void SendDataRequest::set_dep_id(int index, ::google::protobuf::int32 value) {
  dep_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.SendDataRequest.dep_id)
}
void SendDataRequest::add_dep_id(::google::protobuf::int32 value) {
  dep_id_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.SendDataRequest.dep_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SendDataRequest::dep_id() const {
  // @@protoc_insertion_point(field_list:peloton.networking.SendDataRequest.dep_id)
  return dep_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SendDataRequest::mutable_dep_id() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.SendDataRequest.dep_id)
  return &dep_id_;
}

// repeated bytes data = 4;
int SendDataRequest::data_size() const {
  return data_.size();
}
void SendDataRequest::clear_data() {
  data_.Clear();
}
const ::std::string& SendDataRequest::data(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.SendDataRequest.data)
  return data_.Get(index);
}
::std::string* SendDataRequest::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.networking.SendDataRequest.data)
  return data_.Mutable(index);
}
void SendDataRequest::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.SendDataRequest.data)
  data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void SendDataRequest::set_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.SendDataRequest.data)
  data_.Mutable(index)->assign(std::move(value));
}
#endif
void SendDataRequest::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peloton.networking.SendDataRequest.data)
}
void SendDataRequest::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.SendDataRequest.data)
}
::std::string* SendDataRequest::add_data() {
  // @@protoc_insertion_point(field_add_mutable:peloton.networking.SendDataRequest.data)
  return data_.Add();
}
void SendDataRequest::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peloton.networking.SendDataRequest.data)
}
#if LANG_CXX11
void SendDataRequest::add_data(::std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:peloton.networking.SendDataRequest.data)
}
#endif
void SendDataRequest::add_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peloton.networking.SendDataRequest.data)
}
void SendDataRequest::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peloton.networking.SendDataRequest.data)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
SendDataRequest::data() const {
  // @@protoc_insertion_point(field_list:peloton.networking.SendDataRequest.data)
  return data_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
SendDataRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.SendDataRequest.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendDataResponse::kTransactionIdFieldNumber;
const int SendDataResponse::kPartitionsFieldNumber;
const int SendDataResponse::kSenderSiteFieldNumber;
const int SendDataResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendDataResponse::SendDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.SendDataResponse)
}
SendDataResponse::SendDataResponse(const SendDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      partitions_(from.partitions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.SendDataResponse)
}

void SendDataResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
}

SendDataResponse::~SendDataResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.SendDataResponse)
  SharedDtor();
}

void SendDataResponse::SharedDtor() {
}

void SendDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendDataResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendDataResponse& SendDataResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendDataResponse* SendDataResponse::New(::google::protobuf::Arena* arena) const {
  SendDataResponse* n = new SendDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.SendDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partitions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SendDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.SendDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 transaction_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 partitions = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_partitions())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_partitions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 sender_site = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.SendDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.SendDataResponse)
  return false;
#undef DO_
}

void SendDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.SendDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transaction_id(), output);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _partitions_cached_byte_size_));
  }
  for (int i = 0, n = this->partitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->partitions(i), output);
  }

  // required int32 sender_site = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sender_site(), output);
  }

  // required .peloton.networking.Status status = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.SendDataResponse)
}

::google::protobuf::uint8* SendDataResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.SendDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 transaction_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transaction_id(), target);
  }

  // repeated int32 partitions = 2 [packed = true];
  if (this->partitions_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _partitions_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->partitions_, target);
  }

  // required int32 sender_site = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sender_site(), target);
  }

  // required .peloton.networking.Status status = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.SendDataResponse)
  return target;
}

size_t SendDataResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.SendDataResponse)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t SendDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.SendDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int64 transaction_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 sender_site = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required .peloton.networking.Status status = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 partitions = 2 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->partitions_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partitions_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.SendDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendDataResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendDataResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.SendDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.SendDataResponse)
    MergeFrom(*source);
  }
}

void SendDataResponse::MergeFrom(const SendDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.SendDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partitions_.MergeFrom(from.partitions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sender_site_ = from.sender_site_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.SendDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendDataResponse::CopyFrom(const SendDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.SendDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SendDataResponse::Swap(SendDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendDataResponse::InternalSwap(SendDataResponse* other) {
  using std::swap;
  partitions_.InternalSwap(&other->partitions_);
  swap(transaction_id_, other->transaction_id_);
  swap(sender_site_, other->sender_site_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendDataResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendDataResponse

// required int64 transaction_id = 1;
bool SendDataResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SendDataResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SendDataResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SendDataResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 SendDataResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.SendDataResponse.transaction_id)
  return transaction_id_;
}
void SendDataResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.SendDataResponse.transaction_id)
}

// repeated int32 partitions = 2 [packed = true];
int SendDataResponse::partitions_size() const {
  return partitions_.size();
}
void SendDataResponse::clear_partitions() {
  partitions_.Clear();
}
::google::protobuf::int32 SendDataResponse::partitions(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.SendDataResponse.partitions)
  return partitions_.Get(index);
}
void SendDataResponse::set_partitions(int index, ::google::protobuf::int32 value) {
  partitions_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.SendDataResponse.partitions)
}
void SendDataResponse::add_partitions(::google::protobuf::int32 value) {
  partitions_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.SendDataResponse.partitions)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SendDataResponse::partitions() const {
  // @@protoc_insertion_point(field_list:peloton.networking.SendDataResponse.partitions)
  return partitions_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SendDataResponse::mutable_partitions() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.SendDataResponse.partitions)
  return &partitions_;
}

// required int32 sender_site = 3;
bool SendDataResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SendDataResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000002u;
}
void SendDataResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000002u;
}
void SendDataResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 SendDataResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.SendDataResponse.sender_site)
  return sender_site_;
}
void SendDataResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.SendDataResponse.sender_site)
}

// required .peloton.networking.Status status = 4;
bool SendDataResponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SendDataResponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
void SendDataResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void SendDataResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status SendDataResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.SendDataResponse.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void SendDataResponse::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.SendDataResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitializeRequest::kSenderSiteFieldNumber;
const int InitializeRequest::kInstanceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitializeRequest::InitializeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.InitializeRequest)
}
InitializeRequest::InitializeRequest(const InitializeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&instance_id_, &from.instance_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_site_) -
    reinterpret_cast<char*>(&instance_id_)) + sizeof(sender_site_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.InitializeRequest)
}

void InitializeRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&instance_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_site_) -
      reinterpret_cast<char*>(&instance_id_)) + sizeof(sender_site_));
}

InitializeRequest::~InitializeRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.InitializeRequest)
  SharedDtor();
}

void InitializeRequest::SharedDtor() {
}

void InitializeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitializeRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitializeRequest& InitializeRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitializeRequest* InitializeRequest::New(::google::protobuf::Arena* arena) const {
  InitializeRequest* n = new InitializeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitializeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.InitializeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&instance_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sender_site_) -
        reinterpret_cast<char*>(&instance_id_)) + sizeof(sender_site_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InitializeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.InitializeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 instance_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_instance_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instance_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.InitializeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.InitializeRequest)
  return false;
#undef DO_
}

void InitializeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.InitializeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 instance_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->instance_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.InitializeRequest)
}

::google::protobuf::uint8* InitializeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.InitializeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 instance_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->instance_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.InitializeRequest)
  return target;
}

size_t InitializeRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.InitializeRequest)
  size_t total_size = 0;

  if (has_instance_id()) {
    // required int64 instance_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->instance_id());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  return total_size;
}
size_t InitializeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.InitializeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 instance_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->instance_id());

    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitializeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.InitializeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InitializeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitializeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.InitializeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.InitializeRequest)
    MergeFrom(*source);
  }
}

void InitializeRequest::MergeFrom(const InitializeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.InitializeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      instance_id_ = from.instance_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sender_site_ = from.sender_site_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InitializeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.InitializeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitializeRequest::CopyFrom(const InitializeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.InitializeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InitializeRequest::Swap(InitializeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitializeRequest::InternalSwap(InitializeRequest* other) {
  using std::swap;
  swap(instance_id_, other->instance_id_);
  swap(sender_site_, other->sender_site_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitializeRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitializeRequest

// required int32 sender_site = 1;
bool InitializeRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitializeRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000002u;
}
void InitializeRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitializeRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 InitializeRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.InitializeRequest.sender_site)
  return sender_site_;
}
void InitializeRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.InitializeRequest.sender_site)
}

// required int64 instance_id = 2;
bool InitializeRequest::has_instance_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitializeRequest::set_has_instance_id() {
  _has_bits_[0] |= 0x00000001u;
}
void InitializeRequest::clear_has_instance_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitializeRequest::clear_instance_id() {
  instance_id_ = GOOGLE_LONGLONG(0);
  clear_has_instance_id();
}
::google::protobuf::int64 InitializeRequest::instance_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.InitializeRequest.instance_id)
  return instance_id_;
}
void InitializeRequest::set_instance_id(::google::protobuf::int64 value) {
  set_has_instance_id();
  instance_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.InitializeRequest.instance_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitializeResponse::kSenderSiteFieldNumber;
const int InitializeResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitializeResponse::InitializeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.InitializeResponse)
}
InitializeResponse::InitializeResponse(const InitializeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sender_site_, &from.sender_site_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&sender_site_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.InitializeResponse)
}

void InitializeResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sender_site_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&sender_site_)) + sizeof(status_));
}

InitializeResponse::~InitializeResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.InitializeResponse)
  SharedDtor();
}

void InitializeResponse::SharedDtor() {
}

void InitializeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitializeResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitializeResponse& InitializeResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitializeResponse* InitializeResponse::New(::google::protobuf::Arena* arena) const {
  InitializeResponse* n = new InitializeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitializeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.InitializeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&sender_site_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&sender_site_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InitializeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.InitializeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.InitializeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.InitializeResponse)
  return false;
#undef DO_
}

void InitializeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.InitializeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.networking.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.InitializeResponse)
}

::google::protobuf::uint8* InitializeResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.InitializeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.networking.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.InitializeResponse)
  return target;
}

size_t InitializeResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.InitializeResponse)
  size_t total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t InitializeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.InitializeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required .peloton.networking.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitializeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.InitializeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InitializeResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitializeResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.InitializeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.InitializeResponse)
    MergeFrom(*source);
  }
}

void InitializeResponse::MergeFrom(const InitializeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.InitializeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sender_site_ = from.sender_site_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InitializeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.InitializeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitializeResponse::CopyFrom(const InitializeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.InitializeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void InitializeResponse::Swap(InitializeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitializeResponse::InternalSwap(InitializeResponse* other) {
  using std::swap;
  swap(sender_site_, other->sender_site_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitializeResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitializeResponse

// required int32 sender_site = 1;
bool InitializeResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitializeResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void InitializeResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitializeResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 InitializeResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.InitializeResponse.sender_site)
  return sender_site_;
}
void InitializeResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.InitializeResponse.sender_site)
}

// required .peloton.networking.Status status = 2;
bool InitializeResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InitializeResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void InitializeResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void InitializeResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status InitializeResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.InitializeResponse.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void InitializeResponse::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.InitializeResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownPrepareRequest::kSenderSiteFieldNumber;
const int ShutdownPrepareRequest::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownPrepareRequest::ShutdownPrepareRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.ShutdownPrepareRequest)
}
ShutdownPrepareRequest::ShutdownPrepareRequest(const ShutdownPrepareRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error()) {
    error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  sender_site_ = from.sender_site_;
  // @@protoc_insertion_point(copy_constructor:peloton.networking.ShutdownPrepareRequest)
}

void ShutdownPrepareRequest::SharedCtor() {
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_site_ = 0;
}

ShutdownPrepareRequest::~ShutdownPrepareRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.ShutdownPrepareRequest)
  SharedDtor();
}

void ShutdownPrepareRequest::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ShutdownPrepareRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownPrepareRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShutdownPrepareRequest& ShutdownPrepareRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShutdownPrepareRequest* ShutdownPrepareRequest::New(::google::protobuf::Arena* arena) const {
  ShutdownPrepareRequest* n = new ShutdownPrepareRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownPrepareRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.ShutdownPrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_error()) {
    GOOGLE_DCHECK(!error_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*error_.UnsafeRawStringPointer())->clear();
  }
  sender_site_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShutdownPrepareRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.ShutdownPrepareRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.ShutdownPrepareRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.ShutdownPrepareRequest)
  return false;
#undef DO_
}

void ShutdownPrepareRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.ShutdownPrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // optional bytes error = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.ShutdownPrepareRequest)
}

::google::protobuf::uint8* ShutdownPrepareRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.ShutdownPrepareRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // optional bytes error = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.ShutdownPrepareRequest)
  return target;
}

size_t ShutdownPrepareRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.ShutdownPrepareRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }
  // optional bytes error = 2;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownPrepareRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.ShutdownPrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownPrepareRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownPrepareRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.ShutdownPrepareRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.ShutdownPrepareRequest)
    MergeFrom(*source);
  }
}

void ShutdownPrepareRequest::MergeFrom(const ShutdownPrepareRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.ShutdownPrepareRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (cached_has_bits & 0x00000002u) {
      sender_site_ = from.sender_site_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShutdownPrepareRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.ShutdownPrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownPrepareRequest::CopyFrom(const ShutdownPrepareRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.ShutdownPrepareRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownPrepareRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void ShutdownPrepareRequest::Swap(ShutdownPrepareRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownPrepareRequest::InternalSwap(ShutdownPrepareRequest* other) {
  using std::swap;
  error_.Swap(&other->error_);
  swap(sender_site_, other->sender_site_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownPrepareRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShutdownPrepareRequest

// required int32 sender_site = 1;
bool ShutdownPrepareRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShutdownPrepareRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000002u;
}
void ShutdownPrepareRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShutdownPrepareRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 ShutdownPrepareRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.ShutdownPrepareRequest.sender_site)
  return sender_site_;
}
void ShutdownPrepareRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.ShutdownPrepareRequest.sender_site)
}

// optional bytes error = 2;
bool ShutdownPrepareRequest::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShutdownPrepareRequest::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void ShutdownPrepareRequest::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShutdownPrepareRequest::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& ShutdownPrepareRequest::error() const {
  // @@protoc_insertion_point(field_get:peloton.networking.ShutdownPrepareRequest.error)
  return error_.GetNoArena();
}
void ShutdownPrepareRequest::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.ShutdownPrepareRequest.error)
}
#if LANG_CXX11
void ShutdownPrepareRequest::set_error(::std::string&& value) {
  set_has_error();
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.ShutdownPrepareRequest.error)
}
#endif
void ShutdownPrepareRequest::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.ShutdownPrepareRequest.error)
}
void ShutdownPrepareRequest::set_error(const void* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.ShutdownPrepareRequest.error)
}
::std::string* ShutdownPrepareRequest::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:peloton.networking.ShutdownPrepareRequest.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ShutdownPrepareRequest::release_error() {
  // @@protoc_insertion_point(field_release:peloton.networking.ShutdownPrepareRequest.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ShutdownPrepareRequest::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.ShutdownPrepareRequest.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownPrepareResponse::kSenderSiteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownPrepareResponse::ShutdownPrepareResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.ShutdownPrepareResponse)
}
ShutdownPrepareResponse::ShutdownPrepareResponse(const ShutdownPrepareResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_site_ = from.sender_site_;
  // @@protoc_insertion_point(copy_constructor:peloton.networking.ShutdownPrepareResponse)
}

void ShutdownPrepareResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
}

ShutdownPrepareResponse::~ShutdownPrepareResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.ShutdownPrepareResponse)
  SharedDtor();
}

void ShutdownPrepareResponse::SharedDtor() {
}

void ShutdownPrepareResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownPrepareResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShutdownPrepareResponse& ShutdownPrepareResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShutdownPrepareResponse* ShutdownPrepareResponse::New(::google::protobuf::Arena* arena) const {
  ShutdownPrepareResponse* n = new ShutdownPrepareResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownPrepareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.ShutdownPrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_site_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShutdownPrepareResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.ShutdownPrepareResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.ShutdownPrepareResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.ShutdownPrepareResponse)
  return false;
#undef DO_
}

void ShutdownPrepareResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.ShutdownPrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.ShutdownPrepareResponse)
}

::google::protobuf::uint8* ShutdownPrepareResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.ShutdownPrepareResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.ShutdownPrepareResponse)
  return target;
}

size_t ShutdownPrepareResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.ShutdownPrepareResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownPrepareResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.ShutdownPrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownPrepareResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownPrepareResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.ShutdownPrepareResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.ShutdownPrepareResponse)
    MergeFrom(*source);
  }
}

void ShutdownPrepareResponse::MergeFrom(const ShutdownPrepareResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.ShutdownPrepareResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sender_site()) {
    set_sender_site(from.sender_site());
  }
}

void ShutdownPrepareResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.ShutdownPrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownPrepareResponse::CopyFrom(const ShutdownPrepareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.ShutdownPrepareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownPrepareResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ShutdownPrepareResponse::Swap(ShutdownPrepareResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownPrepareResponse::InternalSwap(ShutdownPrepareResponse* other) {
  using std::swap;
  swap(sender_site_, other->sender_site_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownPrepareResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShutdownPrepareResponse

// required int32 sender_site = 1;
bool ShutdownPrepareResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShutdownPrepareResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void ShutdownPrepareResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShutdownPrepareResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 ShutdownPrepareResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.ShutdownPrepareResponse.sender_site)
  return sender_site_;
}
void ShutdownPrepareResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.ShutdownPrepareResponse.sender_site)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownRequest::kSenderSiteFieldNumber;
const int ShutdownRequest::kExitStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownRequest::ShutdownRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.ShutdownRequest)
}
ShutdownRequest::ShutdownRequest(const ShutdownRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sender_site_, &from.sender_site_,
    static_cast<size_t>(reinterpret_cast<char*>(&exit_status_) -
    reinterpret_cast<char*>(&sender_site_)) + sizeof(exit_status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.ShutdownRequest)
}

void ShutdownRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sender_site_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exit_status_) -
      reinterpret_cast<char*>(&sender_site_)) + sizeof(exit_status_));
}

ShutdownRequest::~ShutdownRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.ShutdownRequest)
  SharedDtor();
}

void ShutdownRequest::SharedDtor() {
}

void ShutdownRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShutdownRequest& ShutdownRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShutdownRequest* ShutdownRequest::New(::google::protobuf::Arena* arena) const {
  ShutdownRequest* n = new ShutdownRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.ShutdownRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&sender_site_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exit_status_) -
        reinterpret_cast<char*>(&sender_site_)) + sizeof(exit_status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShutdownRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.ShutdownRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 exit_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_exit_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exit_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.ShutdownRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.ShutdownRequest)
  return false;
#undef DO_
}

void ShutdownRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.ShutdownRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int32 exit_status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exit_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.ShutdownRequest)
}

::google::protobuf::uint8* ShutdownRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.ShutdownRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int32 exit_status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exit_status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.ShutdownRequest)
  return target;
}

size_t ShutdownRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.ShutdownRequest)
  size_t total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_exit_status()) {
    // required int32 exit_status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exit_status());
  }

  return total_size;
}
size_t ShutdownRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.ShutdownRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required int32 exit_status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->exit_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.ShutdownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.ShutdownRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.ShutdownRequest)
    MergeFrom(*source);
  }
}

void ShutdownRequest::MergeFrom(const ShutdownRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.ShutdownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sender_site_ = from.sender_site_;
    }
    if (cached_has_bits & 0x00000002u) {
      exit_status_ = from.exit_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShutdownRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.ShutdownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownRequest::CopyFrom(const ShutdownRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.ShutdownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ShutdownRequest::Swap(ShutdownRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownRequest::InternalSwap(ShutdownRequest* other) {
  using std::swap;
  swap(sender_site_, other->sender_site_);
  swap(exit_status_, other->exit_status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShutdownRequest

// required int32 sender_site = 1;
bool ShutdownRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShutdownRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void ShutdownRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShutdownRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 ShutdownRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.ShutdownRequest.sender_site)
  return sender_site_;
}
void ShutdownRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.ShutdownRequest.sender_site)
}

// required int32 exit_status = 2;
bool ShutdownRequest::has_exit_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShutdownRequest::set_has_exit_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ShutdownRequest::clear_has_exit_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShutdownRequest::clear_exit_status() {
  exit_status_ = 0;
  clear_has_exit_status();
}
::google::protobuf::int32 ShutdownRequest::exit_status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.ShutdownRequest.exit_status)
  return exit_status_;
}
void ShutdownRequest::set_exit_status(::google::protobuf::int32 value) {
  set_has_exit_status();
  exit_status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.ShutdownRequest.exit_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownResponse::kSenderSiteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownResponse::ShutdownResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.ShutdownResponse)
}
ShutdownResponse::ShutdownResponse(const ShutdownResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sender_site_ = from.sender_site_;
  // @@protoc_insertion_point(copy_constructor:peloton.networking.ShutdownResponse)
}

void ShutdownResponse::SharedCtor() {
  _cached_size_ = 0;
  sender_site_ = 0;
}

ShutdownResponse::~ShutdownResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.ShutdownResponse)
  SharedDtor();
}

void ShutdownResponse::SharedDtor() {
}

void ShutdownResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShutdownResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ShutdownResponse& ShutdownResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

ShutdownResponse* ShutdownResponse::New(::google::protobuf::Arena* arena) const {
  ShutdownResponse* n = new ShutdownResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShutdownResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.ShutdownResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_site_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ShutdownResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.ShutdownResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.ShutdownResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.ShutdownResponse)
  return false;
#undef DO_
}

void ShutdownResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.ShutdownResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.ShutdownResponse)
}

::google::protobuf::uint8* ShutdownResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.ShutdownResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.ShutdownResponse)
  return target;
}

size_t ShutdownResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.ShutdownResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 sender_site = 1;
  if (has_sender_site()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShutdownResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.ShutdownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ShutdownResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.ShutdownResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.ShutdownResponse)
    MergeFrom(*source);
  }
}

void ShutdownResponse::MergeFrom(const ShutdownResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.ShutdownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sender_site()) {
    set_sender_site(from.sender_site());
  }
}

void ShutdownResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.ShutdownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownResponse::CopyFrom(const ShutdownResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.ShutdownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ShutdownResponse::Swap(ShutdownResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownResponse::InternalSwap(ShutdownResponse* other) {
  using std::swap;
  swap(sender_site_, other->sender_site_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShutdownResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShutdownResponse

// required int32 sender_site = 1;
bool ShutdownResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShutdownResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void ShutdownResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShutdownResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 ShutdownResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.ShutdownResponse.sender_site)
  return sender_site_;
}
void ShutdownResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.ShutdownResponse.sender_site)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatRequest::kSenderSiteFieldNumber;
const int HeartbeatRequest::kLastTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatRequest::HeartbeatRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_transaction_id_, &from.last_transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_site_) -
    reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(sender_site_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.HeartbeatRequest)
}

void HeartbeatRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&last_transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_site_) -
      reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(sender_site_));
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.HeartbeatRequest)
  SharedDtor();
}

void HeartbeatRequest::SharedDtor() {
}

void HeartbeatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartbeatRequest& HeartbeatRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartbeatRequest* HeartbeatRequest::New(::google::protobuf::Arena* arena) const {
  HeartbeatRequest* n = new HeartbeatRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.HeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&last_transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sender_site_) -
        reinterpret_cast<char*>(&last_transaction_id_)) + sizeof(sender_site_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartbeatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.HeartbeatRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 last_transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_last_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.HeartbeatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.HeartbeatRequest)
  return false;
#undef DO_
}

void HeartbeatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.HeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 last_transaction_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->last_transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.HeartbeatRequest)
}

::google::protobuf::uint8* HeartbeatRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.HeartbeatRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 last_transaction_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->last_transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.HeartbeatRequest)
  return target;
}

size_t HeartbeatRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.HeartbeatRequest)
  size_t total_size = 0;

  if (has_last_transaction_id()) {
    // required int64 last_transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_transaction_id());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  return total_size;
}
size_t HeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.HeartbeatRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 last_transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_transaction_id());

    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartbeatRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.HeartbeatRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.HeartbeatRequest)
    MergeFrom(*source);
  }
}

void HeartbeatRequest::MergeFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      last_transaction_id_ = from.last_transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sender_site_ = from.sender_site_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartbeatRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void HeartbeatRequest::Swap(HeartbeatRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  using std::swap;
  swap(last_transaction_id_, other->last_transaction_id_);
  swap(sender_site_, other->sender_site_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartbeatRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartbeatRequest

// required int32 sender_site = 1;
bool HeartbeatRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeartbeatRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000002u;
}
void HeartbeatRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeartbeatRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 HeartbeatRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.HeartbeatRequest.sender_site)
  return sender_site_;
}
void HeartbeatRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.HeartbeatRequest.sender_site)
}

// required int64 last_transaction_id = 2;
bool HeartbeatRequest::has_last_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartbeatRequest::set_has_last_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartbeatRequest::clear_has_last_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartbeatRequest::clear_last_transaction_id() {
  last_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_last_transaction_id();
}
::google::protobuf::int64 HeartbeatRequest::last_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.HeartbeatRequest.last_transaction_id)
  return last_transaction_id_;
}
void HeartbeatRequest::set_last_transaction_id(::google::protobuf::int64 value) {
  set_has_last_transaction_id();
  last_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.HeartbeatRequest.last_transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HeartbeatResponse::kSenderSiteFieldNumber;
const int HeartbeatResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HeartbeatResponse::HeartbeatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sender_site_, &from.sender_site_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&sender_site_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.HeartbeatResponse)
}

void HeartbeatResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sender_site_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&sender_site_)) + sizeof(status_));
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.HeartbeatResponse)
  SharedDtor();
}

void HeartbeatResponse::SharedDtor() {
}

void HeartbeatResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartbeatResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HeartbeatResponse& HeartbeatResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

HeartbeatResponse* HeartbeatResponse::New(::google::protobuf::Arena* arena) const {
  HeartbeatResponse* n = new HeartbeatResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.HeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&sender_site_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&sender_site_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HeartbeatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.HeartbeatResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.HeartbeatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.HeartbeatResponse)
  return false;
#undef DO_
}

void HeartbeatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.HeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.networking.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.HeartbeatResponse)
}

::google::protobuf::uint8* HeartbeatResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.HeartbeatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.networking.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.HeartbeatResponse)
  size_t total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.HeartbeatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required .peloton.networking.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartbeatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartbeatResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartbeatResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.HeartbeatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.HeartbeatResponse)
    MergeFrom(*source);
  }
}

void HeartbeatResponse::MergeFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sender_site_ = from.sender_site_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartbeatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void HeartbeatResponse::Swap(HeartbeatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  swap(sender_site_, other->sender_site_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartbeatResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartbeatResponse

// required int32 sender_site = 1;
bool HeartbeatResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartbeatResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartbeatResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartbeatResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 HeartbeatResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.HeartbeatResponse.sender_site)
  return sender_site_;
}
void HeartbeatResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.HeartbeatResponse.sender_site)
}

// required .peloton.networking.Status status = 2;
bool HeartbeatResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HeartbeatResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void HeartbeatResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void HeartbeatResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status HeartbeatResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.HeartbeatResponse.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void HeartbeatResponse::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.HeartbeatResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnevictDataRequest::kSenderSiteFieldNumber;
const int UnevictDataRequest::kTransactionIdFieldNumber;
const int UnevictDataRequest::kPartitionIdFieldNumber;
const int UnevictDataRequest::kTableIdFieldNumber;
const int UnevictDataRequest::kBlockIdsFieldNumber;
const int UnevictDataRequest::kTupleOffsetsFieldNumber;
const int UnevictDataRequest::kNewTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnevictDataRequest::UnevictDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.UnevictDataRequest)
}
UnevictDataRequest::UnevictDataRequest(const UnevictDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      block_ids_(from.block_ids_),
      tuple_offsets_(from.tuple_offsets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&transaction_id_, &from.transaction_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&table_id_) -
    reinterpret_cast<char*>(&transaction_id_)) + sizeof(table_id_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.UnevictDataRequest)
}

void UnevictDataRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&transaction_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_id_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(table_id_));
}

UnevictDataRequest::~UnevictDataRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.UnevictDataRequest)
  SharedDtor();
}

void UnevictDataRequest::SharedDtor() {
}

void UnevictDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnevictDataRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnevictDataRequest& UnevictDataRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnevictDataRequest* UnevictDataRequest::New(::google::protobuf::Arena* arena) const {
  UnevictDataRequest* n = new UnevictDataRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnevictDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.UnevictDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_ids_.Clear();
  tuple_offsets_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    ::memset(&transaction_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&table_id_) -
        reinterpret_cast<char*>(&transaction_id_)) + sizeof(table_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnevictDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.UnevictDataRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 partition_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_partition_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 table_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_table_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 block_ids = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_block_ids())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_block_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 tuple_offsets = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_tuple_offsets())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50u, input, this->mutable_tuple_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 new_transaction_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_new_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &new_transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.UnevictDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.UnevictDataRequest)
  return false;
#undef DO_
}

void UnevictDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.UnevictDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transaction_id(), output);
  }

  // required int32 partition_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->partition_id(), output);
  }

  // required int32 table_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_id(), output);
  }

  // repeated int32 block_ids = 5 [packed = true];
  if (this->block_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _block_ids_cached_byte_size_));
  }
  for (int i = 0, n = this->block_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->block_ids(i), output);
  }

  // repeated int32 tuple_offsets = 6 [packed = true];
  if (this->tuple_offsets_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _tuple_offsets_cached_byte_size_));
  }
  for (int i = 0, n = this->tuple_offsets_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->tuple_offsets(i), output);
  }

  // required int64 new_transaction_id = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->new_transaction_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.UnevictDataRequest)
}

::google::protobuf::uint8* UnevictDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.UnevictDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 transaction_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transaction_id(), target);
  }

  // required int32 partition_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->partition_id(), target);
  }

  // required int32 table_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_id(), target);
  }

  // repeated int32 block_ids = 5 [packed = true];
  if (this->block_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _block_ids_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->block_ids_, target);
  }

  // repeated int32 tuple_offsets = 6 [packed = true];
  if (this->tuple_offsets_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _tuple_offsets_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->tuple_offsets_, target);
  }

  // required int64 new_transaction_id = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->new_transaction_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.UnevictDataRequest)
  return target;
}

size_t UnevictDataRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.UnevictDataRequest)
  size_t total_size = 0;

  if (has_transaction_id()) {
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_partition_id()) {
    // required int32 partition_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());
  }

  if (has_new_transaction_id()) {
    // required int64 new_transaction_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_transaction_id());
  }

  if (has_table_id()) {
    // required int32 table_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table_id());
  }

  return total_size;
}
size_t UnevictDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.UnevictDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required int64 transaction_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required int32 partition_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());

    // required int64 new_transaction_id = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->new_transaction_id());

    // required int32 table_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 block_ids = 5 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->block_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _block_ids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 tuple_offsets = 6 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->tuple_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tuple_offsets_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnevictDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.UnevictDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnevictDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnevictDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.UnevictDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.UnevictDataRequest)
    MergeFrom(*source);
  }
}

void UnevictDataRequest::MergeFrom(const UnevictDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.UnevictDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  block_ids_.MergeFrom(from.block_ids_);
  tuple_offsets_.MergeFrom(from.tuple_offsets_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sender_site_ = from.sender_site_;
    }
    if (cached_has_bits & 0x00000004u) {
      partition_id_ = from.partition_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      new_transaction_id_ = from.new_transaction_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      table_id_ = from.table_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnevictDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.UnevictDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnevictDataRequest::CopyFrom(const UnevictDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.UnevictDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnevictDataRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void UnevictDataRequest::Swap(UnevictDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnevictDataRequest::InternalSwap(UnevictDataRequest* other) {
  using std::swap;
  block_ids_.InternalSwap(&other->block_ids_);
  tuple_offsets_.InternalSwap(&other->tuple_offsets_);
  swap(transaction_id_, other->transaction_id_);
  swap(sender_site_, other->sender_site_);
  swap(partition_id_, other->partition_id_);
  swap(new_transaction_id_, other->new_transaction_id_);
  swap(table_id_, other->table_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnevictDataRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnevictDataRequest

// required int32 sender_site = 1;
bool UnevictDataRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnevictDataRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000002u;
}
void UnevictDataRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnevictDataRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 UnevictDataRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.UnevictDataRequest.sender_site)
  return sender_site_;
}
void UnevictDataRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.UnevictDataRequest.sender_site)
}

// required int64 transaction_id = 2;
bool UnevictDataRequest::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnevictDataRequest::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UnevictDataRequest::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnevictDataRequest::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 UnevictDataRequest::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.UnevictDataRequest.transaction_id)
  return transaction_id_;
}
void UnevictDataRequest::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.UnevictDataRequest.transaction_id)
}

// required int32 partition_id = 3;
bool UnevictDataRequest::has_partition_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UnevictDataRequest::set_has_partition_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UnevictDataRequest::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UnevictDataRequest::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
::google::protobuf::int32 UnevictDataRequest::partition_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.UnevictDataRequest.partition_id)
  return partition_id_;
}
void UnevictDataRequest::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.UnevictDataRequest.partition_id)
}

// required int32 table_id = 4;
bool UnevictDataRequest::has_table_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UnevictDataRequest::set_has_table_id() {
  _has_bits_[0] |= 0x00000010u;
}
void UnevictDataRequest::clear_has_table_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void UnevictDataRequest::clear_table_id() {
  table_id_ = 0;
  clear_has_table_id();
}
::google::protobuf::int32 UnevictDataRequest::table_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.UnevictDataRequest.table_id)
  return table_id_;
}
void UnevictDataRequest::set_table_id(::google::protobuf::int32 value) {
  set_has_table_id();
  table_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.UnevictDataRequest.table_id)
}

// repeated int32 block_ids = 5 [packed = true];
int UnevictDataRequest::block_ids_size() const {
  return block_ids_.size();
}
void UnevictDataRequest::clear_block_ids() {
  block_ids_.Clear();
}
::google::protobuf::int32 UnevictDataRequest::block_ids(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.UnevictDataRequest.block_ids)
  return block_ids_.Get(index);
}
void UnevictDataRequest::set_block_ids(int index, ::google::protobuf::int32 value) {
  block_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.UnevictDataRequest.block_ids)
}
void UnevictDataRequest::add_block_ids(::google::protobuf::int32 value) {
  block_ids_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.UnevictDataRequest.block_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnevictDataRequest::block_ids() const {
  // @@protoc_insertion_point(field_list:peloton.networking.UnevictDataRequest.block_ids)
  return block_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnevictDataRequest::mutable_block_ids() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.UnevictDataRequest.block_ids)
  return &block_ids_;
}

// repeated int32 tuple_offsets = 6 [packed = true];
int UnevictDataRequest::tuple_offsets_size() const {
  return tuple_offsets_.size();
}
void UnevictDataRequest::clear_tuple_offsets() {
  tuple_offsets_.Clear();
}
::google::protobuf::int32 UnevictDataRequest::tuple_offsets(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.UnevictDataRequest.tuple_offsets)
  return tuple_offsets_.Get(index);
}
void UnevictDataRequest::set_tuple_offsets(int index, ::google::protobuf::int32 value) {
  tuple_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:peloton.networking.UnevictDataRequest.tuple_offsets)
}
void UnevictDataRequest::add_tuple_offsets(::google::protobuf::int32 value) {
  tuple_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:peloton.networking.UnevictDataRequest.tuple_offsets)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UnevictDataRequest::tuple_offsets() const {
  // @@protoc_insertion_point(field_list:peloton.networking.UnevictDataRequest.tuple_offsets)
  return tuple_offsets_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UnevictDataRequest::mutable_tuple_offsets() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.UnevictDataRequest.tuple_offsets)
  return &tuple_offsets_;
}

// required int64 new_transaction_id = 7;
bool UnevictDataRequest::has_new_transaction_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UnevictDataRequest::set_has_new_transaction_id() {
  _has_bits_[0] |= 0x00000008u;
}
void UnevictDataRequest::clear_has_new_transaction_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void UnevictDataRequest::clear_new_transaction_id() {
  new_transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_new_transaction_id();
}
::google::protobuf::int64 UnevictDataRequest::new_transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.UnevictDataRequest.new_transaction_id)
  return new_transaction_id_;
}
void UnevictDataRequest::set_new_transaction_id(::google::protobuf::int64 value) {
  set_has_new_transaction_id();
  new_transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.UnevictDataRequest.new_transaction_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnevictDataResponse::kSenderSiteFieldNumber;
const int UnevictDataResponse::kStatusFieldNumber;
const int UnevictDataResponse::kTransactionIdFieldNumber;
const int UnevictDataResponse::kPartitionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnevictDataResponse::UnevictDataResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.UnevictDataResponse)
}
UnevictDataResponse::UnevictDataResponse(const UnevictDataResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sender_site_, &from.sender_site_,
    static_cast<size_t>(reinterpret_cast<char*>(&partition_id_) -
    reinterpret_cast<char*>(&sender_site_)) + sizeof(partition_id_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.UnevictDataResponse)
}

void UnevictDataResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sender_site_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&partition_id_) -
      reinterpret_cast<char*>(&sender_site_)) + sizeof(partition_id_));
}

UnevictDataResponse::~UnevictDataResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.UnevictDataResponse)
  SharedDtor();
}

void UnevictDataResponse::SharedDtor() {
}

void UnevictDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnevictDataResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnevictDataResponse& UnevictDataResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnevictDataResponse* UnevictDataResponse::New(::google::protobuf::Arena* arena) const {
  UnevictDataResponse* n = new UnevictDataResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnevictDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.UnevictDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&sender_site_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&partition_id_) -
        reinterpret_cast<char*>(&sender_site_)) + sizeof(partition_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool UnevictDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.UnevictDataResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .peloton.networking.Status status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::peloton::networking::Status_IsValid(value)) {
            set_status(static_cast< ::peloton::networking::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 transaction_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_transaction_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transaction_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 partition_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_partition_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partition_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.UnevictDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.UnevictDataResponse)
  return false;
#undef DO_
}

void UnevictDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.UnevictDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required .peloton.networking.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required int64 transaction_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->transaction_id(), output);
  }

  // required int32 partition_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->partition_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.UnevictDataResponse)
}

::google::protobuf::uint8* UnevictDataResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.UnevictDataResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required .peloton.networking.Status status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required int64 transaction_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->transaction_id(), target);
  }

  // required int32 partition_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->partition_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.UnevictDataResponse)
  return target;
}

size_t UnevictDataResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.UnevictDataResponse)
  size_t total_size = 0;

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  if (has_status()) {
    // required .peloton.networking.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_transaction_id()) {
    // required int64 transaction_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());
  }

  if (has_partition_id()) {
    // required int32 partition_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());
  }

  return total_size;
}
size_t UnevictDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.UnevictDataResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

    // required .peloton.networking.Status status = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required int64 transaction_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->transaction_id());

    // required int32 partition_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->partition_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnevictDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.UnevictDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnevictDataResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnevictDataResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.UnevictDataResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.UnevictDataResponse)
    MergeFrom(*source);
  }
}

void UnevictDataResponse::MergeFrom(const UnevictDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.UnevictDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      sender_site_ = from.sender_site_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      transaction_id_ = from.transaction_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      partition_id_ = from.partition_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UnevictDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.UnevictDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnevictDataResponse::CopyFrom(const UnevictDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.UnevictDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnevictDataResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void UnevictDataResponse::Swap(UnevictDataResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnevictDataResponse::InternalSwap(UnevictDataResponse* other) {
  using std::swap;
  swap(sender_site_, other->sender_site_);
  swap(status_, other->status_);
  swap(transaction_id_, other->transaction_id_);
  swap(partition_id_, other->partition_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnevictDataResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnevictDataResponse

// required int32 sender_site = 1;
bool UnevictDataResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnevictDataResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000001u;
}
void UnevictDataResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnevictDataResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 UnevictDataResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.UnevictDataResponse.sender_site)
  return sender_site_;
}
void UnevictDataResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.UnevictDataResponse.sender_site)
}

// required .peloton.networking.Status status = 2;
bool UnevictDataResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnevictDataResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void UnevictDataResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnevictDataResponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
::peloton::networking::Status UnevictDataResponse::status() const {
  // @@protoc_insertion_point(field_get:peloton.networking.UnevictDataResponse.status)
  return static_cast< ::peloton::networking::Status >(status_);
}
void UnevictDataResponse::set_status(::peloton::networking::Status value) {
  assert(::peloton::networking::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.UnevictDataResponse.status)
}

// required int64 transaction_id = 3;
bool UnevictDataResponse::has_transaction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UnevictDataResponse::set_has_transaction_id() {
  _has_bits_[0] |= 0x00000004u;
}
void UnevictDataResponse::clear_has_transaction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void UnevictDataResponse::clear_transaction_id() {
  transaction_id_ = GOOGLE_LONGLONG(0);
  clear_has_transaction_id();
}
::google::protobuf::int64 UnevictDataResponse::transaction_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.UnevictDataResponse.transaction_id)
  return transaction_id_;
}
void UnevictDataResponse::set_transaction_id(::google::protobuf::int64 value) {
  set_has_transaction_id();
  transaction_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.UnevictDataResponse.transaction_id)
}

// required int32 partition_id = 4;
bool UnevictDataResponse::has_partition_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UnevictDataResponse::set_has_partition_id() {
  _has_bits_[0] |= 0x00000008u;
}
void UnevictDataResponse::clear_has_partition_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void UnevictDataResponse::clear_partition_id() {
  partition_id_ = 0;
  clear_has_partition_id();
}
::google::protobuf::int32 UnevictDataResponse::partition_id() const {
  // @@protoc_insertion_point(field_get:peloton.networking.UnevictDataResponse.partition_id)
  return partition_id_;
}
void UnevictDataResponse::set_partition_id(::google::protobuf::int32 value) {
  set_has_partition_id();
  partition_id_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.UnevictDataResponse.partition_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSyncRequest::kSenderSiteFieldNumber;
const int TimeSyncRequest::kT0SFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSyncRequest::TimeSyncRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TimeSyncRequest)
}
TimeSyncRequest::TimeSyncRequest(const TimeSyncRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&t0_s_, &from.t0_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_site_) -
    reinterpret_cast<char*>(&t0_s_)) + sizeof(sender_site_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TimeSyncRequest)
}

void TimeSyncRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&t0_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_site_) -
      reinterpret_cast<char*>(&t0_s_)) + sizeof(sender_site_));
}

TimeSyncRequest::~TimeSyncRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.TimeSyncRequest)
  SharedDtor();
}

void TimeSyncRequest::SharedDtor() {
}

void TimeSyncRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSyncRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeSyncRequest& TimeSyncRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimeSyncRequest* TimeSyncRequest::New(::google::protobuf::Arena* arena) const {
  TimeSyncRequest* n = new TimeSyncRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeSyncRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TimeSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&t0_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sender_site_) -
        reinterpret_cast<char*>(&t0_s_)) + sizeof(sender_site_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeSyncRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TimeSyncRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 t0_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_t0_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t0_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TimeSyncRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TimeSyncRequest)
  return false;
#undef DO_
}

void TimeSyncRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TimeSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 t0_s = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->t0_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TimeSyncRequest)
}

::google::protobuf::uint8* TimeSyncRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TimeSyncRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 t0_s = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->t0_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TimeSyncRequest)
  return target;
}

size_t TimeSyncRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TimeSyncRequest)
  size_t total_size = 0;

  if (has_t0_s()) {
    // required int64 t0_s = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_s());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  return total_size;
}
size_t TimeSyncRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TimeSyncRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 t0_s = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_s());

    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSyncRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TimeSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSyncRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeSyncRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TimeSyncRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TimeSyncRequest)
    MergeFrom(*source);
  }
}

void TimeSyncRequest::MergeFrom(const TimeSyncRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TimeSyncRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      t0_s_ = from.t0_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      sender_site_ = from.sender_site_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeSyncRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TimeSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncRequest::CopyFrom(const TimeSyncRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TimeSyncRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void TimeSyncRequest::Swap(TimeSyncRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSyncRequest::InternalSwap(TimeSyncRequest* other) {
  using std::swap;
  swap(t0_s_, other->t0_s_);
  swap(sender_site_, other->sender_site_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeSyncRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeSyncRequest

// required int32 sender_site = 1;
bool TimeSyncRequest::has_sender_site() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeSyncRequest::set_has_sender_site() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeSyncRequest::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeSyncRequest::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 TimeSyncRequest::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TimeSyncRequest.sender_site)
  return sender_site_;
}
void TimeSyncRequest::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TimeSyncRequest.sender_site)
}

// required int64 t0_s = 2;
bool TimeSyncRequest::has_t0_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeSyncRequest::set_has_t0_s() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeSyncRequest::clear_has_t0_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeSyncRequest::clear_t0_s() {
  t0_s_ = GOOGLE_LONGLONG(0);
  clear_has_t0_s();
}
::google::protobuf::int64 TimeSyncRequest::t0_s() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TimeSyncRequest.t0_s)
  return t0_s_;
}
void TimeSyncRequest::set_t0_s(::google::protobuf::int64 value) {
  set_has_t0_s();
  t0_s_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TimeSyncRequest.t0_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TimeSyncResponse::kSenderSiteFieldNumber;
const int TimeSyncResponse::kT0SFieldNumber;
const int TimeSyncResponse::kT0RFieldNumber;
const int TimeSyncResponse::kT1SFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TimeSyncResponse::TimeSyncResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.TimeSyncResponse)
}
TimeSyncResponse::TimeSyncResponse(const TimeSyncResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&t0_s_, &from.t0_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_site_) -
    reinterpret_cast<char*>(&t0_s_)) + sizeof(sender_site_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.TimeSyncResponse)
}

void TimeSyncResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&t0_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_site_) -
      reinterpret_cast<char*>(&t0_s_)) + sizeof(sender_site_));
}

TimeSyncResponse::~TimeSyncResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.TimeSyncResponse)
  SharedDtor();
}

void TimeSyncResponse::SharedDtor() {
}

void TimeSyncResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeSyncResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TimeSyncResponse& TimeSyncResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

TimeSyncResponse* TimeSyncResponse::New(::google::protobuf::Arena* arena) const {
  TimeSyncResponse* n = new TimeSyncResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TimeSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.TimeSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&t0_s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sender_site_) -
        reinterpret_cast<char*>(&t0_s_)) + sizeof(sender_site_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TimeSyncResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.TimeSyncResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sender_site = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_sender_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sender_site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 t0_s = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_t0_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t0_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 t0_r = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_t0_r();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t0_r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int64 t1_s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_t1_s();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &t1_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.TimeSyncResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.TimeSyncResponse)
  return false;
#undef DO_
}

void TimeSyncResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.TimeSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sender_site(), output);
  }

  // required int64 t0_s = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->t0_s(), output);
  }

  // required int64 t0_r = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->t0_r(), output);
  }

  // required int64 t1_s = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->t1_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.TimeSyncResponse)
}

::google::protobuf::uint8* TimeSyncResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.TimeSyncResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sender_site = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sender_site(), target);
  }

  // required int64 t0_s = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->t0_s(), target);
  }

  // required int64 t0_r = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->t0_r(), target);
  }

  // required int64 t1_s = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->t1_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.TimeSyncResponse)
  return target;
}

size_t TimeSyncResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.TimeSyncResponse)
  size_t total_size = 0;

  if (has_t0_s()) {
    // required int64 t0_s = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_s());
  }

  if (has_t0_r()) {
    // required int64 t0_r = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_r());
  }

  if (has_t1_s()) {
    // required int64 t1_s = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t1_s());
  }

  if (has_sender_site()) {
    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());
  }

  return total_size;
}
size_t TimeSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.TimeSyncResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int64 t0_s = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_s());

    // required int64 t0_r = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t0_r());

    // required int64 t1_s = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->t1_s());

    // required int32 sender_site = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sender_site());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeSyncResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.TimeSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeSyncResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TimeSyncResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.TimeSyncResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.TimeSyncResponse)
    MergeFrom(*source);
  }
}

void TimeSyncResponse::MergeFrom(const TimeSyncResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.TimeSyncResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      t0_s_ = from.t0_s_;
    }
    if (cached_has_bits & 0x00000002u) {
      t0_r_ = from.t0_r_;
    }
    if (cached_has_bits & 0x00000004u) {
      t1_s_ = from.t1_s_;
    }
    if (cached_has_bits & 0x00000008u) {
      sender_site_ = from.sender_site_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TimeSyncResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.TimeSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeSyncResponse::CopyFrom(const TimeSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.TimeSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeSyncResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void TimeSyncResponse::Swap(TimeSyncResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TimeSyncResponse::InternalSwap(TimeSyncResponse* other) {
  using std::swap;
  swap(t0_s_, other->t0_s_);
  swap(t0_r_, other->t0_r_);
  swap(t1_s_, other->t1_s_);
  swap(sender_site_, other->sender_site_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TimeSyncResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TimeSyncResponse

// required int32 sender_site = 1;
bool TimeSyncResponse::has_sender_site() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TimeSyncResponse::set_has_sender_site() {
  _has_bits_[0] |= 0x00000008u;
}
void TimeSyncResponse::clear_has_sender_site() {
  _has_bits_[0] &= ~0x00000008u;
}
void TimeSyncResponse::clear_sender_site() {
  sender_site_ = 0;
  clear_has_sender_site();
}
::google::protobuf::int32 TimeSyncResponse::sender_site() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TimeSyncResponse.sender_site)
  return sender_site_;
}
void TimeSyncResponse::set_sender_site(::google::protobuf::int32 value) {
  set_has_sender_site();
  sender_site_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TimeSyncResponse.sender_site)
}

// required int64 t0_s = 2;
bool TimeSyncResponse::has_t0_s() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TimeSyncResponse::set_has_t0_s() {
  _has_bits_[0] |= 0x00000001u;
}
void TimeSyncResponse::clear_has_t0_s() {
  _has_bits_[0] &= ~0x00000001u;
}
void TimeSyncResponse::clear_t0_s() {
  t0_s_ = GOOGLE_LONGLONG(0);
  clear_has_t0_s();
}
::google::protobuf::int64 TimeSyncResponse::t0_s() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TimeSyncResponse.t0_s)
  return t0_s_;
}
void TimeSyncResponse::set_t0_s(::google::protobuf::int64 value) {
  set_has_t0_s();
  t0_s_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TimeSyncResponse.t0_s)
}

// required int64 t0_r = 3;
bool TimeSyncResponse::has_t0_r() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TimeSyncResponse::set_has_t0_r() {
  _has_bits_[0] |= 0x00000002u;
}
void TimeSyncResponse::clear_has_t0_r() {
  _has_bits_[0] &= ~0x00000002u;
}
void TimeSyncResponse::clear_t0_r() {
  t0_r_ = GOOGLE_LONGLONG(0);
  clear_has_t0_r();
}
::google::protobuf::int64 TimeSyncResponse::t0_r() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TimeSyncResponse.t0_r)
  return t0_r_;
}
void TimeSyncResponse::set_t0_r(::google::protobuf::int64 value) {
  set_has_t0_r();
  t0_r_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TimeSyncResponse.t0_r)
}

// required int64 t1_s = 4;
bool TimeSyncResponse::has_t1_s() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TimeSyncResponse::set_has_t1_s() {
  _has_bits_[0] |= 0x00000004u;
}
void TimeSyncResponse::clear_has_t1_s() {
  _has_bits_[0] &= ~0x00000004u;
}
void TimeSyncResponse::clear_t1_s() {
  t1_s_ = GOOGLE_LONGLONG(0);
  clear_has_t1_s();
}
::google::protobuf::int64 TimeSyncResponse::t1_s() const {
  // @@protoc_insertion_point(field_get:peloton.networking.TimeSyncResponse.t1_s)
  return t1_s_;
}
void TimeSyncResponse::set_t1_s(::google::protobuf::int64 value) {
  set_has_t1_s();
  t1_s_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.TimeSyncResponse.t1_s)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryPlanExecRequest::kPlanTypeFieldNumber;
const int QueryPlanExecRequest::kParamNumFieldNumber;
const int QueryPlanExecRequest::kParamListFieldNumber;
const int QueryPlanExecRequest::kPlanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryPlanExecRequest::QueryPlanExecRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.QueryPlanExecRequest)
}
QueryPlanExecRequest::QueryPlanExecRequest(const QueryPlanExecRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param_list()) {
    param_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_list_);
  }
  plan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_plan()) {
    plan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plan_);
  }
  ::memcpy(&plan_type_, &from.plan_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&param_num_) -
    reinterpret_cast<char*>(&plan_type_)) + sizeof(param_num_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.QueryPlanExecRequest)
}

void QueryPlanExecRequest::SharedCtor() {
  _cached_size_ = 0;
  param_list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&plan_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param_num_) -
      reinterpret_cast<char*>(&plan_type_)) + sizeof(param_num_));
}

QueryPlanExecRequest::~QueryPlanExecRequest() {
  // @@protoc_insertion_point(destructor:peloton.networking.QueryPlanExecRequest)
  SharedDtor();
}

void QueryPlanExecRequest::SharedDtor() {
  param_list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  plan_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryPlanExecRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPlanExecRequest::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryPlanExecRequest& QueryPlanExecRequest::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryPlanExecRequest* QueryPlanExecRequest::New(::google::protobuf::Arena* arena) const {
  QueryPlanExecRequest* n = new QueryPlanExecRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryPlanExecRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.QueryPlanExecRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!param_list_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*param_list_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!plan_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*plan_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&plan_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&param_num_) -
        reinterpret_cast<char*>(&plan_type_)) + sizeof(param_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryPlanExecRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.QueryPlanExecRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 plan_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_plan_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plan_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 param_num = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_param_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes param_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_param_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes plan = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_plan()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.QueryPlanExecRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.QueryPlanExecRequest)
  return false;
#undef DO_
}

void QueryPlanExecRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.QueryPlanExecRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 plan_type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->plan_type(), output);
  }

  // optional int32 param_num = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param_num(), output);
  }

  // optional bytes param_list = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->param_list(), output);
  }

  // required bytes plan = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->plan(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.QueryPlanExecRequest)
}

::google::protobuf::uint8* QueryPlanExecRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.QueryPlanExecRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 plan_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->plan_type(), target);
  }

  // optional int32 param_num = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->param_num(), target);
  }

  // optional bytes param_list = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->param_list(), target);
  }

  // required bytes plan = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->plan(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.QueryPlanExecRequest)
  return target;
}

size_t QueryPlanExecRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:peloton.networking.QueryPlanExecRequest)
  size_t total_size = 0;

  if (has_plan()) {
    // required bytes plan = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->plan());
  }

  if (has_plan_type()) {
    // required int32 plan_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->plan_type());
  }

  return total_size;
}
size_t QueryPlanExecRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.QueryPlanExecRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required bytes plan = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->plan());

    // required int32 plan_type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->plan_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bytes param_list = 3;
  if (has_param_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->param_list());
  }

  // optional int32 param_num = 2;
  if (has_param_num()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->param_num());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPlanExecRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.QueryPlanExecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPlanExecRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryPlanExecRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.QueryPlanExecRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.QueryPlanExecRequest)
    MergeFrom(*source);
  }
}

void QueryPlanExecRequest::MergeFrom(const QueryPlanExecRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.QueryPlanExecRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_param_list();
      param_list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param_list_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_plan();
      plan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.plan_);
    }
    if (cached_has_bits & 0x00000004u) {
      plan_type_ = from.plan_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      param_num_ = from.param_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryPlanExecRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.QueryPlanExecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPlanExecRequest::CopyFrom(const QueryPlanExecRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.QueryPlanExecRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlanExecRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void QueryPlanExecRequest::Swap(QueryPlanExecRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryPlanExecRequest::InternalSwap(QueryPlanExecRequest* other) {
  using std::swap;
  param_list_.Swap(&other->param_list_);
  plan_.Swap(&other->plan_);
  swap(plan_type_, other->plan_type_);
  swap(param_num_, other->param_num_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryPlanExecRequest::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryPlanExecRequest

// required int32 plan_type = 1;
bool QueryPlanExecRequest::has_plan_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void QueryPlanExecRequest::set_has_plan_type() {
  _has_bits_[0] |= 0x00000004u;
}
void QueryPlanExecRequest::clear_has_plan_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void QueryPlanExecRequest::clear_plan_type() {
  plan_type_ = 0;
  clear_has_plan_type();
}
::google::protobuf::int32 QueryPlanExecRequest::plan_type() const {
  // @@protoc_insertion_point(field_get:peloton.networking.QueryPlanExecRequest.plan_type)
  return plan_type_;
}
void QueryPlanExecRequest::set_plan_type(::google::protobuf::int32 value) {
  set_has_plan_type();
  plan_type_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.QueryPlanExecRequest.plan_type)
}

// optional int32 param_num = 2;
bool QueryPlanExecRequest::has_param_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void QueryPlanExecRequest::set_has_param_num() {
  _has_bits_[0] |= 0x00000008u;
}
void QueryPlanExecRequest::clear_has_param_num() {
  _has_bits_[0] &= ~0x00000008u;
}
void QueryPlanExecRequest::clear_param_num() {
  param_num_ = 0;
  clear_has_param_num();
}
::google::protobuf::int32 QueryPlanExecRequest::param_num() const {
  // @@protoc_insertion_point(field_get:peloton.networking.QueryPlanExecRequest.param_num)
  return param_num_;
}
void QueryPlanExecRequest::set_param_num(::google::protobuf::int32 value) {
  set_has_param_num();
  param_num_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.QueryPlanExecRequest.param_num)
}

// optional bytes param_list = 3;
bool QueryPlanExecRequest::has_param_list() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryPlanExecRequest::set_has_param_list() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryPlanExecRequest::clear_has_param_list() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryPlanExecRequest::clear_param_list() {
  param_list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_param_list();
}
const ::std::string& QueryPlanExecRequest::param_list() const {
  // @@protoc_insertion_point(field_get:peloton.networking.QueryPlanExecRequest.param_list)
  return param_list_.GetNoArena();
}
void QueryPlanExecRequest::set_param_list(const ::std::string& value) {
  set_has_param_list();
  param_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.QueryPlanExecRequest.param_list)
}
#if LANG_CXX11
void QueryPlanExecRequest::set_param_list(::std::string&& value) {
  set_has_param_list();
  param_list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.QueryPlanExecRequest.param_list)
}
#endif
void QueryPlanExecRequest::set_param_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_param_list();
  param_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.QueryPlanExecRequest.param_list)
}
void QueryPlanExecRequest::set_param_list(const void* value, size_t size) {
  set_has_param_list();
  param_list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.QueryPlanExecRequest.param_list)
}
::std::string* QueryPlanExecRequest::mutable_param_list() {
  set_has_param_list();
  // @@protoc_insertion_point(field_mutable:peloton.networking.QueryPlanExecRequest.param_list)
  return param_list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryPlanExecRequest::release_param_list() {
  // @@protoc_insertion_point(field_release:peloton.networking.QueryPlanExecRequest.param_list)
  clear_has_param_list();
  return param_list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryPlanExecRequest::set_allocated_param_list(::std::string* param_list) {
  if (param_list != NULL) {
    set_has_param_list();
  } else {
    clear_has_param_list();
  }
  param_list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), param_list);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.QueryPlanExecRequest.param_list)
}

// required bytes plan = 4;
bool QueryPlanExecRequest::has_plan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryPlanExecRequest::set_has_plan() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryPlanExecRequest::clear_has_plan() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryPlanExecRequest::clear_plan() {
  plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_plan();
}
const ::std::string& QueryPlanExecRequest::plan() const {
  // @@protoc_insertion_point(field_get:peloton.networking.QueryPlanExecRequest.plan)
  return plan_.GetNoArena();
}
void QueryPlanExecRequest::set_plan(const ::std::string& value) {
  set_has_plan();
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:peloton.networking.QueryPlanExecRequest.plan)
}
#if LANG_CXX11
void QueryPlanExecRequest::set_plan(::std::string&& value) {
  set_has_plan();
  plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:peloton.networking.QueryPlanExecRequest.plan)
}
#endif
void QueryPlanExecRequest::set_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_plan();
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:peloton.networking.QueryPlanExecRequest.plan)
}
void QueryPlanExecRequest::set_plan(const void* value, size_t size) {
  set_has_plan();
  plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.QueryPlanExecRequest.plan)
}
::std::string* QueryPlanExecRequest::mutable_plan() {
  set_has_plan();
  // @@protoc_insertion_point(field_mutable:peloton.networking.QueryPlanExecRequest.plan)
  return plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* QueryPlanExecRequest::release_plan() {
  // @@protoc_insertion_point(field_release:peloton.networking.QueryPlanExecRequest.plan)
  clear_has_plan();
  return plan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void QueryPlanExecRequest::set_allocated_plan(::std::string* plan) {
  if (plan != NULL) {
    set_has_plan();
  } else {
    clear_has_plan();
  }
  plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:peloton.networking.QueryPlanExecRequest.plan)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryPlanExecResponse::kTupleCountFieldNumber;
const int QueryPlanExecResponse::kTileCountFieldNumber;
const int QueryPlanExecResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryPlanExecResponse::QueryPlanExecResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_abstract_5fservice_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:peloton.networking.QueryPlanExecResponse)
}
QueryPlanExecResponse::QueryPlanExecResponse(const QueryPlanExecResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      result_(from.result_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tuple_count_, &from.tuple_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&tile_count_) -
    reinterpret_cast<char*>(&tuple_count_)) + sizeof(tile_count_));
  // @@protoc_insertion_point(copy_constructor:peloton.networking.QueryPlanExecResponse)
}

void QueryPlanExecResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tuple_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tile_count_) -
      reinterpret_cast<char*>(&tuple_count_)) + sizeof(tile_count_));
}

QueryPlanExecResponse::~QueryPlanExecResponse() {
  // @@protoc_insertion_point(destructor:peloton.networking.QueryPlanExecResponse)
  SharedDtor();
}

void QueryPlanExecResponse::SharedDtor() {
}

void QueryPlanExecResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPlanExecResponse::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryPlanExecResponse& QueryPlanExecResponse::default_instance() {
  protobuf_abstract_5fservice_2eproto::InitDefaults();
  return *internal_default_instance();
}

QueryPlanExecResponse* QueryPlanExecResponse::New(::google::protobuf::Arena* arena) const {
  QueryPlanExecResponse* n = new QueryPlanExecResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QueryPlanExecResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:peloton.networking.QueryPlanExecResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&tuple_count_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tile_count_) -
        reinterpret_cast<char*>(&tuple_count_)) + sizeof(tile_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool QueryPlanExecResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:peloton.networking.QueryPlanExecResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tuple_count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_tuple_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tuple_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tile_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tile_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tile_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:peloton.networking.QueryPlanExecResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:peloton.networking.QueryPlanExecResponse)
  return false;
#undef DO_
}

void QueryPlanExecResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:peloton.networking.QueryPlanExecResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 tuple_count = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tuple_count(), output);
  }

  // optional int32 tile_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tile_count(), output);
  }

  // repeated bytes result = 3;
  for (int i = 0, n = this->result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->result(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:peloton.networking.QueryPlanExecResponse)
}

::google::protobuf::uint8* QueryPlanExecResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:peloton.networking.QueryPlanExecResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 tuple_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tuple_count(), target);
  }

  // optional int32 tile_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tile_count(), target);
  }

  // repeated bytes result = 3;
  for (int i = 0, n = this->result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->result(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:peloton.networking.QueryPlanExecResponse)
  return target;
}

size_t QueryPlanExecResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:peloton.networking.QueryPlanExecResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 tuple_count = 1;
  if (has_tuple_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tuple_count());
  }
  // repeated bytes result = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->result_size());
  for (int i = 0, n = this->result_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->result(i));
  }

  // optional int32 tile_count = 2;
  if (has_tile_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tile_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPlanExecResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:peloton.networking.QueryPlanExecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryPlanExecResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryPlanExecResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:peloton.networking.QueryPlanExecResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:peloton.networking.QueryPlanExecResponse)
    MergeFrom(*source);
  }
}

void QueryPlanExecResponse::MergeFrom(const QueryPlanExecResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:peloton.networking.QueryPlanExecResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      tuple_count_ = from.tuple_count_;
    }
    if (cached_has_bits & 0x00000002u) {
      tile_count_ = from.tile_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void QueryPlanExecResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:peloton.networking.QueryPlanExecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPlanExecResponse::CopyFrom(const QueryPlanExecResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:peloton.networking.QueryPlanExecResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPlanExecResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void QueryPlanExecResponse::Swap(QueryPlanExecResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QueryPlanExecResponse::InternalSwap(QueryPlanExecResponse* other) {
  using std::swap;
  result_.InternalSwap(&other->result_);
  swap(tuple_count_, other->tuple_count_);
  swap(tile_count_, other->tile_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryPlanExecResponse::GetMetadata() const {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QueryPlanExecResponse

// required int32 tuple_count = 1;
bool QueryPlanExecResponse::has_tuple_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void QueryPlanExecResponse::set_has_tuple_count() {
  _has_bits_[0] |= 0x00000001u;
}
void QueryPlanExecResponse::clear_has_tuple_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void QueryPlanExecResponse::clear_tuple_count() {
  tuple_count_ = 0;
  clear_has_tuple_count();
}
::google::protobuf::int32 QueryPlanExecResponse::tuple_count() const {
  // @@protoc_insertion_point(field_get:peloton.networking.QueryPlanExecResponse.tuple_count)
  return tuple_count_;
}
void QueryPlanExecResponse::set_tuple_count(::google::protobuf::int32 value) {
  set_has_tuple_count();
  tuple_count_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.QueryPlanExecResponse.tuple_count)
}

// optional int32 tile_count = 2;
bool QueryPlanExecResponse::has_tile_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void QueryPlanExecResponse::set_has_tile_count() {
  _has_bits_[0] |= 0x00000002u;
}
void QueryPlanExecResponse::clear_has_tile_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void QueryPlanExecResponse::clear_tile_count() {
  tile_count_ = 0;
  clear_has_tile_count();
}
::google::protobuf::int32 QueryPlanExecResponse::tile_count() const {
  // @@protoc_insertion_point(field_get:peloton.networking.QueryPlanExecResponse.tile_count)
  return tile_count_;
}
void QueryPlanExecResponse::set_tile_count(::google::protobuf::int32 value) {
  set_has_tile_count();
  tile_count_ = value;
  // @@protoc_insertion_point(field_set:peloton.networking.QueryPlanExecResponse.tile_count)
}

// repeated bytes result = 3;
int QueryPlanExecResponse::result_size() const {
  return result_.size();
}
void QueryPlanExecResponse::clear_result() {
  result_.Clear();
}
const ::std::string& QueryPlanExecResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:peloton.networking.QueryPlanExecResponse.result)
  return result_.Get(index);
}
::std::string* QueryPlanExecResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:peloton.networking.QueryPlanExecResponse.result)
  return result_.Mutable(index);
}
void QueryPlanExecResponse::set_result(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.QueryPlanExecResponse.result)
  result_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void QueryPlanExecResponse::set_result(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:peloton.networking.QueryPlanExecResponse.result)
  result_.Mutable(index)->assign(std::move(value));
}
#endif
void QueryPlanExecResponse::set_result(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  result_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:peloton.networking.QueryPlanExecResponse.result)
}
void QueryPlanExecResponse::set_result(int index, const void* value, size_t size) {
  result_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:peloton.networking.QueryPlanExecResponse.result)
}
::std::string* QueryPlanExecResponse::add_result() {
  // @@protoc_insertion_point(field_add_mutable:peloton.networking.QueryPlanExecResponse.result)
  return result_.Add();
}
void QueryPlanExecResponse::add_result(const ::std::string& value) {
  result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:peloton.networking.QueryPlanExecResponse.result)
}
#if LANG_CXX11
void QueryPlanExecResponse::add_result(::std::string&& value) {
  result_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:peloton.networking.QueryPlanExecResponse.result)
}
#endif
void QueryPlanExecResponse::add_result(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  result_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:peloton.networking.QueryPlanExecResponse.result)
}
void QueryPlanExecResponse::add_result(const void* value, size_t size) {
  result_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:peloton.networking.QueryPlanExecResponse.result)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryPlanExecResponse::result() const {
  // @@protoc_insertion_point(field_list:peloton.networking.QueryPlanExecResponse.result)
  return result_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
QueryPlanExecResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:peloton.networking.QueryPlanExecResponse.result)
  return &result_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

AbstractPelotonService::~AbstractPelotonService() {}

const ::google::protobuf::ServiceDescriptor* AbstractPelotonService::descriptor() {
  protobuf_abstract_5fservice_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_abstract_5fservice_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* AbstractPelotonService::GetDescriptor() {
  return descriptor();
}

void AbstractPelotonService::TransactionInit(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionInitRequest*,
                         ::peloton::networking::TransactionInitResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionInit() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionWork(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionWorkRequest*,
                         ::peloton::networking::TransactionWorkResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionWork() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionPrefetch(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionPrefetchResult*,
                         ::peloton::networking::TransactionPrefetchAcknowledgement*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionPrefetch() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionMap(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionMapRequest*,
                         ::peloton::networking::TransactionMapResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionMap() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionReduce(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionReduceRequest*,
                         ::peloton::networking::TransactionReduceResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionReduce() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionPrepare(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionPrepareRequest*,
                         ::peloton::networking::TransactionPrepareResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionPrepare() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionFinish(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionFinishRequest*,
                         ::peloton::networking::TransactionFinishResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionFinish() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionRedirect(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionRedirectRequest*,
                         ::peloton::networking::TransactionRedirectResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionRedirect() not implemented.");
  done->Run();
}

void AbstractPelotonService::TransactionDebug(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TransactionDebugRequest*,
                         ::peloton::networking::TransactionDebugResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TransactionDebug() not implemented.");
  done->Run();
}

void AbstractPelotonService::SendData(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::SendDataRequest*,
                         ::peloton::networking::SendDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SendData() not implemented.");
  done->Run();
}

void AbstractPelotonService::Initialize(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::InitializeRequest*,
                         ::peloton::networking::InitializeResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Initialize() not implemented.");
  done->Run();
}

void AbstractPelotonService::ShutdownPrepare(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::ShutdownPrepareRequest*,
                         ::peloton::networking::ShutdownPrepareResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ShutdownPrepare() not implemented.");
  done->Run();
}

void AbstractPelotonService::Shutdown(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::ShutdownRequest*,
                         ::peloton::networking::ShutdownResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Shutdown() not implemented.");
  done->Run();
}

void AbstractPelotonService::Heartbeat(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::HeartbeatRequest*,
                         ::peloton::networking::HeartbeatResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Heartbeat() not implemented.");
  done->Run();
}

void AbstractPelotonService::UnevictData(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::UnevictDataRequest*,
                         ::peloton::networking::UnevictDataResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UnevictData() not implemented.");
  done->Run();
}

void AbstractPelotonService::TimeSync(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::TimeSyncRequest*,
                         ::peloton::networking::TimeSyncResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method TimeSync() not implemented.");
  done->Run();
}

void AbstractPelotonService::QueryPlan(::google::protobuf::RpcController* controller,
                         const ::peloton::networking::QueryPlanExecRequest*,
                         ::peloton::networking::QueryPlanExecResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method QueryPlan() not implemented.");
  done->Run();
}

void AbstractPelotonService::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_abstract_5fservice_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      TransactionInit(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionInitRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionInitResponse*>(response),
             done);
      break;
    case 1:
      TransactionWork(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionWorkRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionWorkResponse*>(response),
             done);
      break;
    case 2:
      TransactionPrefetch(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionPrefetchResult*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionPrefetchAcknowledgement*>(response),
             done);
      break;
    case 3:
      TransactionMap(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionMapRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionMapResponse*>(response),
             done);
      break;
    case 4:
      TransactionReduce(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionReduceRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionReduceResponse*>(response),
             done);
      break;
    case 5:
      TransactionPrepare(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionPrepareRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionPrepareResponse*>(response),
             done);
      break;
    case 6:
      TransactionFinish(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionFinishRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionFinishResponse*>(response),
             done);
      break;
    case 7:
      TransactionRedirect(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionRedirectRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionRedirectResponse*>(response),
             done);
      break;
    case 8:
      TransactionDebug(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TransactionDebugRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TransactionDebugResponse*>(response),
             done);
      break;
    case 9:
      SendData(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::SendDataRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::SendDataResponse*>(response),
             done);
      break;
    case 10:
      Initialize(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::InitializeRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::InitializeResponse*>(response),
             done);
      break;
    case 11:
      ShutdownPrepare(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::ShutdownPrepareRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::ShutdownPrepareResponse*>(response),
             done);
      break;
    case 12:
      Shutdown(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::ShutdownRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::ShutdownResponse*>(response),
             done);
      break;
    case 13:
      Heartbeat(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::HeartbeatRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::HeartbeatResponse*>(response),
             done);
      break;
    case 14:
      UnevictData(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::UnevictDataRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::UnevictDataResponse*>(response),
             done);
      break;
    case 15:
      TimeSync(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::TimeSyncRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::TimeSyncResponse*>(response),
             done);
      break;
    case 16:
      QueryPlan(controller,
             ::google::protobuf::down_cast<const ::peloton::networking::QueryPlanExecRequest*>(request),
             ::google::protobuf::down_cast< ::peloton::networking::QueryPlanExecResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& AbstractPelotonService::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::peloton::networking::TransactionInitRequest::default_instance();
    case 1:
      return ::peloton::networking::TransactionWorkRequest::default_instance();
    case 2:
      return ::peloton::networking::TransactionPrefetchResult::default_instance();
    case 3:
      return ::peloton::networking::TransactionMapRequest::default_instance();
    case 4:
      return ::peloton::networking::TransactionReduceRequest::default_instance();
    case 5:
      return ::peloton::networking::TransactionPrepareRequest::default_instance();
    case 6:
      return ::peloton::networking::TransactionFinishRequest::default_instance();
    case 7:
      return ::peloton::networking::TransactionRedirectRequest::default_instance();
    case 8:
      return ::peloton::networking::TransactionDebugRequest::default_instance();
    case 9:
      return ::peloton::networking::SendDataRequest::default_instance();
    case 10:
      return ::peloton::networking::InitializeRequest::default_instance();
    case 11:
      return ::peloton::networking::ShutdownPrepareRequest::default_instance();
    case 12:
      return ::peloton::networking::ShutdownRequest::default_instance();
    case 13:
      return ::peloton::networking::HeartbeatRequest::default_instance();
    case 14:
      return ::peloton::networking::UnevictDataRequest::default_instance();
    case 15:
      return ::peloton::networking::TimeSyncRequest::default_instance();
    case 16:
      return ::peloton::networking::QueryPlanExecRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& AbstractPelotonService::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::peloton::networking::TransactionInitResponse::default_instance();
    case 1:
      return ::peloton::networking::TransactionWorkResponse::default_instance();
    case 2:
      return ::peloton::networking::TransactionPrefetchAcknowledgement::default_instance();
    case 3:
      return ::peloton::networking::TransactionMapResponse::default_instance();
    case 4:
      return ::peloton::networking::TransactionReduceResponse::default_instance();
    case 5:
      return ::peloton::networking::TransactionPrepareResponse::default_instance();
    case 6:
      return ::peloton::networking::TransactionFinishResponse::default_instance();
    case 7:
      return ::peloton::networking::TransactionRedirectResponse::default_instance();
    case 8:
      return ::peloton::networking::TransactionDebugResponse::default_instance();
    case 9:
      return ::peloton::networking::SendDataResponse::default_instance();
    case 10:
      return ::peloton::networking::InitializeResponse::default_instance();
    case 11:
      return ::peloton::networking::ShutdownPrepareResponse::default_instance();
    case 12:
      return ::peloton::networking::ShutdownResponse::default_instance();
    case 13:
      return ::peloton::networking::HeartbeatResponse::default_instance();
    case 14:
      return ::peloton::networking::UnevictDataResponse::default_instance();
    case 15:
      return ::peloton::networking::TimeSyncResponse::default_instance();
    case 16:
      return ::peloton::networking::QueryPlanExecResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

AbstractPelotonService_Stub::AbstractPelotonService_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
AbstractPelotonService_Stub::AbstractPelotonService_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
AbstractPelotonService_Stub::~AbstractPelotonService_Stub() {
  if (owns_channel_) delete channel_;
}

void AbstractPelotonService_Stub::TransactionInit(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionInitRequest* request,
                              ::peloton::networking::TransactionInitResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionWork(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionWorkRequest* request,
                              ::peloton::networking::TransactionWorkResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionPrefetch(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionPrefetchResult* request,
                              ::peloton::networking::TransactionPrefetchAcknowledgement* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionMap(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionMapRequest* request,
                              ::peloton::networking::TransactionMapResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionReduce(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionReduceRequest* request,
                              ::peloton::networking::TransactionReduceResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionPrepare(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionPrepareRequest* request,
                              ::peloton::networking::TransactionPrepareResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionFinish(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionFinishRequest* request,
                              ::peloton::networking::TransactionFinishResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionRedirect(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionRedirectRequest* request,
                              ::peloton::networking::TransactionRedirectResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TransactionDebug(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TransactionDebugRequest* request,
                              ::peloton::networking::TransactionDebugResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::SendData(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::SendDataRequest* request,
                              ::peloton::networking::SendDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(9),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::Initialize(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::InitializeRequest* request,
                              ::peloton::networking::InitializeResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(10),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::ShutdownPrepare(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::ShutdownPrepareRequest* request,
                              ::peloton::networking::ShutdownPrepareResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(11),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::Shutdown(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::ShutdownRequest* request,
                              ::peloton::networking::ShutdownResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(12),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::Heartbeat(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::HeartbeatRequest* request,
                              ::peloton::networking::HeartbeatResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(13),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::UnevictData(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::UnevictDataRequest* request,
                              ::peloton::networking::UnevictDataResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(14),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::TimeSync(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::TimeSyncRequest* request,
                              ::peloton::networking::TimeSyncResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(15),
                       controller, request, response, done);
}
void AbstractPelotonService_Stub::QueryPlan(::google::protobuf::RpcController* controller,
                              const ::peloton::networking::QueryPlanExecRequest* request,
                              ::peloton::networking::QueryPlanExecResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(16),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace networking
}  // namespace peloton

// @@protoc_insertion_point(global_scope)
